// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: storage/fileset.proto

package storage

import (
	protoextensions "github.com/pachyderm/pachyderm/v2/src/protoextensions"
	zapcore "go.uber.org/zap/zapcore"
)

func (x *AppendFile) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("path", x.Path)
	protoextensions.AddBytesValue(enc, "data", x.Data)
	return nil
}

func (x *DeleteFile) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("path", x.Path)
	return nil
}

func (x *CreateFilesetRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.GetAppendFile()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("append_file", obj)
	} else {
		enc.AddReflected("append_file", x.GetAppendFile())
	}
	if obj, ok := interface{}(x.GetDeleteFile()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("delete_file", obj)
	} else {
		enc.AddReflected("delete_file", x.GetDeleteFile())
	}
	return nil
}

func (x *CreateFilesetResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("fileset_id", x.FilesetId)
	return nil
}

func (x *FileFilter) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.GetPathRange()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("path_range", obj)
	} else {
		enc.AddReflected("path_range", x.GetPathRange())
	}
	enc.AddString("path_regex", x.GetPathRegex())
	return nil
}

func (x *ReadFilesetRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("fileset_id", x.FilesetId)
	filtersArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Filters {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("filters", zapcore.ArrayMarshalerFunc(filtersArrMarshaller))
	enc.AddBool("empty_files", x.EmptyFiles)
	return nil
}

func (x *ReadFilesetResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("path", x.Path)
	protoextensions.AddBytesValue(enc, "data", x.Data)
	return nil
}

func (x *RenewFilesetRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("fileset_id", x.FilesetId)
	enc.AddInt64("ttl_seconds", x.TtlSeconds)
	return nil
}

func (x *ComposeFilesetRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	fileset_idsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.FilesetIds {
			enc.AppendString(v)
		}
		return nil
	}
	enc.AddArray("fileset_ids", zapcore.ArrayMarshalerFunc(fileset_idsArrMarshaller))
	enc.AddInt64("ttl_seconds", x.TtlSeconds)
	return nil
}

func (x *ComposeFilesetResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("fileset_id", x.FilesetId)
	return nil
}

func (x *ShardFilesetRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("fileset_id", x.FilesetId)
	enc.AddInt64("num_files", x.NumFiles)
	enc.AddInt64("size_bytes", x.SizeBytes)
	return nil
}

func (x *PathRange) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("lower", x.Lower)
	enc.AddString("upper", x.Upper)
	return nil
}

func (x *ShardFilesetResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	shardsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Shards {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("shards", zapcore.ArrayMarshalerFunc(shardsArrMarshaller))
	return nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: storage/fileset.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fileset_CreateFileset_FullMethodName  = "/storage.Fileset/CreateFileset"
	Fileset_ReadFileset_FullMethodName    = "/storage.Fileset/ReadFileset"
	Fileset_ReadFilesetCDR_FullMethodName = "/storage.Fileset/ReadFilesetCDR"
	Fileset_RenewFileset_FullMethodName   = "/storage.Fileset/RenewFileset"
	Fileset_ComposeFileset_FullMethodName = "/storage.Fileset/ComposeFileset"
	Fileset_ShardFileset_FullMethodName   = "/storage.Fileset/ShardFileset"
)

// FilesetClient is the client API for Fileset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesetClient interface {
	// CreateFileset creates a fileset based on a stream of file modifications.
	// A string identifier for the created fileset will be returned that can be used for subsequent fileset operations.
	// Filesets have a fixed time-to-live (ttl), which is currently 10 minutes.
	// Filesets needed longer than the ttl will need to be renewed.
	CreateFileset(ctx context.Context, opts ...grpc.CallOption) (Fileset_CreateFilesetClient, error)
	// ReadFileset reads a fileset.
	ReadFileset(ctx context.Context, in *ReadFilesetRequest, opts ...grpc.CallOption) (Fileset_ReadFilesetClient, error)
	ReadFilesetCDR(ctx context.Context, in *ReadFilesetRequest, opts ...grpc.CallOption) (Fileset_ReadFilesetCDRClient, error)
	// RenewFileset renews a fileset.
	RenewFileset(ctx context.Context, in *RenewFilesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ComposeFileset composes a fileset.
	// Composing a fileset involves combining one or more filesets into a single fileset.
	// TODO: Explain how the filesets are layered and what that means for the order of file modifications.
	ComposeFileset(ctx context.Context, in *ComposeFilesetRequest, opts ...grpc.CallOption) (*ComposeFilesetResponse, error)
	// ShardFileset shards a fileset.
	// The shards of a fileset are returned as a list of path ranges that are disjoint
	// and account for the full set of paths in the fileset.
	ShardFileset(ctx context.Context, in *ShardFilesetRequest, opts ...grpc.CallOption) (*ShardFilesetResponse, error)
}

type filesetClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesetClient(cc grpc.ClientConnInterface) FilesetClient {
	return &filesetClient{cc}
}

func (c *filesetClient) CreateFileset(ctx context.Context, opts ...grpc.CallOption) (Fileset_CreateFilesetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileset_ServiceDesc.Streams[0], Fileset_CreateFileset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &filesetCreateFilesetClient{stream}
	return x, nil
}

type Fileset_CreateFilesetClient interface {
	Send(*CreateFilesetRequest) error
	CloseAndRecv() (*CreateFilesetResponse, error)
	grpc.ClientStream
}

type filesetCreateFilesetClient struct {
	grpc.ClientStream
}

func (x *filesetCreateFilesetClient) Send(m *CreateFilesetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesetCreateFilesetClient) CloseAndRecv() (*CreateFilesetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateFilesetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesetClient) ReadFileset(ctx context.Context, in *ReadFilesetRequest, opts ...grpc.CallOption) (Fileset_ReadFilesetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileset_ServiceDesc.Streams[1], Fileset_ReadFileset_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &filesetReadFilesetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileset_ReadFilesetClient interface {
	Recv() (*ReadFilesetResponse, error)
	grpc.ClientStream
}

type filesetReadFilesetClient struct {
	grpc.ClientStream
}

func (x *filesetReadFilesetClient) Recv() (*ReadFilesetResponse, error) {
	m := new(ReadFilesetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesetClient) ReadFilesetCDR(ctx context.Context, in *ReadFilesetRequest, opts ...grpc.CallOption) (Fileset_ReadFilesetCDRClient, error) {
	stream, err := c.cc.NewStream(ctx, &Fileset_ServiceDesc.Streams[2], Fileset_ReadFilesetCDR_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &filesetReadFilesetCDRClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fileset_ReadFilesetCDRClient interface {
	Recv() (*ReadFilesetCDRResponse, error)
	grpc.ClientStream
}

type filesetReadFilesetCDRClient struct {
	grpc.ClientStream
}

func (x *filesetReadFilesetCDRClient) Recv() (*ReadFilesetCDRResponse, error) {
	m := new(ReadFilesetCDRResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesetClient) RenewFileset(ctx context.Context, in *RenewFilesetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Fileset_RenewFileset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesetClient) ComposeFileset(ctx context.Context, in *ComposeFilesetRequest, opts ...grpc.CallOption) (*ComposeFilesetResponse, error) {
	out := new(ComposeFilesetResponse)
	err := c.cc.Invoke(ctx, Fileset_ComposeFileset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesetClient) ShardFileset(ctx context.Context, in *ShardFilesetRequest, opts ...grpc.CallOption) (*ShardFilesetResponse, error) {
	out := new(ShardFilesetResponse)
	err := c.cc.Invoke(ctx, Fileset_ShardFileset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesetServer is the server API for Fileset service.
// All implementations must embed UnimplementedFilesetServer
// for forward compatibility
type FilesetServer interface {
	// CreateFileset creates a fileset based on a stream of file modifications.
	// A string identifier for the created fileset will be returned that can be used for subsequent fileset operations.
	// Filesets have a fixed time-to-live (ttl), which is currently 10 minutes.
	// Filesets needed longer than the ttl will need to be renewed.
	CreateFileset(Fileset_CreateFilesetServer) error
	// ReadFileset reads a fileset.
	ReadFileset(*ReadFilesetRequest, Fileset_ReadFilesetServer) error
	ReadFilesetCDR(*ReadFilesetRequest, Fileset_ReadFilesetCDRServer) error
	// RenewFileset renews a fileset.
	RenewFileset(context.Context, *RenewFilesetRequest) (*emptypb.Empty, error)
	// ComposeFileset composes a fileset.
	// Composing a fileset involves combining one or more filesets into a single fileset.
	// TODO: Explain how the filesets are layered and what that means for the order of file modifications.
	ComposeFileset(context.Context, *ComposeFilesetRequest) (*ComposeFilesetResponse, error)
	// ShardFileset shards a fileset.
	// The shards of a fileset are returned as a list of path ranges that are disjoint
	// and account for the full set of paths in the fileset.
	ShardFileset(context.Context, *ShardFilesetRequest) (*ShardFilesetResponse, error)
	mustEmbedUnimplementedFilesetServer()
}

// UnimplementedFilesetServer must be embedded to have forward compatible implementations.
type UnimplementedFilesetServer struct {
}

func (UnimplementedFilesetServer) CreateFileset(Fileset_CreateFilesetServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFileset not implemented")
}
func (UnimplementedFilesetServer) ReadFileset(*ReadFilesetRequest, Fileset_ReadFilesetServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFileset not implemented")
}
func (UnimplementedFilesetServer) ReadFilesetCDR(*ReadFilesetRequest, Fileset_ReadFilesetCDRServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadFilesetCDR not implemented")
}
func (UnimplementedFilesetServer) RenewFileset(context.Context, *RenewFilesetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewFileset not implemented")
}
func (UnimplementedFilesetServer) ComposeFileset(context.Context, *ComposeFilesetRequest) (*ComposeFilesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeFileset not implemented")
}
func (UnimplementedFilesetServer) ShardFileset(context.Context, *ShardFilesetRequest) (*ShardFilesetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardFileset not implemented")
}
func (UnimplementedFilesetServer) mustEmbedUnimplementedFilesetServer() {}

// UnsafeFilesetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesetServer will
// result in compilation errors.
type UnsafeFilesetServer interface {
	mustEmbedUnimplementedFilesetServer()
}

func RegisterFilesetServer(s grpc.ServiceRegistrar, srv FilesetServer) {
	s.RegisterService(&Fileset_ServiceDesc, srv)
}

func _Fileset_CreateFileset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesetServer).CreateFileset(&filesetCreateFilesetServer{stream})
}

type Fileset_CreateFilesetServer interface {
	SendAndClose(*CreateFilesetResponse) error
	Recv() (*CreateFilesetRequest, error)
	grpc.ServerStream
}

type filesetCreateFilesetServer struct {
	grpc.ServerStream
}

func (x *filesetCreateFilesetServer) SendAndClose(m *CreateFilesetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesetCreateFilesetServer) Recv() (*CreateFilesetRequest, error) {
	m := new(CreateFilesetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Fileset_ReadFileset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFilesetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesetServer).ReadFileset(m, &filesetReadFilesetServer{stream})
}

type Fileset_ReadFilesetServer interface {
	Send(*ReadFilesetResponse) error
	grpc.ServerStream
}

type filesetReadFilesetServer struct {
	grpc.ServerStream
}

func (x *filesetReadFilesetServer) Send(m *ReadFilesetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fileset_ReadFilesetCDR_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadFilesetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesetServer).ReadFilesetCDR(m, &filesetReadFilesetCDRServer{stream})
}

type Fileset_ReadFilesetCDRServer interface {
	Send(*ReadFilesetCDRResponse) error
	grpc.ServerStream
}

type filesetReadFilesetCDRServer struct {
	grpc.ServerStream
}

func (x *filesetReadFilesetCDRServer) Send(m *ReadFilesetCDRResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Fileset_RenewFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesetServer).RenewFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileset_RenewFileset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesetServer).RenewFileset(ctx, req.(*RenewFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileset_ComposeFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesetServer).ComposeFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileset_ComposeFileset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesetServer).ComposeFileset(ctx, req.(*ComposeFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileset_ShardFileset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardFilesetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesetServer).ShardFileset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileset_ShardFileset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesetServer).ShardFileset(ctx, req.(*ShardFilesetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fileset_ServiceDesc is the grpc.ServiceDesc for Fileset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fileset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Fileset",
	HandlerType: (*FilesetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenewFileset",
			Handler:    _Fileset_RenewFileset_Handler,
		},
		{
			MethodName: "ComposeFileset",
			Handler:    _Fileset_ComposeFileset_Handler,
		},
		{
			MethodName: "ShardFileset",
			Handler:    _Fileset_ShardFileset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFileset",
			Handler:       _Fileset_CreateFileset_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadFileset",
			Handler:       _Fileset_ReadFileset_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadFilesetCDR",
			Handler:       _Fileset_ReadFilesetCDR_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage/fileset.proto",
}

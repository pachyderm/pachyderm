// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: storage/fileset.proto

package storage

import (
	cdr "github.com/pachyderm/pachyderm/v2/src/cdr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AppendFile will append the provided data to the file with the specified path. If
// a file with the specified path doesn't exist, it will be created.
type AppendFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Data *wrapperspb.BytesValue `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AppendFile) Reset() {
	*x = AppendFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendFile) ProtoMessage() {}

func (x *AppendFile) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendFile.ProtoReflect.Descriptor instead.
func (*AppendFile) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{0}
}

func (x *AppendFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AppendFile) GetData() *wrapperspb.BytesValue {
	if x != nil {
		return x.Data
	}
	return nil
}

// DeleteFile will delete the file with the specified path. If a file with the
// specified path doesn't exist, the delete will be a no-op.
type DeleteFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DeleteFile) Reset() {
	*x = DeleteFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFile) ProtoMessage() {}

func (x *DeleteFile) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFile.ProtoReflect.Descriptor instead.
func (*DeleteFile) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// CopyFile copies a file or directory from the specified fileset with the
// specified path. If a file or directory with the specified path doesn't
// exist in the specified fileset, the copy will be a no-op.
// TODO: Append?
type CopyFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// Src is the source path of the file or directory.
	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	// Dst is the destination path of the file or directory.
	// If dst is unset, src will be used as the destination path.
	Dst string `protobuf:"bytes,3,opt,name=dst,proto3" json:"dst,omitempty"`
}

func (x *CopyFile) Reset() {
	*x = CopyFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFile) ProtoMessage() {}

func (x *CopyFile) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFile.ProtoReflect.Descriptor instead.
func (*CopyFile) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{2}
}

func (x *CopyFile) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *CopyFile) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *CopyFile) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

// A CreateFilesetRequest corresponds to a single file modification.
// Supported file modifications are append and delete.
// A put / overwrite file modification can be performed by a delete followed by an
// append.
//
//	TODO: Decide how to handle datums.
type CreateFilesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Modification:
	//
	//	*CreateFilesetRequest_AppendFile
	//	*CreateFilesetRequest_DeleteFile
	//	*CreateFilesetRequest_CopyFile
	Modification isCreateFilesetRequest_Modification `protobuf_oneof:"modification"`
}

func (x *CreateFilesetRequest) Reset() {
	*x = CreateFilesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilesetRequest) ProtoMessage() {}

func (x *CreateFilesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilesetRequest.ProtoReflect.Descriptor instead.
func (*CreateFilesetRequest) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{3}
}

func (m *CreateFilesetRequest) GetModification() isCreateFilesetRequest_Modification {
	if m != nil {
		return m.Modification
	}
	return nil
}

func (x *CreateFilesetRequest) GetAppendFile() *AppendFile {
	if x, ok := x.GetModification().(*CreateFilesetRequest_AppendFile); ok {
		return x.AppendFile
	}
	return nil
}

func (x *CreateFilesetRequest) GetDeleteFile() *DeleteFile {
	if x, ok := x.GetModification().(*CreateFilesetRequest_DeleteFile); ok {
		return x.DeleteFile
	}
	return nil
}

func (x *CreateFilesetRequest) GetCopyFile() *CopyFile {
	if x, ok := x.GetModification().(*CreateFilesetRequest_CopyFile); ok {
		return x.CopyFile
	}
	return nil
}

type isCreateFilesetRequest_Modification interface {
	isCreateFilesetRequest_Modification()
}

type CreateFilesetRequest_AppendFile struct {
	AppendFile *AppendFile `protobuf:"bytes,1,opt,name=append_file,json=appendFile,proto3,oneof"`
}

type CreateFilesetRequest_DeleteFile struct {
	DeleteFile *DeleteFile `protobuf:"bytes,2,opt,name=delete_file,json=deleteFile,proto3,oneof"`
}

type CreateFilesetRequest_CopyFile struct {
	CopyFile *CopyFile `protobuf:"bytes,3,opt,name=copy_file,json=copyFile,proto3,oneof"`
}

func (*CreateFilesetRequest_AppendFile) isCreateFilesetRequest_Modification() {}

func (*CreateFilesetRequest_DeleteFile) isCreateFilesetRequest_Modification() {}

func (*CreateFilesetRequest_CopyFile) isCreateFilesetRequest_Modification() {}

type CreateFilesetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
}

func (x *CreateFilesetResponse) Reset() {
	*x = CreateFilesetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilesetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilesetResponse) ProtoMessage() {}

func (x *CreateFilesetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilesetResponse.ProtoReflect.Descriptor instead.
func (*CreateFilesetResponse) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFilesetResponse) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

type FileFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*FileFilter_PathRange
	//	*FileFilter_PathRegex
	Filter isFileFilter_Filter `protobuf_oneof:"filter"`
}

func (x *FileFilter) Reset() {
	*x = FileFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileFilter) ProtoMessage() {}

func (x *FileFilter) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileFilter.ProtoReflect.Descriptor instead.
func (*FileFilter) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{5}
}

func (m *FileFilter) GetFilter() isFileFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *FileFilter) GetPathRange() *PathRange {
	if x, ok := x.GetFilter().(*FileFilter_PathRange); ok {
		return x.PathRange
	}
	return nil
}

func (x *FileFilter) GetPathRegex() string {
	if x, ok := x.GetFilter().(*FileFilter_PathRegex); ok {
		return x.PathRegex
	}
	return ""
}

type isFileFilter_Filter interface {
	isFileFilter_Filter()
}

type FileFilter_PathRange struct {
	// Only emit files with paths in the provided path range.
	PathRange *PathRange `protobuf:"bytes,1,opt,name=path_range,json=pathRange,proto3,oneof"`
}

type FileFilter_PathRegex struct {
	// Only emit files with paths that match the provided regular expression.
	PathRegex string `protobuf:"bytes,2,opt,name=path_regex,json=pathRegex,proto3,oneof"`
}

func (*FileFilter_PathRange) isFileFilter_Filter() {}

func (*FileFilter_PathRegex) isFileFilter_Filter() {}

type ReadFilesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// Filters constrain which files are emitted.
	// A file is only emitted if it makes it through all of the filters sequentially.
	Filters []*FileFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	// If true, then the file data will be omitted from the stream.
	EmptyFiles bool `protobuf:"varint,3,opt,name=empty_files,json=emptyFiles,proto3" json:"empty_files,omitempty"`
}

func (x *ReadFilesetRequest) Reset() {
	*x = ReadFilesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFilesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilesetRequest) ProtoMessage() {}

func (x *ReadFilesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilesetRequest.ProtoReflect.Descriptor instead.
func (*ReadFilesetRequest) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{6}
}

func (x *ReadFilesetRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *ReadFilesetRequest) GetFilters() []*FileFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ReadFilesetRequest) GetEmptyFiles() bool {
	if x != nil {
		return x.EmptyFiles
	}
	return false
}

// A ReadFilesetResponse corresponds to a single chunk of data in a file.
// Small or empty files will be contained within a single message, while large
// files may be spread across multiple messages.
// For files spread across multiple messages, each message will have the same
// path and the content will be returned in append order.
type ReadFilesetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Data *wrapperspb.BytesValue `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReadFilesetResponse) Reset() {
	*x = ReadFilesetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFilesetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilesetResponse) ProtoMessage() {}

func (x *ReadFilesetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilesetResponse.ProtoReflect.Descriptor instead.
func (*ReadFilesetResponse) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{7}
}

func (x *ReadFilesetResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadFilesetResponse) GetData() *wrapperspb.BytesValue {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReadFilesetCDRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Ref  *cdr.Ref `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *ReadFilesetCDRResponse) Reset() {
	*x = ReadFilesetCDRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFilesetCDRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilesetCDRResponse) ProtoMessage() {}

func (x *ReadFilesetCDRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilesetCDRResponse.ProtoReflect.Descriptor instead.
func (*ReadFilesetCDRResponse) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{8}
}

func (x *ReadFilesetCDRResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadFilesetCDRResponse) GetRef() *cdr.Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

type RenewFilesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// The TTL, in seconds, for the fileset after renewal.
	TtlSeconds int64 `protobuf:"varint,2,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *RenewFilesetRequest) Reset() {
	*x = RenewFilesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenewFilesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewFilesetRequest) ProtoMessage() {}

func (x *RenewFilesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewFilesetRequest.ProtoReflect.Descriptor instead.
func (*RenewFilesetRequest) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{9}
}

func (x *RenewFilesetRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *RenewFilesetRequest) GetTtlSeconds() int64 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type ComposeFilesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetIds []string `protobuf:"bytes,1,rep,name=fileset_ids,json=filesetIds,proto3" json:"fileset_ids,omitempty"`
	// The TTL, in seconds, for the composite fileset that is created.
	TtlSeconds int64 `protobuf:"varint,2,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *ComposeFilesetRequest) Reset() {
	*x = ComposeFilesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFilesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFilesetRequest) ProtoMessage() {}

func (x *ComposeFilesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFilesetRequest.ProtoReflect.Descriptor instead.
func (*ComposeFilesetRequest) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{10}
}

func (x *ComposeFilesetRequest) GetFilesetIds() []string {
	if x != nil {
		return x.FilesetIds
	}
	return nil
}

func (x *ComposeFilesetRequest) GetTtlSeconds() int64 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

type ComposeFilesetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
}

func (x *ComposeFilesetResponse) Reset() {
	*x = ComposeFilesetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComposeFilesetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComposeFilesetResponse) ProtoMessage() {}

func (x *ComposeFilesetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComposeFilesetResponse.ProtoReflect.Descriptor instead.
func (*ComposeFilesetResponse) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{11}
}

func (x *ComposeFilesetResponse) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

// If both num_files and size_bytes are set, shards are created
// based on whichever threshold is surpassed first. If a shard
// configuration field (num_files, size_bytes) is unset, the
// storage's default value is used.
type ShardFilesetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesetId string `protobuf:"bytes,1,opt,name=fileset_id,json=filesetId,proto3" json:"fileset_id,omitempty"`
	// Number of files targeted in each shard.
	NumFiles int64 `protobuf:"varint,2,opt,name=num_files,json=numFiles,proto3" json:"num_files,omitempty"`
	// Size (in bytes) targeted for each shard.
	SizeBytes int64 `protobuf:"varint,3,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
}

func (x *ShardFilesetRequest) Reset() {
	*x = ShardFilesetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardFilesetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardFilesetRequest) ProtoMessage() {}

func (x *ShardFilesetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardFilesetRequest.ProtoReflect.Descriptor instead.
func (*ShardFilesetRequest) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{12}
}

func (x *ShardFilesetRequest) GetFilesetId() string {
	if x != nil {
		return x.FilesetId
	}
	return ""
}

func (x *ShardFilesetRequest) GetNumFiles() int64 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

func (x *ShardFilesetRequest) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

// PathRange is a range of paths.
// The range is inclusive, exclusive: [Lower, Upper).
type PathRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower string `protobuf:"bytes,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper string `protobuf:"bytes,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *PathRange) Reset() {
	*x = PathRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathRange) ProtoMessage() {}

func (x *PathRange) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathRange.ProtoReflect.Descriptor instead.
func (*PathRange) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{13}
}

func (x *PathRange) GetLower() string {
	if x != nil {
		return x.Lower
	}
	return ""
}

func (x *PathRange) GetUpper() string {
	if x != nil {
		return x.Upper
	}
	return ""
}

type ShardFilesetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shards []*PathRange `protobuf:"bytes,1,rep,name=shards,proto3" json:"shards,omitempty"`
}

func (x *ShardFilesetResponse) Reset() {
	*x = ShardFilesetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_fileset_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardFilesetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardFilesetResponse) ProtoMessage() {}

func (x *ShardFilesetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_fileset_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardFilesetResponse.ProtoReflect.Descriptor instead.
func (*ShardFilesetResponse) Descriptor() ([]byte, []int) {
	return file_storage_fileset_proto_rawDescGZIP(), []int{14}
}

func (x *ShardFilesetResponse) GetShards() []*PathRange {
	if x != nil {
		return x.Shards
	}
	return nil
}

var File_storage_fileset_proto protoreflect.FileDescriptor

var file_storage_fileset_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63,
	0x64, 0x72, 0x2f, 0x63, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x20, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x22, 0x4d, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x70,
	0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x74,
	0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x83, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x16, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x44, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x63, 0x64, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x55, 0x0a,
	0x13, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x37, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x09, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x32, 0xeb, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x44, 0x52, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x43, 0x44, 0x52, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x61,
	0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_fileset_proto_rawDescOnce sync.Once
	file_storage_fileset_proto_rawDescData = file_storage_fileset_proto_rawDesc
)

func file_storage_fileset_proto_rawDescGZIP() []byte {
	file_storage_fileset_proto_rawDescOnce.Do(func() {
		file_storage_fileset_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_fileset_proto_rawDescData)
	})
	return file_storage_fileset_proto_rawDescData
}

var file_storage_fileset_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_storage_fileset_proto_goTypes = []interface{}{
	(*AppendFile)(nil),             // 0: storage.AppendFile
	(*DeleteFile)(nil),             // 1: storage.DeleteFile
	(*CopyFile)(nil),               // 2: storage.CopyFile
	(*CreateFilesetRequest)(nil),   // 3: storage.CreateFilesetRequest
	(*CreateFilesetResponse)(nil),  // 4: storage.CreateFilesetResponse
	(*FileFilter)(nil),             // 5: storage.FileFilter
	(*ReadFilesetRequest)(nil),     // 6: storage.ReadFilesetRequest
	(*ReadFilesetResponse)(nil),    // 7: storage.ReadFilesetResponse
	(*ReadFilesetCDRResponse)(nil), // 8: storage.ReadFilesetCDRResponse
	(*RenewFilesetRequest)(nil),    // 9: storage.RenewFilesetRequest
	(*ComposeFilesetRequest)(nil),  // 10: storage.ComposeFilesetRequest
	(*ComposeFilesetResponse)(nil), // 11: storage.ComposeFilesetResponse
	(*ShardFilesetRequest)(nil),    // 12: storage.ShardFilesetRequest
	(*PathRange)(nil),              // 13: storage.PathRange
	(*ShardFilesetResponse)(nil),   // 14: storage.ShardFilesetResponse
	(*wrapperspb.BytesValue)(nil),  // 15: google.protobuf.BytesValue
	(*cdr.Ref)(nil),                // 16: cdr.Ref
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
}
var file_storage_fileset_proto_depIdxs = []int32{
	15, // 0: storage.AppendFile.data:type_name -> google.protobuf.BytesValue
	0,  // 1: storage.CreateFilesetRequest.append_file:type_name -> storage.AppendFile
	1,  // 2: storage.CreateFilesetRequest.delete_file:type_name -> storage.DeleteFile
	2,  // 3: storage.CreateFilesetRequest.copy_file:type_name -> storage.CopyFile
	13, // 4: storage.FileFilter.path_range:type_name -> storage.PathRange
	5,  // 5: storage.ReadFilesetRequest.filters:type_name -> storage.FileFilter
	15, // 6: storage.ReadFilesetResponse.data:type_name -> google.protobuf.BytesValue
	16, // 7: storage.ReadFilesetCDRResponse.ref:type_name -> cdr.Ref
	13, // 8: storage.ShardFilesetResponse.shards:type_name -> storage.PathRange
	3,  // 9: storage.Fileset.CreateFileset:input_type -> storage.CreateFilesetRequest
	6,  // 10: storage.Fileset.ReadFileset:input_type -> storage.ReadFilesetRequest
	6,  // 11: storage.Fileset.ReadFilesetCDR:input_type -> storage.ReadFilesetRequest
	9,  // 12: storage.Fileset.RenewFileset:input_type -> storage.RenewFilesetRequest
	10, // 13: storage.Fileset.ComposeFileset:input_type -> storage.ComposeFilesetRequest
	12, // 14: storage.Fileset.ShardFileset:input_type -> storage.ShardFilesetRequest
	4,  // 15: storage.Fileset.CreateFileset:output_type -> storage.CreateFilesetResponse
	7,  // 16: storage.Fileset.ReadFileset:output_type -> storage.ReadFilesetResponse
	8,  // 17: storage.Fileset.ReadFilesetCDR:output_type -> storage.ReadFilesetCDRResponse
	17, // 18: storage.Fileset.RenewFileset:output_type -> google.protobuf.Empty
	11, // 19: storage.Fileset.ComposeFileset:output_type -> storage.ComposeFilesetResponse
	14, // 20: storage.Fileset.ShardFileset:output_type -> storage.ShardFilesetResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_storage_fileset_proto_init() }
func file_storage_fileset_proto_init() {
	if File_storage_fileset_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_storage_fileset_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilesetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFilesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFilesetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFilesetCDRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenewFilesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFilesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComposeFilesetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardFilesetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_fileset_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardFilesetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_fileset_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateFilesetRequest_AppendFile)(nil),
		(*CreateFilesetRequest_DeleteFile)(nil),
		(*CreateFilesetRequest_CopyFile)(nil),
	}
	file_storage_fileset_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*FileFilter_PathRange)(nil),
		(*FileFilter_PathRegex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_fileset_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_fileset_proto_goTypes,
		DependencyIndexes: file_storage_fileset_proto_depIdxs,
		MessageInfos:      file_storage_fileset_proto_msgTypes,
	}.Build()
	File_storage_fileset_proto = out.File
	file_storage_fileset_proto_rawDesc = nil
	file_storage_fileset_proto_goTypes = nil
	file_storage_fileset_proto_depIdxs = nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/pfs/server/pfsserver.proto

package server

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShardTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShardTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShardTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShardTaskMultiError, or nil
// if none found.
func (m *ShardTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ShardTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShardTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShardTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShardTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShardTaskMultiError(errors)
	}

	return nil
}

// ShardTaskMultiError is an error wrapping multiple validation errors returned
// by ShardTask.ValidateAll() if the designated constraints aren't met.
type ShardTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShardTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShardTaskMultiError) AllErrors() []error { return m }

// ShardTaskValidationError is the validation error returned by
// ShardTask.Validate if the designated constraints aren't met.
type ShardTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShardTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShardTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShardTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShardTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShardTaskValidationError) ErrorName() string { return "ShardTaskValidationError" }

// Error satisfies the builtin error interface
func (e ShardTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShardTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShardTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShardTaskValidationError{}

// Validate checks the field values on ShardTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShardTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShardTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShardTaskResultMultiError, or nil if none found.
func (m *ShardTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ShardTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCompactTasks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ShardTaskResultValidationError{
						field:  fmt.Sprintf("CompactTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ShardTaskResultValidationError{
						field:  fmt.Sprintf("CompactTasks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ShardTaskResultValidationError{
					field:  fmt.Sprintf("CompactTasks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ShardTaskResultMultiError(errors)
	}

	return nil
}

// ShardTaskResultMultiError is an error wrapping multiple validation errors
// returned by ShardTaskResult.ValidateAll() if the designated constraints
// aren't met.
type ShardTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShardTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShardTaskResultMultiError) AllErrors() []error { return m }

// ShardTaskResultValidationError is the validation error returned by
// ShardTaskResult.Validate if the designated constraints aren't met.
type ShardTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShardTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShardTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShardTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShardTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShardTaskResultValidationError) ErrorName() string { return "ShardTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e ShardTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShardTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShardTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShardTaskResultValidationError{}

// Validate checks the field values on PathRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PathRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PathRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PathRangeMultiError, or nil
// if none found.
func (m *PathRange) ValidateAll() error {
	return m.validate(true)
}

func (m *PathRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lower

	// no validation rules for Upper

	if len(errors) > 0 {
		return PathRangeMultiError(errors)
	}

	return nil
}

// PathRangeMultiError is an error wrapping multiple validation errors returned
// by PathRange.ValidateAll() if the designated constraints aren't met.
type PathRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathRangeMultiError) AllErrors() []error { return m }

// PathRangeValidationError is the validation error returned by
// PathRange.Validate if the designated constraints aren't met.
type PathRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathRangeValidationError) ErrorName() string { return "PathRangeValidationError" }

// Error satisfies the builtin error interface
func (e PathRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPathRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathRangeValidationError{}

// Validate checks the field values on CompactTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CompactTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompactTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompactTaskMultiError, or
// nil if none found.
func (m *CompactTask) ValidateAll() error {
	return m.validate(true)
}

func (m *CompactTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompactTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompactTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompactTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CompactTaskMultiError(errors)
	}

	return nil
}

// CompactTaskMultiError is an error wrapping multiple validation errors
// returned by CompactTask.ValidateAll() if the designated constraints aren't met.
type CompactTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompactTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompactTaskMultiError) AllErrors() []error { return m }

// CompactTaskValidationError is the validation error returned by
// CompactTask.Validate if the designated constraints aren't met.
type CompactTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompactTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompactTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompactTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompactTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompactTaskValidationError) ErrorName() string { return "CompactTaskValidationError" }

// Error satisfies the builtin error interface
func (e CompactTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompactTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompactTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompactTaskValidationError{}

// Validate checks the field values on CompactTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CompactTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompactTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompactTaskResultMultiError, or nil if none found.
func (m *CompactTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CompactTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Handle

	if len(errors) > 0 {
		return CompactTaskResultMultiError(errors)
	}

	return nil
}

// CompactTaskResultMultiError is an error wrapping multiple validation errors
// returned by CompactTaskResult.ValidateAll() if the designated constraints
// aren't met.
type CompactTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompactTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompactTaskResultMultiError) AllErrors() []error { return m }

// CompactTaskResultValidationError is the validation error returned by
// CompactTaskResult.Validate if the designated constraints aren't met.
type CompactTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompactTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompactTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompactTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompactTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompactTaskResultValidationError) ErrorName() string {
	return "CompactTaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e CompactTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompactTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompactTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompactTaskResultValidationError{}

// Validate checks the field values on ConcatTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConcatTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConcatTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConcatTaskMultiError, or
// nil if none found.
func (m *ConcatTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ConcatTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConcatTaskMultiError(errors)
	}

	return nil
}

// ConcatTaskMultiError is an error wrapping multiple validation errors
// returned by ConcatTask.ValidateAll() if the designated constraints aren't met.
type ConcatTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcatTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcatTaskMultiError) AllErrors() []error { return m }

// ConcatTaskValidationError is the validation error returned by
// ConcatTask.Validate if the designated constraints aren't met.
type ConcatTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcatTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcatTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcatTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcatTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcatTaskValidationError) ErrorName() string { return "ConcatTaskValidationError" }

// Error satisfies the builtin error interface
func (e ConcatTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcatTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcatTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcatTaskValidationError{}

// Validate checks the field values on ConcatTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConcatTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConcatTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConcatTaskResultMultiError, or nil if none found.
func (m *ConcatTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ConcatTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Handle

	if len(errors) > 0 {
		return ConcatTaskResultMultiError(errors)
	}

	return nil
}

// ConcatTaskResultMultiError is an error wrapping multiple validation errors
// returned by ConcatTaskResult.ValidateAll() if the designated constraints
// aren't met.
type ConcatTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcatTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcatTaskResultMultiError) AllErrors() []error { return m }

// ConcatTaskResultValidationError is the validation error returned by
// ConcatTaskResult.Validate if the designated constraints aren't met.
type ConcatTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcatTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcatTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcatTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcatTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcatTaskResultValidationError) ErrorName() string { return "ConcatTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e ConcatTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcatTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcatTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcatTaskResultValidationError{}

// Validate checks the field values on ValidateTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ValidateTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ValidateTaskMultiError, or
// nil if none found.
func (m *ValidateTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Handle

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ValidateTaskMultiError(errors)
	}

	return nil
}

// ValidateTaskMultiError is an error wrapping multiple validation errors
// returned by ValidateTask.ValidateAll() if the designated constraints aren't met.
type ValidateTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTaskMultiError) AllErrors() []error { return m }

// ValidateTaskValidationError is the validation error returned by
// ValidateTask.Validate if the designated constraints aren't met.
type ValidateTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTaskValidationError) ErrorName() string { return "ValidateTaskValidationError" }

// Error satisfies the builtin error interface
func (e ValidateTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTaskValidationError{}

// Validate checks the field values on ValidateTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateTaskResultMultiError, or nil if none found.
func (m *ValidateTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFirst()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateTaskResultValidationError{
					field:  "First",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateTaskResultValidationError{
					field:  "First",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirst()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateTaskResultValidationError{
				field:  "First",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ValidateTaskResultValidationError{
					field:  "Last",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ValidateTaskResultValidationError{
					field:  "Last",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateTaskResultValidationError{
				field:  "Last",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	// no validation rules for SizeBytes

	if len(errors) > 0 {
		return ValidateTaskResultMultiError(errors)
	}

	return nil
}

// ValidateTaskResultMultiError is an error wrapping multiple validation errors
// returned by ValidateTaskResult.ValidateAll() if the designated constraints
// aren't met.
type ValidateTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTaskResultMultiError) AllErrors() []error { return m }

// ValidateTaskResultValidationError is the validation error returned by
// ValidateTaskResult.Validate if the designated constraints aren't met.
type ValidateTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTaskResultValidationError) ErrorName() string {
	return "ValidateTaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTaskResultValidationError{}

// Validate checks the field values on PutFileURLTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutFileURLTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileURLTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutFileURLTaskMultiError,
// or nil if none found.
func (m *PutFileURLTask) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileURLTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Dst

	// no validation rules for Datum

	// no validation rules for URL

	// no validation rules for StartOffset

	// no validation rules for EndOffset

	if len(errors) > 0 {
		return PutFileURLTaskMultiError(errors)
	}

	return nil
}

// PutFileURLTaskMultiError is an error wrapping multiple validation errors
// returned by PutFileURLTask.ValidateAll() if the designated constraints
// aren't met.
type PutFileURLTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileURLTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileURLTaskMultiError) AllErrors() []error { return m }

// PutFileURLTaskValidationError is the validation error returned by
// PutFileURLTask.Validate if the designated constraints aren't met.
type PutFileURLTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileURLTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileURLTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileURLTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileURLTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileURLTaskValidationError) ErrorName() string { return "PutFileURLTaskValidationError" }

// Error satisfies the builtin error interface
func (e PutFileURLTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileURLTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileURLTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileURLTaskValidationError{}

// Validate checks the field values on PutFileURLTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutFileURLTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileURLTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutFileURLTaskResultMultiError, or nil if none found.
func (m *PutFileURLTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileURLTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Handle

	if len(errors) > 0 {
		return PutFileURLTaskResultMultiError(errors)
	}

	return nil
}

// PutFileURLTaskResultMultiError is an error wrapping multiple validation
// errors returned by PutFileURLTaskResult.ValidateAll() if the designated
// constraints aren't met.
type PutFileURLTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileURLTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileURLTaskResultMultiError) AllErrors() []error { return m }

// PutFileURLTaskResultValidationError is the validation error returned by
// PutFileURLTaskResult.Validate if the designated constraints aren't met.
type PutFileURLTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileURLTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileURLTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileURLTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileURLTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileURLTaskResultValidationError) ErrorName() string {
	return "PutFileURLTaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e PutFileURLTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileURLTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileURLTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileURLTaskResultValidationError{}

// Validate checks the field values on GetFileURLTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileURLTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileURLTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileURLTaskMultiError,
// or nil if none found.
func (m *GetFileURLTask) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileURLTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for URL

	// no validation rules for Handle

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileURLTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileURLTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileURLTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileURLTaskMultiError(errors)
	}

	return nil
}

// GetFileURLTaskMultiError is an error wrapping multiple validation errors
// returned by GetFileURLTask.ValidateAll() if the designated constraints
// aren't met.
type GetFileURLTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileURLTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileURLTaskMultiError) AllErrors() []error { return m }

// GetFileURLTaskValidationError is the validation error returned by
// GetFileURLTask.Validate if the designated constraints aren't met.
type GetFileURLTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileURLTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileURLTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileURLTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileURLTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileURLTaskValidationError) ErrorName() string { return "GetFileURLTaskValidationError" }

// Error satisfies the builtin error interface
func (e GetFileURLTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileURLTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileURLTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileURLTaskValidationError{}

// Validate checks the field values on GetFileURLTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileURLTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileURLTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileURLTaskResultMultiError, or nil if none found.
func (m *GetFileURLTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileURLTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetFileURLTaskResultMultiError(errors)
	}

	return nil
}

// GetFileURLTaskResultMultiError is an error wrapping multiple validation
// errors returned by GetFileURLTaskResult.ValidateAll() if the designated
// constraints aren't met.
type GetFileURLTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileURLTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileURLTaskResultMultiError) AllErrors() []error { return m }

// GetFileURLTaskResultValidationError is the validation error returned by
// GetFileURLTaskResult.Validate if the designated constraints aren't met.
type GetFileURLTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileURLTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileURLTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileURLTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileURLTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileURLTaskResultValidationError) ErrorName() string {
	return "GetFileURLTaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileURLTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileURLTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileURLTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileURLTaskResultValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server/worker/datum/datum.proto

package datum

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Meta with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Meta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Meta with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetaMultiError, or nil if none found.
func (m *Meta) ValidateAll() error {
	return m.validate(true)
}

func (m *Meta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Job",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetaValidationError{
				field:  "Job",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetaValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetaValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetaValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Hash

	// no validation rules for State

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetaValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetaValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Index

	// no validation rules for ImageId

	if len(errors) > 0 {
		return MetaMultiError(errors)
	}

	return nil
}

// MetaMultiError is an error wrapping multiple validation errors returned by
// Meta.ValidateAll() if the designated constraints aren't met.
type MetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetaMultiError) AllErrors() []error { return m }

// MetaValidationError is the validation error returned by Meta.Validate if the
// designated constraints aren't met.
type MetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetaValidationError) ErrorName() string { return "MetaValidationError" }

// Error satisfies the builtin error interface
func (e MetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetaValidationError{}

// Validate checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatsMultiError, or nil if none found.
func (m *Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProcessStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "ProcessStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "ProcessStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "ProcessStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Processed

	// no validation rules for Skipped

	// no validation rules for Total

	// no validation rules for Failed

	// no validation rules for Recovered

	// no validation rules for FailedId

	if len(errors) > 0 {
		return StatsMultiError(errors)
	}

	return nil
}

// StatsMultiError is an error wrapping multiple validation errors returned by
// Stats.ValidateAll() if the designated constraints aren't met.
type StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsMultiError) AllErrors() []error { return m }

// StatsValidationError is the validation error returned by Stats.Validate if
// the designated constraints aren't met.
type StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsValidationError) ErrorName() string { return "StatsValidationError" }

// Error satisfies the builtin error interface
func (e StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsValidationError{}

// Validate checks the field values on PFSTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PFSTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PFSTask with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PFSTaskMultiError, or nil if none found.
func (m *PFSTask) ValidateAll() error {
	return m.validate(true)
}

func (m *PFSTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PFSTaskValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PFSTaskValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PFSTaskValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PFSTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PFSTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PFSTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BaseIndex

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return PFSTaskMultiError(errors)
	}

	return nil
}

// PFSTaskMultiError is an error wrapping multiple validation errors returned
// by PFSTask.ValidateAll() if the designated constraints aren't met.
type PFSTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PFSTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PFSTaskMultiError) AllErrors() []error { return m }

// PFSTaskValidationError is the validation error returned by PFSTask.Validate
// if the designated constraints aren't met.
type PFSTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PFSTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PFSTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PFSTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PFSTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PFSTaskValidationError) ErrorName() string { return "PFSTaskValidationError" }

// Error satisfies the builtin error interface
func (e PFSTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPFSTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PFSTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PFSTaskValidationError{}

// Validate checks the field values on PFSTaskResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PFSTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PFSTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PFSTaskResultMultiError, or
// nil if none found.
func (m *PFSTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *PFSTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if len(errors) > 0 {
		return PFSTaskResultMultiError(errors)
	}

	return nil
}

// PFSTaskResultMultiError is an error wrapping multiple validation errors
// returned by PFSTaskResult.ValidateAll() if the designated constraints
// aren't met.
type PFSTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PFSTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PFSTaskResultMultiError) AllErrors() []error { return m }

// PFSTaskResultValidationError is the validation error returned by
// PFSTaskResult.Validate if the designated constraints aren't met.
type PFSTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PFSTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PFSTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PFSTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PFSTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PFSTaskResultValidationError) ErrorName() string { return "PFSTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e PFSTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPFSTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PFSTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PFSTaskResultValidationError{}

// Validate checks the field values on CrossTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CrossTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrossTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CrossTaskMultiError, or nil
// if none found.
func (m *CrossTask) ValidateAll() error {
	return m.validate(true)
}

func (m *CrossTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BaseFileSetIndex

	if all {
		switch v := interface{}(m.GetBaseFileSetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CrossTaskValidationError{
					field:  "BaseFileSetPathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CrossTaskValidationError{
					field:  "BaseFileSetPathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBaseFileSetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CrossTaskValidationError{
				field:  "BaseFileSetPathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BaseIndex

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return CrossTaskMultiError(errors)
	}

	return nil
}

// CrossTaskMultiError is an error wrapping multiple validation errors returned
// by CrossTask.ValidateAll() if the designated constraints aren't met.
type CrossTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrossTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrossTaskMultiError) AllErrors() []error { return m }

// CrossTaskValidationError is the validation error returned by
// CrossTask.Validate if the designated constraints aren't met.
type CrossTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrossTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrossTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrossTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrossTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrossTaskValidationError) ErrorName() string { return "CrossTaskValidationError" }

// Error satisfies the builtin error interface
func (e CrossTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrossTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrossTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrossTaskValidationError{}

// Validate checks the field values on CrossTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CrossTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CrossTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CrossTaskResultMultiError, or nil if none found.
func (m *CrossTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *CrossTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if len(errors) > 0 {
		return CrossTaskResultMultiError(errors)
	}

	return nil
}

// CrossTaskResultMultiError is an error wrapping multiple validation errors
// returned by CrossTaskResult.ValidateAll() if the designated constraints
// aren't met.
type CrossTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CrossTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CrossTaskResultMultiError) AllErrors() []error { return m }

// CrossTaskResultValidationError is the validation error returned by
// CrossTaskResult.Validate if the designated constraints aren't met.
type CrossTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CrossTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CrossTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CrossTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CrossTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CrossTaskResultValidationError) ErrorName() string { return "CrossTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e CrossTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCrossTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CrossTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CrossTaskResultValidationError{}

// Validate checks the field values on KeyTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyTask with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in KeyTaskMultiError, or nil if none found.
func (m *KeyTask) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KeyTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KeyTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KeyTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return KeyTaskMultiError(errors)
	}

	return nil
}

// KeyTaskMultiError is an error wrapping multiple validation errors returned
// by KeyTask.ValidateAll() if the designated constraints aren't met.
type KeyTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyTaskMultiError) AllErrors() []error { return m }

// KeyTaskValidationError is the validation error returned by KeyTask.Validate
// if the designated constraints aren't met.
type KeyTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyTaskValidationError) ErrorName() string { return "KeyTaskValidationError" }

// Error satisfies the builtin error interface
func (e KeyTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyTaskValidationError{}

// Validate checks the field values on KeyTaskResult with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyTaskResultMultiError, or
// nil if none found.
func (m *KeyTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if len(errors) > 0 {
		return KeyTaskResultMultiError(errors)
	}

	return nil
}

// KeyTaskResultMultiError is an error wrapping multiple validation errors
// returned by KeyTaskResult.ValidateAll() if the designated constraints
// aren't met.
type KeyTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyTaskResultMultiError) AllErrors() []error { return m }

// KeyTaskResultValidationError is the validation error returned by
// KeyTaskResult.Validate if the designated constraints aren't met.
type KeyTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyTaskResultValidationError) ErrorName() string { return "KeyTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e KeyTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyTaskResultValidationError{}

// Validate checks the field values on MergeTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MergeTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MergeTaskMultiError, or nil
// if none found.
func (m *MergeTask) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPathRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MergeTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MergeTaskValidationError{
					field:  "PathRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPathRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MergeTaskValidationError{
				field:  "PathRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return MergeTaskMultiError(errors)
	}

	return nil
}

// MergeTaskMultiError is an error wrapping multiple validation errors returned
// by MergeTask.ValidateAll() if the designated constraints aren't met.
type MergeTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeTaskMultiError) AllErrors() []error { return m }

// MergeTaskValidationError is the validation error returned by
// MergeTask.Validate if the designated constraints aren't met.
type MergeTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeTaskValidationError) ErrorName() string { return "MergeTaskValidationError" }

// Error satisfies the builtin error interface
func (e MergeTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeTaskValidationError{}

// Validate checks the field values on MergeTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MergeTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeTaskResultMultiError, or nil if none found.
func (m *MergeTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if len(errors) > 0 {
		return MergeTaskResultMultiError(errors)
	}

	return nil
}

// MergeTaskResultMultiError is an error wrapping multiple validation errors
// returned by MergeTaskResult.ValidateAll() if the designated constraints
// aren't met.
type MergeTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeTaskResultMultiError) AllErrors() []error { return m }

// MergeTaskResultValidationError is the validation error returned by
// MergeTaskResult.Validate if the designated constraints aren't met.
type MergeTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeTaskResultValidationError) ErrorName() string { return "MergeTaskResultValidationError" }

// Error satisfies the builtin error interface
func (e MergeTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeTaskResultValidationError{}

// Validate checks the field values on ComposeTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComposeTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComposeTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComposeTaskMultiError, or
// nil if none found.
func (m *ComposeTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ComposeTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthToken

	if len(errors) > 0 {
		return ComposeTaskMultiError(errors)
	}

	return nil
}

// ComposeTaskMultiError is an error wrapping multiple validation errors
// returned by ComposeTask.ValidateAll() if the designated constraints aren't met.
type ComposeTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComposeTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComposeTaskMultiError) AllErrors() []error { return m }

// ComposeTaskValidationError is the validation error returned by
// ComposeTask.Validate if the designated constraints aren't met.
type ComposeTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComposeTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComposeTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComposeTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComposeTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComposeTaskValidationError) ErrorName() string { return "ComposeTaskValidationError" }

// Error satisfies the builtin error interface
func (e ComposeTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComposeTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComposeTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComposeTaskValidationError{}

// Validate checks the field values on ComposeTaskResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ComposeTaskResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComposeTaskResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ComposeTaskResultMultiError, or nil if none found.
func (m *ComposeTaskResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ComposeTaskResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileSetId

	if len(errors) > 0 {
		return ComposeTaskResultMultiError(errors)
	}

	return nil
}

// ComposeTaskResultMultiError is an error wrapping multiple validation errors
// returned by ComposeTaskResult.ValidateAll() if the designated constraints
// aren't met.
type ComposeTaskResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComposeTaskResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComposeTaskResultMultiError) AllErrors() []error { return m }

// ComposeTaskResultValidationError is the validation error returned by
// ComposeTaskResult.Validate if the designated constraints aren't met.
type ComposeTaskResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComposeTaskResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComposeTaskResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComposeTaskResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComposeTaskResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComposeTaskResultValidationError) ErrorName() string {
	return "ComposeTaskResultValidationError"
}

// Error satisfies the builtin error interface
func (e ComposeTaskResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComposeTaskResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComposeTaskResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComposeTaskResultValidationError{}

// Validate checks the field values on SetSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetSpec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSpec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SetSpecMultiError, or nil if none found.
func (m *SetSpec) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSpec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for SizeBytes

	if len(errors) > 0 {
		return SetSpecMultiError(errors)
	}

	return nil
}

// SetSpecMultiError is an error wrapping multiple validation errors returned
// by SetSpec.ValidateAll() if the designated constraints aren't met.
type SetSpecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSpecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSpecMultiError) AllErrors() []error { return m }

// SetSpecValidationError is the validation error returned by SetSpec.Validate
// if the designated constraints aren't met.
type SetSpecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSpecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSpecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSpecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSpecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSpecValidationError) ErrorName() string { return "SetSpecValidationError" }

// Error satisfies the builtin error interface
func (e SetSpecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSpec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSpecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSpecValidationError{}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/worker/pipeline/transform/transform.proto

package transform

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/v2/src/pfs"
	pps "github.com/pachyderm/pachyderm/v2/src/pps"
	datum "github.com/pachyderm/pachyderm/v2/src/server/worker/datum"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DatumSet struct {
	// Inputs
	JobID        string      `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	FileSetId    string      `protobuf:"bytes,2,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	OutputCommit *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	// Outputs
	OutputFileSetId      string       `protobuf:"bytes,4,opt,name=output_file_set_id,json=outputFileSetId,proto3" json:"output_file_set_id,omitempty"`
	MetaFileSetId        string       `protobuf:"bytes,5,opt,name=meta_file_set_id,json=metaFileSetId,proto3" json:"meta_file_set_id,omitempty"`
	Stats                *datum.Stats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DatumSet) Reset()         { *m = DatumSet{} }
func (m *DatumSet) String() string { return proto.CompactTextString(m) }
func (*DatumSet) ProtoMessage()    {}
func (*DatumSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{0}
}
func (m *DatumSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatumSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatumSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatumSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatumSet.Merge(m, src)
}
func (m *DatumSet) XXX_Size() int {
	return m.Size()
}
func (m *DatumSet) XXX_DiscardUnknown() {
	xxx_messageInfo_DatumSet.DiscardUnknown(m)
}

var xxx_messageInfo_DatumSet proto.InternalMessageInfo

func (m *DatumSet) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *DatumSet) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *DatumSet) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *DatumSet) GetOutputFileSetId() string {
	if m != nil {
		return m.OutputFileSetId
	}
	return ""
}

func (m *DatumSet) GetMetaFileSetId() string {
	if m != nil {
		return m.MetaFileSetId
	}
	return ""
}

func (m *DatumSet) GetStats() *datum.Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type ComputeParallelDatumsTask struct {
	Job                  *pps.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	FileSetId            string   `protobuf:"bytes,2,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	BaseFileSetId        string   `protobuf:"bytes,3,opt,name=base_file_set_id,json=baseFileSetId,proto3" json:"base_file_set_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeParallelDatumsTask) Reset()         { *m = ComputeParallelDatumsTask{} }
func (m *ComputeParallelDatumsTask) String() string { return proto.CompactTextString(m) }
func (*ComputeParallelDatumsTask) ProtoMessage()    {}
func (*ComputeParallelDatumsTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{1}
}
func (m *ComputeParallelDatumsTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeParallelDatumsTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeParallelDatumsTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeParallelDatumsTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeParallelDatumsTask.Merge(m, src)
}
func (m *ComputeParallelDatumsTask) XXX_Size() int {
	return m.Size()
}
func (m *ComputeParallelDatumsTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeParallelDatumsTask.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeParallelDatumsTask proto.InternalMessageInfo

func (m *ComputeParallelDatumsTask) GetJob() *pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *ComputeParallelDatumsTask) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *ComputeParallelDatumsTask) GetBaseFileSetId() string {
	if m != nil {
		return m.BaseFileSetId
	}
	return ""
}

type ComputeParallelDatumsTaskResult struct {
	FileSetId            string   `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeParallelDatumsTaskResult) Reset()         { *m = ComputeParallelDatumsTaskResult{} }
func (m *ComputeParallelDatumsTaskResult) String() string { return proto.CompactTextString(m) }
func (*ComputeParallelDatumsTaskResult) ProtoMessage()    {}
func (*ComputeParallelDatumsTaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{2}
}
func (m *ComputeParallelDatumsTaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeParallelDatumsTaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeParallelDatumsTaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeParallelDatumsTaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeParallelDatumsTaskResult.Merge(m, src)
}
func (m *ComputeParallelDatumsTaskResult) XXX_Size() int {
	return m.Size()
}
func (m *ComputeParallelDatumsTaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeParallelDatumsTaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeParallelDatumsTaskResult proto.InternalMessageInfo

func (m *ComputeParallelDatumsTaskResult) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

type ComputeSerialDatumsTask struct {
	Job                  *pps.Job    `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	FileSetId            string      `protobuf:"bytes,2,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	BaseMetaCommit       *pfs.Commit `protobuf:"bytes,3,opt,name=base_meta_commit,json=baseMetaCommit,proto3" json:"base_meta_commit,omitempty"`
	NoSkip               bool        `protobuf:"varint,4,opt,name=no_skip,json=noSkip,proto3" json:"no_skip,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ComputeSerialDatumsTask) Reset()         { *m = ComputeSerialDatumsTask{} }
func (m *ComputeSerialDatumsTask) String() string { return proto.CompactTextString(m) }
func (*ComputeSerialDatumsTask) ProtoMessage()    {}
func (*ComputeSerialDatumsTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{3}
}
func (m *ComputeSerialDatumsTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeSerialDatumsTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeSerialDatumsTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeSerialDatumsTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeSerialDatumsTask.Merge(m, src)
}
func (m *ComputeSerialDatumsTask) XXX_Size() int {
	return m.Size()
}
func (m *ComputeSerialDatumsTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeSerialDatumsTask.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeSerialDatumsTask proto.InternalMessageInfo

func (m *ComputeSerialDatumsTask) GetJob() *pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *ComputeSerialDatumsTask) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *ComputeSerialDatumsTask) GetBaseMetaCommit() *pfs.Commit {
	if m != nil {
		return m.BaseMetaCommit
	}
	return nil
}

func (m *ComputeSerialDatumsTask) GetNoSkip() bool {
	if m != nil {
		return m.NoSkip
	}
	return false
}

type ComputeSerialDatumsTaskResult struct {
	FileSetId            string   `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	DeleteFileSetId      string   `protobuf:"bytes,2,opt,name=delete_file_set_id,json=deleteFileSetId,proto3" json:"delete_file_set_id,omitempty"`
	Skipped              int64    `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ComputeSerialDatumsTaskResult) Reset()         { *m = ComputeSerialDatumsTaskResult{} }
func (m *ComputeSerialDatumsTaskResult) String() string { return proto.CompactTextString(m) }
func (*ComputeSerialDatumsTaskResult) ProtoMessage()    {}
func (*ComputeSerialDatumsTaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{4}
}
func (m *ComputeSerialDatumsTaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeSerialDatumsTaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComputeSerialDatumsTaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComputeSerialDatumsTaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeSerialDatumsTaskResult.Merge(m, src)
}
func (m *ComputeSerialDatumsTaskResult) XXX_Size() int {
	return m.Size()
}
func (m *ComputeSerialDatumsTaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeSerialDatumsTaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeSerialDatumsTaskResult proto.InternalMessageInfo

func (m *ComputeSerialDatumsTaskResult) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *ComputeSerialDatumsTaskResult) GetDeleteFileSetId() string {
	if m != nil {
		return m.DeleteFileSetId
	}
	return ""
}

func (m *ComputeSerialDatumsTaskResult) GetSkipped() int64 {
	if m != nil {
		return m.Skipped
	}
	return 0
}

type CreateDatumSetsTask struct {
	Job                  *pps.Job    `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	OutputCommit         *pfs.Commit `protobuf:"bytes,2,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	FileSetId            string      `protobuf:"bytes,3,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateDatumSetsTask) Reset()         { *m = CreateDatumSetsTask{} }
func (m *CreateDatumSetsTask) String() string { return proto.CompactTextString(m) }
func (*CreateDatumSetsTask) ProtoMessage()    {}
func (*CreateDatumSetsTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{5}
}
func (m *CreateDatumSetsTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDatumSetsTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDatumSetsTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDatumSetsTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatumSetsTask.Merge(m, src)
}
func (m *CreateDatumSetsTask) XXX_Size() int {
	return m.Size()
}
func (m *CreateDatumSetsTask) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatumSetsTask.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatumSetsTask proto.InternalMessageInfo

func (m *CreateDatumSetsTask) GetJob() *pps.Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (m *CreateDatumSetsTask) GetOutputCommit() *pfs.Commit {
	if m != nil {
		return m.OutputCommit
	}
	return nil
}

func (m *CreateDatumSetsTask) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

type CreateDatumSetsTaskResult struct {
	FileSetId            string   `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	InputFileSetsId      string   `protobuf:"bytes,2,opt,name=input_file_sets_id,json=inputFileSetsId,proto3" json:"input_file_sets_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDatumSetsTaskResult) Reset()         { *m = CreateDatumSetsTaskResult{} }
func (m *CreateDatumSetsTaskResult) String() string { return proto.CompactTextString(m) }
func (*CreateDatumSetsTaskResult) ProtoMessage()    {}
func (*CreateDatumSetsTaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_21583a759eb7fa97, []int{6}
}
func (m *CreateDatumSetsTaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDatumSetsTaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDatumSetsTaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDatumSetsTaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatumSetsTaskResult.Merge(m, src)
}
func (m *CreateDatumSetsTaskResult) XXX_Size() int {
	return m.Size()
}
func (m *CreateDatumSetsTaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatumSetsTaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatumSetsTaskResult proto.InternalMessageInfo

func (m *CreateDatumSetsTaskResult) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *CreateDatumSetsTaskResult) GetInputFileSetsId() string {
	if m != nil {
		return m.InputFileSetsId
	}
	return ""
}

func init() {
	proto.RegisterType((*DatumSet)(nil), "pachyderm.worker.pipeline.transform.DatumSet")
	proto.RegisterType((*ComputeParallelDatumsTask)(nil), "pachyderm.worker.pipeline.transform.ComputeParallelDatumsTask")
	proto.RegisterType((*ComputeParallelDatumsTaskResult)(nil), "pachyderm.worker.pipeline.transform.ComputeParallelDatumsTaskResult")
	proto.RegisterType((*ComputeSerialDatumsTask)(nil), "pachyderm.worker.pipeline.transform.ComputeSerialDatumsTask")
	proto.RegisterType((*ComputeSerialDatumsTaskResult)(nil), "pachyderm.worker.pipeline.transform.ComputeSerialDatumsTaskResult")
	proto.RegisterType((*CreateDatumSetsTask)(nil), "pachyderm.worker.pipeline.transform.CreateDatumSetsTask")
	proto.RegisterType((*CreateDatumSetsTaskResult)(nil), "pachyderm.worker.pipeline.transform.CreateDatumSetsTaskResult")
}

func init() {
	proto.RegisterFile("server/worker/pipeline/transform/transform.proto", fileDescriptor_21583a759eb7fa97)
}

var fileDescriptor_21583a759eb7fa97 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0x66, 0xe3, 0x9f, 0x9d, 0x78, 0x1d, 0x27, 0x41, 0xbf, 0x42, 0x9c, 0x40, 0x6c, 0xa3, 0x1e,
	0x12, 0x28, 0x48, 0xc5, 0xb9, 0xf4, 0xda, 0x38, 0x04, 0x1c, 0x28, 0x14, 0x39, 0xa7, 0x5e, 0xcc,
	0xca, 0x1a, 0xdb, 0x6b, 0x4b, 0xda, 0x65, 0x77, 0xe5, 0xd2, 0x73, 0xa1, 0xd0, 0x67, 0xe9, 0x8b,
	0xf4, 0xd8, 0x27, 0x28, 0xc5, 0xaf, 0xd1, 0x4b, 0xd9, 0x5d, 0x59, 0xfe, 0xd3, 0xa6, 0xf1, 0xa1,
	0x17, 0xb1, 0x33, 0xf3, 0xcd, 0xee, 0x37, 0xdf, 0x8c, 0x06, 0xbf, 0x94, 0x20, 0xe6, 0x20, 0xfc,
	0xf7, 0x4c, 0xcc, 0x40, 0xf8, 0x9c, 0x72, 0x88, 0x69, 0x0a, 0xbe, 0x12, 0x24, 0x95, 0x23, 0x26,
	0x92, 0xd5, 0xc9, 0xe3, 0x82, 0x29, 0xe6, 0x3c, 0xe7, 0x64, 0x38, 0xf9, 0x10, 0x81, 0x48, 0x3c,
	0x9b, 0xe4, 0x2d, 0x93, 0xbc, 0x02, 0x7a, 0xfe, 0x6c, 0xcc, 0xc6, 0xcc, 0xe0, 0x7d, 0x7d, 0xb2,
	0xa9, 0xe7, 0x75, 0x3e, 0x92, 0x3e, 0x1f, 0xc9, 0xc2, 0xe4, 0xd2, 0xe7, 0x7c, 0x69, 0xb6, 0x36,
	0xa9, 0x44, 0x44, 0x65, 0x89, 0xfd, 0x5a, 0x80, 0xfb, 0x13, 0xe1, 0x83, 0x5b, 0x6d, 0xf7, 0x41,
	0x39, 0x6d, 0x5c, 0x99, 0xb2, 0x70, 0x40, 0xa3, 0x06, 0x6a, 0xa3, 0xab, 0xea, 0x4d, 0x75, 0xf1,
	0xbd, 0x55, 0xbe, 0x67, 0x61, 0xef, 0x36, 0x28, 0x4f, 0x59, 0xd8, 0x8b, 0x9c, 0x26, 0xae, 0x8d,
	0x68, 0x0c, 0x03, 0x09, 0x4a, 0xc3, 0xf6, 0x34, 0x2c, 0xa8, 0x6a, 0x57, 0x1f, 0x54, 0x2f, 0x72,
	0xae, 0x71, 0x9d, 0x65, 0x8a, 0x67, 0x6a, 0x30, 0x64, 0x49, 0x42, 0x55, 0xa3, 0xd4, 0x46, 0x57,
	0xb5, 0xce, 0x91, 0xc7, 0x47, 0x72, 0x30, 0xef, 0x78, 0x5d, 0xe3, 0x0d, 0x0e, 0x2d, 0xc8, 0x5a,
	0xce, 0x0b, 0xec, 0xe4, 0x49, 0xeb, 0x77, 0xff, 0x67, 0xee, 0x3e, 0xb6, 0x91, 0xbb, 0xe2, 0x85,
	0x4b, 0x7c, 0x92, 0x80, 0x22, 0x1b, 0xd0, 0xb2, 0x81, 0xd6, 0xb5, 0x7f, 0x05, 0x74, 0x71, 0x59,
	0x2a, 0xa2, 0x64, 0xa3, 0x62, 0x28, 0x1c, 0x7a, 0xb6, 0xec, 0xbe, 0xf6, 0x05, 0x36, 0xe4, 0x7e,
	0x44, 0xf8, 0xac, 0xcb, 0x12, 0x9e, 0x29, 0x78, 0x4b, 0x04, 0x89, 0x63, 0x88, 0x8d, 0x18, 0xf2,
	0x81, 0xc8, 0x99, 0x73, 0x81, 0x4b, 0x53, 0x16, 0x1a, 0x2d, 0x6a, 0x9d, 0x9a, 0xc7, 0xb9, 0x29,
	0xe1, 0x9e, 0x85, 0x81, 0xf6, 0x3f, 0xa9, 0xc5, 0x25, 0x3e, 0x09, 0x89, 0x84, 0x0d, 0xa6, 0x25,
	0xcb, 0x54, 0xfb, 0x0b, 0xa6, 0xee, 0x6b, 0xdc, 0x7a, 0x94, 0x44, 0x00, 0x32, 0x8b, 0xd5, 0xf6,
	0x5b, 0x68, 0xeb, 0x2d, 0xf7, 0x0b, 0xc2, 0xa7, 0xf9, 0x1d, 0x7d, 0x10, 0x94, 0xfc, 0xc3, 0x32,
	0x5e, 0xe5, 0x65, 0x18, 0xd5, 0xff, 0xda, 0xd5, 0x23, 0x8d, 0x7b, 0x03, 0x8a, 0xe4, 0x7d, 0x3d,
	0xc5, 0xfb, 0x29, 0x1b, 0xc8, 0x19, 0xe5, 0xa6, 0x99, 0x07, 0x41, 0x25, 0x65, 0xfd, 0x19, 0xe5,
	0xee, 0x27, 0x84, 0x2f, 0x1e, 0x61, 0xbb, 0x5b, 0xbd, 0x7a, 0x64, 0x22, 0x88, 0x41, 0x6d, 0xaa,
	0x6b, 0xb9, 0x1f, 0xdb, 0xc8, 0x6a, 0x12, 0x1a, 0x78, 0x5f, 0x93, 0xe0, 0x60, 0xf5, 0x2f, 0x05,
	0x4b, 0xd3, 0xfd, 0x8c, 0xf0, 0xff, 0x5d, 0x01, 0x44, 0xc1, 0xf2, 0x1f, 0xd8, 0x49, 0xb2, 0xdf,
	0xa6, 0x7c, 0x6f, 0x87, 0x29, 0xdf, 0x2a, 0xa9, 0xb4, 0xdd, 0xc2, 0x09, 0x3e, 0xfb, 0x03, 0x95,
	0xdd, 0xf5, 0xa0, 0xe9, 0xfa, 0x1f, 0x24, 0xd7, 0xf4, 0x30, 0x91, 0x5c, 0x0e, 0xd9, 0x8b, 0x6e,
	0x1e, 0xbe, 0x2e, 0x9a, 0xe8, 0xdb, 0xa2, 0x89, 0x7e, 0x2c, 0x9a, 0xe8, 0xdd, 0xdd, 0x98, 0xaa,
	0x49, 0x16, 0x7a, 0x43, 0x96, 0xf8, 0xc5, 0x1a, 0x5a, 0x3b, 0xcd, 0x3b, 0xbe, 0x14, 0x43, 0xff,
	0xa9, 0x9d, 0x16, 0x56, 0xcc, 0x42, 0xb9, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xff, 0x36,
	0x6a, 0xfe, 0x04, 0x00, 0x00,
}

func (m *DatumSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatumSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatumSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.MetaFileSetId) > 0 {
		i -= len(m.MetaFileSetId)
		copy(dAtA[i:], m.MetaFileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.MetaFileSetId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OutputFileSetId) > 0 {
		i -= len(m.OutputFileSetId)
		copy(dAtA[i:], m.OutputFileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.OutputFileSetId)))
		i--
		dAtA[i] = 0x22
	}
	if m.OutputCommit != nil {
		{
			size, err := m.OutputCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.JobID) > 0 {
		i -= len(m.JobID)
		copy(dAtA[i:], m.JobID)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.JobID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComputeParallelDatumsTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeParallelDatumsTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeParallelDatumsTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BaseFileSetId) > 0 {
		i -= len(m.BaseFileSetId)
		copy(dAtA[i:], m.BaseFileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.BaseFileSetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComputeParallelDatumsTaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeParallelDatumsTaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeParallelDatumsTaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComputeSerialDatumsTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeSerialDatumsTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeSerialDatumsTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NoSkip {
		i--
		if m.NoSkip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BaseMetaCommit != nil {
		{
			size, err := m.BaseMetaCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ComputeSerialDatumsTaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeSerialDatumsTaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeSerialDatumsTaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Skipped != 0 {
		i = encodeVarintTransform(dAtA, i, uint64(m.Skipped))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeleteFileSetId) > 0 {
		i -= len(m.DeleteFileSetId)
		copy(dAtA[i:], m.DeleteFileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.DeleteFileSetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDatumSetsTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDatumSetsTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDatumSetsTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OutputCommit != nil {
		{
			size, err := m.OutputCommit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Job != nil {
		{
			size, err := m.Job.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTransform(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDatumSetsTaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDatumSetsTaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDatumSetsTaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.InputFileSetsId) > 0 {
		i -= len(m.InputFileSetsId)
		copy(dAtA[i:], m.InputFileSetsId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.InputFileSetsId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintTransform(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransform(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransform(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DatumSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobID)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.OutputCommit != nil {
		l = m.OutputCommit.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.OutputFileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.MetaFileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeParallelDatumsTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.BaseFileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeParallelDatumsTaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeSerialDatumsTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.BaseMetaCommit != nil {
		l = m.BaseMetaCommit.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.NoSkip {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ComputeSerialDatumsTaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.DeleteFileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.Skipped != 0 {
		n += 1 + sovTransform(uint64(m.Skipped))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDatumSetsTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Job != nil {
		l = m.Job.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.OutputCommit != nil {
		l = m.OutputCommit.Size()
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDatumSetsTaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	l = len(m.InputFileSetsId)
	if l > 0 {
		n += 1 + l + sovTransform(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransform(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransform(x uint64) (n int) {
	return sovTransform(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DatumSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatumSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatumSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputCommit == nil {
				m.OutputCommit = &pfs.Commit{}
			}
			if err := m.OutputCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputFileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputFileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaFileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetaFileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &datum.Stats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeParallelDatumsTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeParallelDatumsTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeParallelDatumsTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &pps.Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeParallelDatumsTaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeParallelDatumsTaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeParallelDatumsTaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeSerialDatumsTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeSerialDatumsTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeSerialDatumsTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &pps.Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseMetaCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseMetaCommit == nil {
				m.BaseMetaCommit = &pfs.Commit{}
			}
			if err := m.BaseMetaCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSkip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoSkip = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeSerialDatumsTaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeSerialDatumsTaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeSerialDatumsTaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteFileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteFileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skipped", wireType)
			}
			m.Skipped = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skipped |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDatumSetsTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDatumSetsTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDatumSetsTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Job == nil {
				m.Job = &pps.Job{}
			}
			if err := m.Job.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCommit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutputCommit == nil {
				m.OutputCommit = &pfs.Commit{}
			}
			if err := m.OutputCommit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDatumSetsTaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDatumSetsTaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDatumSetsTaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputFileSetsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransform
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransform
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputFileSetsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransform(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransform
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransform(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransform
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransform
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransform
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransform
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransform
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransform        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransform          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransform = fmt.Errorf("proto: unexpected end of group")
)

syntax = "proto3";

package metadata;
option go_package = "github.com/pachyderm/pachyderm/v2/src/metadata";

import "pfs/pfs.proto";

import "protoextensions/validate.proto";

// Edit represents editing one piece of metadata.
message Edit {
  // target is the object whose metadata will be edited.
  oneof target {
    option (validate.required) = true;
    // project targets a named project's metadata.
    pfs_v2.ProjectPicker project = 1 [(validate.rules).message.required = true];
    pfs_v2.CommitPicker commit = 2 [(validate.rules).message.required = true];
    pfs_v2.BranchPicker branch = 3 [(validate.rules).message.required = true];
  }

  // Replace is an operation that replaces metadata.
  message Replace {
    // replacement is the map to replace the object's metadata with.
    map <string, string> replacement = 1 [(validate.rules).map.keys.string.min_len = 1];
  }

  // AddKey is an operation that adds a new metadata key.
  message AddKey {
    // key is the metadata key to add.  It may not be the empty string.
    string key = 1 [(validate.rules).string.min_len = 1];
    // value is the value to assign to the metadata key.
    string value = 2;
  }

  // EditKey is an operation that changes or adds a metadata key.
  message EditKey {
    // key is the metadata key to change or add.  It may not be the empty string.
    string key = 1 [(validate.rules).string.min_len = 1];
    // value is the value to assign to the metadata key.
    string value = 2;
  }

  // DeleteKey is an operation that removes a metadata key.
  message DeleteKey {
    // key is the metadata key to remove.  It may not be the empty string.
    string key = 1 [(validate.rules).string.min_len = 1];
  }

  // op is the operation to perform on the target object's metadata.
  oneof op {
    option (validate.required) = true;
    // replace replaces a target's metadata with a new metadata mapping.
    Replace replace = 10 [(validate.rules).message.required = true];
    // add_key adds a new key to the target object's metadata.
    AddKey add_key = 11 [(validate.rules).message.required = true];
    // edit_key adds or changes a key in the target object's metadata.
    EditKey edit_key = 12 [(validate.rules).message.required = true];
    // delete_key removes a key from the target object's metadata.
    DeleteKey delete_key = 13 [(validate.rules).message.required = true];
  }
}

// EditMetadataRequest is a sequence of edits to apply to metadata.
message EditMetadataRequest {
  // edits is the ordered list of metadata edits to perform.
  repeated Edit edits = 1 [(validate.rules).repeated.items.message.required = true];
}

// EditMetadataResponse is the result of editing metadata.
message EditMetadataResponse {}

// API is the public API of the metadata service.
service API {
  // EditMetadata edits metadata according to the request.  All edits are applied atomically at
  // once.  All edits are attempted, but any failing edit fails the entire request.
  rpc EditMetadata(EditMetadataRequest) returns (EditMetadataResponse) {}
}

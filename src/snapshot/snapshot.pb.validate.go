// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: snapshot/snapshot.proto

package snapshot

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSnapshotRequestMultiError, or nil if none found.
func (m *CreateSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetMetadata()))
		i := 0
		for key := range m.GetMetadata() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMetadata()[key]
			_ = val

			if utf8.RuneCountInString(key) < 1 {
				err := CreateSnapshotRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			// no validation rules for Metadata[key]
		}
	}

	if len(errors) > 0 {
		return CreateSnapshotRequestMultiError(errors)
	}

	return nil
}

// CreateSnapshotRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSnapshotRequestMultiError) AllErrors() []error { return m }

// CreateSnapshotRequestValidationError is the validation error returned by
// CreateSnapshotRequest.Validate if the designated constraints aren't met.
type CreateSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSnapshotRequestValidationError) ErrorName() string {
	return "CreateSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSnapshotRequestValidationError{}

// Validate checks the field values on CreateSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSnapshotResponseMultiError, or nil if none found.
func (m *CreateSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := CreateSnapshotResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateSnapshotResponseMultiError(errors)
	}

	return nil
}

// CreateSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSnapshotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSnapshotResponseMultiError) AllErrors() []error { return m }

// CreateSnapshotResponseValidationError is the validation error returned by
// CreateSnapshotResponse.Validate if the designated constraints aren't met.
type CreateSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSnapshotResponseValidationError) ErrorName() string {
	return "CreateSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSnapshotResponseValidationError{}

// Validate checks the field values on DeleteSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSnapshotRequestMultiError, or nil if none found.
func (m *DeleteSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteSnapshotRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSnapshotRequestMultiError(errors)
	}

	return nil
}

// DeleteSnapshotRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSnapshotRequestMultiError) AllErrors() []error { return m }

// DeleteSnapshotRequestValidationError is the validation error returned by
// DeleteSnapshotRequest.Validate if the designated constraints aren't met.
type DeleteSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSnapshotRequestValidationError) ErrorName() string {
	return "DeleteSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSnapshotRequestValidationError{}

// Validate checks the field values on DeleteSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSnapshotResponseMultiError, or nil if none found.
func (m *DeleteSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSnapshotResponseMultiError(errors)
	}

	return nil
}

// DeleteSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSnapshotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSnapshotResponseMultiError) AllErrors() []error { return m }

// DeleteSnapshotResponseValidationError is the validation error returned by
// DeleteSnapshotResponse.Validate if the designated constraints aren't met.
type DeleteSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSnapshotResponseValidationError) ErrorName() string {
	return "DeleteSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSnapshotResponseValidationError{}

// Validate checks the field values on SnapshotInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SnapshotInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SnapshotInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SnapshotInfoMultiError, or
// nil if none found.
func (m *SnapshotInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SnapshotInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Metadata

	// no validation rules for ChunksetId

	// no validation rules for PachydermVersion

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SnapshotInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SnapshotInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SnapshotInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SnapshotInfoMultiError(errors)
	}

	return nil
}

// SnapshotInfoMultiError is an error wrapping multiple validation errors
// returned by SnapshotInfo.ValidateAll() if the designated constraints aren't met.
type SnapshotInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnapshotInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnapshotInfoMultiError) AllErrors() []error { return m }

// SnapshotInfoValidationError is the validation error returned by
// SnapshotInfo.Validate if the designated constraints aren't met.
type SnapshotInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnapshotInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnapshotInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnapshotInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnapshotInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnapshotInfoValidationError) ErrorName() string { return "SnapshotInfoValidationError" }

// Error satisfies the builtin error interface
func (e SnapshotInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnapshotInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnapshotInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnapshotInfoValidationError{}

// Validate checks the field values on InspectSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectSnapshotRequestMultiError, or nil if none found.
func (m *InspectSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := InspectSnapshotRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InspectSnapshotRequestMultiError(errors)
	}

	return nil
}

// InspectSnapshotRequestMultiError is an error wrapping multiple validation
// errors returned by InspectSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type InspectSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectSnapshotRequestMultiError) AllErrors() []error { return m }

// InspectSnapshotRequestValidationError is the validation error returned by
// InspectSnapshotRequest.Validate if the designated constraints aren't met.
type InspectSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectSnapshotRequestValidationError) ErrorName() string {
	return "InspectSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InspectSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectSnapshotRequestValidationError{}

// Validate checks the field values on InspectSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectSnapshotResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectSnapshotResponseMultiError, or nil if none found.
func (m *InspectSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InspectSnapshotResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InspectSnapshotResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InspectSnapshotResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InspectSnapshotResponseMultiError(errors)
	}

	return nil
}

// InspectSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by InspectSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type InspectSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectSnapshotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectSnapshotResponseMultiError) AllErrors() []error { return m }

// InspectSnapshotResponseValidationError is the validation error returned by
// InspectSnapshotResponse.Validate if the designated constraints aren't met.
type InspectSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectSnapshotResponseValidationError) ErrorName() string {
	return "InspectSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InspectSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectSnapshotResponseValidationError{}

// Validate checks the field values on ListSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSnapshotRequestMultiError, or nil if none found.
func (m *ListSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSince()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSnapshotRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSnapshotRequestValidationError{
					field:  "Since",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSince()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSnapshotRequestValidationError{
				field:  "Since",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListSnapshotRequestMultiError(errors)
	}

	return nil
}

// ListSnapshotRequestMultiError is an error wrapping multiple validation
// errors returned by ListSnapshotRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSnapshotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSnapshotRequestMultiError) AllErrors() []error { return m }

// ListSnapshotRequestValidationError is the validation error returned by
// ListSnapshotRequest.Validate if the designated constraints aren't met.
type ListSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSnapshotRequestValidationError) ErrorName() string {
	return "ListSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSnapshotRequestValidationError{}

// Validate checks the field values on ListSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSnapshotResponseMultiError, or nil if none found.
func (m *ListSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSnapshotResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSnapshotResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSnapshotResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSnapshotResponseMultiError(errors)
	}

	return nil
}

// ListSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by ListSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSnapshotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSnapshotResponseMultiError) AllErrors() []error { return m }

// ListSnapshotResponseValidationError is the validation error returned by
// ListSnapshotResponse.Validate if the designated constraints aren't met.
type ListSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSnapshotResponseValidationError) ErrorName() string {
	return "ListSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSnapshotResponseValidationError{}

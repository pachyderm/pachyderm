// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: snapshot/snapshot.proto

package snapshot

import (
	fmt "fmt"
	protoextensions "github.com/pachyderm/pachyderm/v2/src/protoextensions"
	zapcore "go.uber.org/zap/zapcore"
)

func (x *CreateSnapshotRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddObject("metadata", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range x.Metadata {
			enc.AddString(fmt.Sprintf("%v", k), v)
		}
		return nil
	}))
	return nil
}

func (x *CreateSnapshotResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("id", x.Id)
	return nil
}

func (x *DeleteSnapshotRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("id", x.Id)
	return nil
}

func (x *DeleteSnapshotResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *SnapshotInfo) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("id", x.Id)
	enc.AddObject("metadata", zapcore.ObjectMarshalerFunc(func(enc zapcore.ObjectEncoder) error {
		for k, v := range x.Metadata {
			enc.AddString(fmt.Sprintf("%v", k), v)
		}
		return nil
	}))
	enc.AddInt64("chunkset_id", x.ChunksetId)
	enc.AddString("pachyderm_version", x.PachydermVersion)
	protoextensions.AddTimestamp(enc, "created_at", x.CreatedAt)
	return nil
}

func (x *InspectSnapshotRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("id", x.Id)
	return nil
}

func (x *InspectSnapshotResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Info).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("info", obj)
	} else {
		enc.AddReflected("info", x.Info)
	}
	return nil
}

func (x *ListSnapshotRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	protoextensions.AddTimestamp(enc, "since", x.Since)
	enc.AddInt32("limit", x.Limit)
	return nil
}

func (x *ListSnapshotResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Info).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("info", obj)
	} else {
		enc.AddReflected("info", x.Info)
	}
	return nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: debug/debug.proto

package debug

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProfileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileRequestMultiError,
// or nil if none found.
func (m *ProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileRequestValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileRequestMultiError(errors)
	}

	return nil
}

// ProfileRequestMultiError is an error wrapping multiple validation errors
// returned by ProfileRequest.ValidateAll() if the designated constraints
// aren't met.
type ProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileRequestMultiError) AllErrors() []error { return m }

// ProfileRequestValidationError is the validation error returned by
// ProfileRequest.Validate if the designated constraints aren't met.
type ProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileRequestValidationError) ErrorName() string { return "ProfileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileRequestValidationError{}

// Validate checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Profile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Profile with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProfileMultiError, or nil if none found.
func (m *Profile) ValidateAll() error {
	return m.validate(true)
}

func (m *Profile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileMultiError(errors)
	}

	return nil
}

// ProfileMultiError is an error wrapping multiple validation errors returned
// by Profile.ValidateAll() if the designated constraints aren't met.
type ProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileMultiError) AllErrors() []error { return m }

// ProfileValidationError is the validation error returned by Profile.Validate
// if the designated constraints aren't met.
type ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileValidationError) ErrorName() string { return "ProfileValidationError" }

// Error satisfies the builtin error interface
func (e ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Filter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FilterMultiError, or nil if none found.
func (m *Filter) ValidateAll() error {
	return m.validate(true)
}

func (m *Filter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Filter.(type) {
	case *Filter_Pachd:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Pachd
	case *Filter_Pipeline:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPipeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Pipeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Pipeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Worker:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetWorker()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Worker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FilterValidationError{
						field:  "Worker",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWorker()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FilterValidationError{
					field:  "Worker",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Filter_Database:
		if v == nil {
			err := FilterValidationError{
				field:  "Filter",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Database
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FilterMultiError(errors)
	}

	return nil
}

// FilterMultiError is an error wrapping multiple validation errors returned by
// Filter.ValidateAll() if the designated constraints aren't met.
type FilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FilterMultiError) AllErrors() []error { return m }

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Worker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Worker with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WorkerMultiError, or nil if none found.
func (m *Worker) ValidateAll() error {
	return m.validate(true)
}

func (m *Worker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pod

	// no validation rules for Redirected

	if len(errors) > 0 {
		return WorkerMultiError(errors)
	}

	return nil
}

// WorkerMultiError is an error wrapping multiple validation errors returned by
// Worker.ValidateAll() if the designated constraints aren't met.
type WorkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkerMultiError) AllErrors() []error { return m }

// WorkerValidationError is the validation error returned by Worker.Validate if
// the designated constraints aren't met.
type WorkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkerValidationError) ErrorName() string { return "WorkerValidationError" }

// Error satisfies the builtin error interface
func (e WorkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkerValidationError{}

// Validate checks the field values on BinaryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BinaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BinaryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BinaryRequestMultiError, or
// nil if none found.
func (m *BinaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BinaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BinaryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BinaryRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BinaryRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BinaryRequestMultiError(errors)
	}

	return nil
}

// BinaryRequestMultiError is an error wrapping multiple validation errors
// returned by BinaryRequest.ValidateAll() if the designated constraints
// aren't met.
type BinaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BinaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BinaryRequestMultiError) AllErrors() []error { return m }

// BinaryRequestValidationError is the validation error returned by
// BinaryRequest.Validate if the designated constraints aren't met.
type BinaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BinaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BinaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BinaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BinaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BinaryRequestValidationError) ErrorName() string { return "BinaryRequestValidationError" }

// Error satisfies the builtin error interface
func (e BinaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBinaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BinaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BinaryRequestValidationError{}

// Validate checks the field values on DumpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpRequestMultiError, or
// nil if none found.
func (m *DumpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return DumpRequestMultiError(errors)
	}

	return nil
}

// DumpRequestMultiError is an error wrapping multiple validation errors
// returned by DumpRequest.ValidateAll() if the designated constraints aren't met.
type DumpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpRequestMultiError) AllErrors() []error { return m }

// DumpRequestValidationError is the validation error returned by
// DumpRequest.Validate if the designated constraints aren't met.
type DumpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpRequestValidationError) ErrorName() string { return "DumpRequestValidationError" }

// Error satisfies the builtin error interface
func (e DumpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpRequestValidationError{}

// Validate checks the field values on SetLogLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetLogLevelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLogLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLogLevelRequestMultiError, or nil if none found.
func (m *SetLogLevelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLogLevelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetLogLevelRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetLogLevelRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetLogLevelRequestValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Recurse

	switch v := m.Level.(type) {
	case *SetLogLevelRequest_Pachyderm:
		if v == nil {
			err := SetLogLevelRequestValidationError{
				field:  "Level",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Pachyderm
	case *SetLogLevelRequest_Grpc:
		if v == nil {
			err := SetLogLevelRequestValidationError{
				field:  "Level",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Grpc
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SetLogLevelRequestMultiError(errors)
	}

	return nil
}

// SetLogLevelRequestMultiError is an error wrapping multiple validation errors
// returned by SetLogLevelRequest.ValidateAll() if the designated constraints
// aren't met.
type SetLogLevelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLogLevelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLogLevelRequestMultiError) AllErrors() []error { return m }

// SetLogLevelRequestValidationError is the validation error returned by
// SetLogLevelRequest.Validate if the designated constraints aren't met.
type SetLogLevelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLogLevelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLogLevelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLogLevelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLogLevelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLogLevelRequestValidationError) ErrorName() string {
	return "SetLogLevelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetLogLevelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLogLevelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLogLevelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLogLevelRequestValidationError{}

// Validate checks the field values on SetLogLevelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetLogLevelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetLogLevelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetLogLevelResponseMultiError, or nil if none found.
func (m *SetLogLevelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetLogLevelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetLogLevelResponseMultiError(errors)
	}

	return nil
}

// SetLogLevelResponseMultiError is an error wrapping multiple validation
// errors returned by SetLogLevelResponse.ValidateAll() if the designated
// constraints aren't met.
type SetLogLevelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetLogLevelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetLogLevelResponseMultiError) AllErrors() []error { return m }

// SetLogLevelResponseValidationError is the validation error returned by
// SetLogLevelResponse.Validate if the designated constraints aren't met.
type SetLogLevelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetLogLevelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetLogLevelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetLogLevelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetLogLevelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetLogLevelResponseValidationError) ErrorName() string {
	return "SetLogLevelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetLogLevelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetLogLevelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetLogLevelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetLogLevelResponseValidationError{}

// Validate checks the field values on GetDumpV2TemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDumpV2TemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDumpV2TemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDumpV2TemplateRequestMultiError, or nil if none found.
func (m *GetDumpV2TemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDumpV2TemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDumpV2TemplateRequestMultiError(errors)
	}

	return nil
}

// GetDumpV2TemplateRequestMultiError is an error wrapping multiple validation
// errors returned by GetDumpV2TemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDumpV2TemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDumpV2TemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDumpV2TemplateRequestMultiError) AllErrors() []error { return m }

// GetDumpV2TemplateRequestValidationError is the validation error returned by
// GetDumpV2TemplateRequest.Validate if the designated constraints aren't met.
type GetDumpV2TemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDumpV2TemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDumpV2TemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDumpV2TemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDumpV2TemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDumpV2TemplateRequestValidationError) ErrorName() string {
	return "GetDumpV2TemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDumpV2TemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDumpV2TemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDumpV2TemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDumpV2TemplateRequestValidationError{}

// Validate checks the field values on GetDumpV2TemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDumpV2TemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDumpV2TemplateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDumpV2TemplateResponseMultiError, or nil if none found.
func (m *GetDumpV2TemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDumpV2TemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDumpV2TemplateResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDumpV2TemplateResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDumpV2TemplateResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDumpV2TemplateResponseMultiError(errors)
	}

	return nil
}

// GetDumpV2TemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetDumpV2TemplateResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDumpV2TemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDumpV2TemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDumpV2TemplateResponseMultiError) AllErrors() []error { return m }

// GetDumpV2TemplateResponseValidationError is the validation error returned by
// GetDumpV2TemplateResponse.Validate if the designated constraints aren't met.
type GetDumpV2TemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDumpV2TemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDumpV2TemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDumpV2TemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDumpV2TemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDumpV2TemplateResponseValidationError) ErrorName() string {
	return "GetDumpV2TemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDumpV2TemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDumpV2TemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDumpV2TemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDumpV2TemplateResponseValidationError{}

// Validate checks the field values on Pipeline with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pipeline with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineMultiError, or nil
// if none found.
func (m *Pipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *Pipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Name

	if len(errors) > 0 {
		return PipelineMultiError(errors)
	}

	return nil
}

// PipelineMultiError is an error wrapping multiple validation errors returned
// by Pipeline.ValidateAll() if the designated constraints aren't met.
type PipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineMultiError) AllErrors() []error { return m }

// PipelineValidationError is the validation error returned by
// Pipeline.Validate if the designated constraints aren't met.
type PipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineValidationError) ErrorName() string { return "PipelineValidationError" }

// Error satisfies the builtin error interface
func (e PipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineValidationError{}

// Validate checks the field values on Pod with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pod) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pod with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PodMultiError, or nil if none found.
func (m *Pod) ValidateAll() error {
	return m.validate(true)
}

func (m *Pod) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ip

	if len(errors) > 0 {
		return PodMultiError(errors)
	}

	return nil
}

// PodMultiError is an error wrapping multiple validation errors returned by
// Pod.ValidateAll() if the designated constraints aren't met.
type PodMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodMultiError) AllErrors() []error { return m }

// PodValidationError is the validation error returned by Pod.Validate if the
// designated constraints aren't met.
type PodValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodValidationError) ErrorName() string { return "PodValidationError" }

// Error satisfies the builtin error interface
func (e PodValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPod.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPods() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  fmt.Sprintf("Pods[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  fmt.Sprintf("Pods[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ExtraArgs.(type) {
	case *App_LokiArgs:
		if v == nil {
			err := AppValidationError{
				field:  "ExtraArgs",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLokiArgs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  "LokiArgs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  "LokiArgs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLokiArgs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  "LokiArgs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *App_ProfileArgs:
		if v == nil {
			err := AppValidationError{
				field:  "ExtraArgs",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProfileArgs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppValidationError{
						field:  "ProfileArgs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppValidationError{
						field:  "ProfileArgs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProfileArgs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppValidationError{
					field:  "ProfileArgs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on ProfileArgs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileArgs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileArgs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileArgsMultiError, or
// nil if none found.
func (m *ProfileArgs) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileArgs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileArgsValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileArgsValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileArgsValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileArgsMultiError(errors)
	}

	return nil
}

// ProfileArgsMultiError is an error wrapping multiple validation errors
// returned by ProfileArgs.ValidateAll() if the designated constraints aren't met.
type ProfileArgsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileArgsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileArgsMultiError) AllErrors() []error { return m }

// ProfileArgsValidationError is the validation error returned by
// ProfileArgs.Validate if the designated constraints aren't met.
type ProfileArgsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileArgsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileArgsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileArgsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileArgsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileArgsValidationError) ErrorName() string { return "ProfileArgsValidationError" }

// Error satisfies the builtin error interface
func (e ProfileArgsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileArgs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileArgsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileArgsValidationError{}

// Validate checks the field values on LokiArgs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LokiArgs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LokiArgs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LokiArgsMultiError, or nil
// if none found.
func (m *LokiArgs) ValidateAll() error {
	return m.validate(true)
}

func (m *LokiArgs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxLogs

	if len(errors) > 0 {
		return LokiArgsMultiError(errors)
	}

	return nil
}

// LokiArgsMultiError is an error wrapping multiple validation errors returned
// by LokiArgs.ValidateAll() if the designated constraints aren't met.
type LokiArgsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LokiArgsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LokiArgsMultiError) AllErrors() []error { return m }

// LokiArgsValidationError is the validation error returned by
// LokiArgs.Validate if the designated constraints aren't met.
type LokiArgsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LokiArgsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LokiArgsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LokiArgsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LokiArgsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LokiArgsValidationError) ErrorName() string { return "LokiArgsValidationError" }

// Error satisfies the builtin error interface
func (e LokiArgsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLokiArgs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LokiArgsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LokiArgsValidationError{}

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Helm

	// no validation rules for Database

	// no validation rules for Version

	for idx, item := range m.GetDescribes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Describes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Describes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  fmt.Sprintf("Describes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLokiLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("LokiLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("LokiLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  fmt.Sprintf("LokiLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBinaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Binaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Binaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  fmt.Sprintf("Binaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  fmt.Sprintf("Profiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  fmt.Sprintf("Profiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on StarlarkLiteral with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StarlarkLiteral) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StarlarkLiteral with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StarlarkLiteralMultiError, or nil if none found.
func (m *StarlarkLiteral) ValidateAll() error {
	return m.validate(true)
}

func (m *StarlarkLiteral) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ProgramText

	if len(errors) > 0 {
		return StarlarkLiteralMultiError(errors)
	}

	return nil
}

// StarlarkLiteralMultiError is an error wrapping multiple validation errors
// returned by StarlarkLiteral.ValidateAll() if the designated constraints
// aren't met.
type StarlarkLiteralMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarlarkLiteralMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarlarkLiteralMultiError) AllErrors() []error { return m }

// StarlarkLiteralValidationError is the validation error returned by
// StarlarkLiteral.Validate if the designated constraints aren't met.
type StarlarkLiteralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarlarkLiteralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarlarkLiteralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarlarkLiteralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarlarkLiteralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarlarkLiteralValidationError) ErrorName() string { return "StarlarkLiteralValidationError" }

// Error satisfies the builtin error interface
func (e StarlarkLiteralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarlarkLiteral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarlarkLiteralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarlarkLiteralValidationError{}

// Validate checks the field values on Starlark with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Starlark) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Starlark with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StarlarkMultiError, or nil
// if none found.
func (m *Starlark) ValidateAll() error {
	return m.validate(true)
}

func (m *Starlark) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StarlarkValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StarlarkValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StarlarkValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Source.(type) {
	case *Starlark_Builtin:
		if v == nil {
			err := StarlarkValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Builtin
	case *Starlark_Literal:
		if v == nil {
			err := StarlarkValidationError{
				field:  "Source",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLiteral()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StarlarkValidationError{
						field:  "Literal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StarlarkValidationError{
						field:  "Literal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLiteral()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StarlarkValidationError{
					field:  "Literal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return StarlarkMultiError(errors)
	}

	return nil
}

// StarlarkMultiError is an error wrapping multiple validation errors returned
// by Starlark.ValidateAll() if the designated constraints aren't met.
type StarlarkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StarlarkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StarlarkMultiError) AllErrors() []error { return m }

// StarlarkValidationError is the validation error returned by
// Starlark.Validate if the designated constraints aren't met.
type StarlarkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StarlarkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StarlarkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StarlarkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StarlarkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StarlarkValidationError) ErrorName() string { return "StarlarkValidationError" }

// Error satisfies the builtin error interface
func (e StarlarkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStarlark.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StarlarkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StarlarkValidationError{}

// Validate checks the field values on DumpV2Request with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpV2Request with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpV2RequestMultiError, or
// nil if none found.
func (m *DumpV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpV2RequestValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpV2RequestValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpV2RequestValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpV2RequestValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for InputRepos

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpV2RequestValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDefaults()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "Defaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DumpV2RequestValidationError{
					field:  "Defaults",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaults()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DumpV2RequestValidationError{
				field:  "Defaults",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStarlarkScripts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpV2RequestValidationError{
						field:  fmt.Sprintf("StarlarkScripts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpV2RequestValidationError{
						field:  fmt.Sprintf("StarlarkScripts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpV2RequestValidationError{
					field:  fmt.Sprintf("StarlarkScripts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DumpV2RequestMultiError(errors)
	}

	return nil
}

// DumpV2RequestMultiError is an error wrapping multiple validation errors
// returned by DumpV2Request.ValidateAll() if the designated constraints
// aren't met.
type DumpV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpV2RequestMultiError) AllErrors() []error { return m }

// DumpV2RequestValidationError is the validation error returned by
// DumpV2Request.Validate if the designated constraints aren't met.
type DumpV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpV2RequestValidationError) ErrorName() string { return "DumpV2RequestValidationError" }

// Error satisfies the builtin error interface
func (e DumpV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpV2RequestValidationError{}

// Validate checks the field values on DumpContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpContent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpContentMultiError, or
// nil if none found.
func (m *DumpContent) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return DumpContentMultiError(errors)
	}

	return nil
}

// DumpContentMultiError is an error wrapping multiple validation errors
// returned by DumpContent.ValidateAll() if the designated constraints aren't met.
type DumpContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpContentMultiError) AllErrors() []error { return m }

// DumpContentValidationError is the validation error returned by
// DumpContent.Validate if the designated constraints aren't met.
type DumpContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpContentValidationError) ErrorName() string { return "DumpContentValidationError" }

// Error satisfies the builtin error interface
func (e DumpContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpContentValidationError{}

// Validate checks the field values on DumpProgress with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpProgressMultiError, or
// nil if none found.
func (m *DumpProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for Total

	// no validation rules for Progress

	if len(errors) > 0 {
		return DumpProgressMultiError(errors)
	}

	return nil
}

// DumpProgressMultiError is an error wrapping multiple validation errors
// returned by DumpProgress.ValidateAll() if the designated constraints aren't met.
type DumpProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpProgressMultiError) AllErrors() []error { return m }

// DumpProgressValidationError is the validation error returned by
// DumpProgress.Validate if the designated constraints aren't met.
type DumpProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpProgressValidationError) ErrorName() string { return "DumpProgressValidationError" }

// Error satisfies the builtin error interface
func (e DumpProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpProgressValidationError{}

// Validate checks the field values on DumpChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DumpChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DumpChunkMultiError, or nil
// if none found.
func (m *DumpChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Chunk.(type) {
	case *DumpChunk_Content:
		if v == nil {
			err := DumpChunkValidationError{
				field:  "Chunk",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContent()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpChunkValidationError{
						field:  "Content",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpChunkValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DumpChunk_Progress:
		if v == nil {
			err := DumpChunkValidationError{
				field:  "Chunk",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProgress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DumpChunkValidationError{
						field:  "Progress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DumpChunkValidationError{
						field:  "Progress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DumpChunkValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DumpChunkMultiError(errors)
	}

	return nil
}

// DumpChunkMultiError is an error wrapping multiple validation errors returned
// by DumpChunk.ValidateAll() if the designated constraints aren't met.
type DumpChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpChunkMultiError) AllErrors() []error { return m }

// DumpChunkValidationError is the validation error returned by
// DumpChunk.Validate if the designated constraints aren't met.
type DumpChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpChunkValidationError) ErrorName() string { return "DumpChunkValidationError" }

// Error satisfies the builtin error interface
func (e DumpChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpChunkValidationError{}

// Validate checks the field values on RunPFSLoadTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunPFSLoadTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunPFSLoadTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunPFSLoadTestRequestMultiError, or nil if none found.
func (m *RunPFSLoadTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RunPFSLoadTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	if all {
		switch v := interface{}(m.GetBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunPFSLoadTestRequestValidationError{
					field:  "Branch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunPFSLoadTestRequestValidationError{
					field:  "Branch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunPFSLoadTestRequestValidationError{
				field:  "Branch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Seed

	// no validation rules for StateId

	if len(errors) > 0 {
		return RunPFSLoadTestRequestMultiError(errors)
	}

	return nil
}

// RunPFSLoadTestRequestMultiError is an error wrapping multiple validation
// errors returned by RunPFSLoadTestRequest.ValidateAll() if the designated
// constraints aren't met.
type RunPFSLoadTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunPFSLoadTestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunPFSLoadTestRequestMultiError) AllErrors() []error { return m }

// RunPFSLoadTestRequestValidationError is the validation error returned by
// RunPFSLoadTestRequest.Validate if the designated constraints aren't met.
type RunPFSLoadTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunPFSLoadTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunPFSLoadTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunPFSLoadTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunPFSLoadTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunPFSLoadTestRequestValidationError) ErrorName() string {
	return "RunPFSLoadTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RunPFSLoadTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunPFSLoadTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunPFSLoadTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunPFSLoadTestRequestValidationError{}

// Validate checks the field values on RunPFSLoadTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RunPFSLoadTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunPFSLoadTestResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RunPFSLoadTestResponseMultiError, or nil if none found.
func (m *RunPFSLoadTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunPFSLoadTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	if all {
		switch v := interface{}(m.GetBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunPFSLoadTestResponseValidationError{
					field:  "Branch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunPFSLoadTestResponseValidationError{
					field:  "Branch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunPFSLoadTestResponseValidationError{
				field:  "Branch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Seed

	// no validation rules for Error

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunPFSLoadTestResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunPFSLoadTestResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunPFSLoadTestResponseValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StateId

	if len(errors) > 0 {
		return RunPFSLoadTestResponseMultiError(errors)
	}

	return nil
}

// RunPFSLoadTestResponseMultiError is an error wrapping multiple validation
// errors returned by RunPFSLoadTestResponse.ValidateAll() if the designated
// constraints aren't met.
type RunPFSLoadTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunPFSLoadTestResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunPFSLoadTestResponseMultiError) AllErrors() []error { return m }

// RunPFSLoadTestResponseValidationError is the validation error returned by
// RunPFSLoadTestResponse.Validate if the designated constraints aren't met.
type RunPFSLoadTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunPFSLoadTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunPFSLoadTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunPFSLoadTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunPFSLoadTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunPFSLoadTestResponseValidationError) ErrorName() string {
	return "RunPFSLoadTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RunPFSLoadTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunPFSLoadTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunPFSLoadTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunPFSLoadTestResponseValidationError{}

// Validate checks the field values on TraceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TraceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TraceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TraceRequestMultiError, or
// nil if none found.
func (m *TraceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TraceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDuration() == nil {
		err := TraceRequestValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDuration(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = TraceRequestValidationError{
				field:  "Duration",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt {
				err := TraceRequestValidationError{
					field:  "Duration",
					reason: "value must be greater than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return TraceRequestMultiError(errors)
	}

	return nil
}

// TraceRequestMultiError is an error wrapping multiple validation errors
// returned by TraceRequest.ValidateAll() if the designated constraints aren't met.
type TraceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraceRequestMultiError) AllErrors() []error { return m }

// TraceRequestValidationError is the validation error returned by
// TraceRequest.Validate if the designated constraints aren't met.
type TraceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraceRequestValidationError) ErrorName() string { return "TraceRequestValidationError" }

// Error satisfies the builtin error interface
func (e TraceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraceRequestValidationError{}

// Validate checks the field values on TraceChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TraceChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TraceChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TraceChunkMultiError, or
// nil if none found.
func (m *TraceChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *TraceChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Reply.(type) {
	case *TraceChunk_Bytes:
		if v == nil {
			err := TraceChunkValidationError{
				field:  "Reply",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetBytes()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TraceChunkValidationError{
						field:  "Bytes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TraceChunkValidationError{
						field:  "Bytes",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBytes()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraceChunkValidationError{
					field:  "Bytes",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return TraceChunkMultiError(errors)
	}

	return nil
}

// TraceChunkMultiError is an error wrapping multiple validation errors
// returned by TraceChunk.ValidateAll() if the designated constraints aren't met.
type TraceChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraceChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraceChunkMultiError) AllErrors() []error { return m }

// TraceChunkValidationError is the validation error returned by
// TraceChunk.Validate if the designated constraints aren't met.
type TraceChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraceChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraceChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraceChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraceChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraceChunkValidationError) ErrorName() string { return "TraceChunkValidationError" }

// Error satisfies the builtin error interface
func (e TraceChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTraceChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraceChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraceChunkValidationError{}

// Validate checks the field values on DumpV2Request_Defaults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DumpV2Request_Defaults) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpV2Request_Defaults with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DumpV2Request_DefaultsMultiError, or nil if none found.
func (m *DumpV2Request_Defaults) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpV2Request_Defaults) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterDefaults

	if len(errors) > 0 {
		return DumpV2Request_DefaultsMultiError(errors)
	}

	return nil
}

// DumpV2Request_DefaultsMultiError is an error wrapping multiple validation
// errors returned by DumpV2Request_Defaults.ValidateAll() if the designated
// constraints aren't met.
type DumpV2Request_DefaultsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpV2Request_DefaultsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpV2Request_DefaultsMultiError) AllErrors() []error { return m }

// DumpV2Request_DefaultsValidationError is the validation error returned by
// DumpV2Request_Defaults.Validate if the designated constraints aren't met.
type DumpV2Request_DefaultsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpV2Request_DefaultsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpV2Request_DefaultsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpV2Request_DefaultsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpV2Request_DefaultsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpV2Request_DefaultsValidationError) ErrorName() string {
	return "DumpV2Request_DefaultsValidationError"
}

// Error satisfies the builtin error interface
func (e DumpV2Request_DefaultsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpV2Request_Defaults.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpV2Request_DefaultsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpV2Request_DefaultsValidationError{}

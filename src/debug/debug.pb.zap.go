// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: debug/debug.proto

package debug

import (
	protoextensions "github.com/pachyderm/pachyderm/v2/src/protoextensions"
	zapcore "go.uber.org/zap/zapcore"
)

func (x *ProfileRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Profile).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("profile", obj)
	} else {
		enc.AddReflected("profile", x.Profile)
	}

	if obj, ok := interface{}(x.Filter).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("filter", obj)
	} else {
		enc.AddReflected("filter", x.Filter)
	}

	return nil
}

func (x *Profile) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("name", x.Name)

	protoextensions.AddDuration(enc, "duration", x.Duration)

	return nil
}

func (x *Filter) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddBool("pachd", x.GetPachd())

	if obj, ok := interface{}(x.GetPipeline()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("pipeline", obj)
	} else {
		enc.AddReflected("pipeline", x.GetPipeline())
	}

	if obj, ok := interface{}(x.GetWorker()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("worker", obj)
	} else {
		enc.AddReflected("worker", x.GetWorker())
	}

	enc.AddBool("database", x.GetDatabase())

	return nil
}

func (x *Worker) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("pod", x.Pod)

	enc.AddBool("redirected", x.Redirected)

	return nil
}

func (x *BinaryRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Filter).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("filter", obj)
	} else {
		enc.AddReflected("filter", x.Filter)
	}

	return nil
}

func (x *DumpRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Filter).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("filter", obj)
	} else {
		enc.AddReflected("filter", x.Filter)
	}

	enc.AddInt64("limit", x.Limit)

	return nil
}

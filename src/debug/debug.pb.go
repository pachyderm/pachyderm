// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: debug/debug.proto

package debug

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	pfs "github.com/pachyderm/pachyderm/v2/src/pfs"
	pps "github.com/pachyderm/pachyderm/v2/src/pps"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetLogLevelRequest_LogLevel int32

const (
	SetLogLevelRequest_UNKNOWN SetLogLevelRequest_LogLevel = 0
	SetLogLevelRequest_DEBUG   SetLogLevelRequest_LogLevel = 1
	SetLogLevelRequest_INFO    SetLogLevelRequest_LogLevel = 2
	SetLogLevelRequest_ERROR   SetLogLevelRequest_LogLevel = 3
	SetLogLevelRequest_OFF     SetLogLevelRequest_LogLevel = 4 // Only GRPC logs can be turned off.
)

// Enum value maps for SetLogLevelRequest_LogLevel.
var (
	SetLogLevelRequest_LogLevel_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEBUG",
		2: "INFO",
		3: "ERROR",
		4: "OFF",
	}
	SetLogLevelRequest_LogLevel_value = map[string]int32{
		"UNKNOWN": 0,
		"DEBUG":   1,
		"INFO":    2,
		"ERROR":   3,
		"OFF":     4,
	}
)

func (x SetLogLevelRequest_LogLevel) Enum() *SetLogLevelRequest_LogLevel {
	p := new(SetLogLevelRequest_LogLevel)
	*p = x
	return p
}

func (x SetLogLevelRequest_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetLogLevelRequest_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_debug_debug_proto_enumTypes[0].Descriptor()
}

func (SetLogLevelRequest_LogLevel) Type() protoreflect.EnumType {
	return &file_debug_debug_proto_enumTypes[0]
}

func (x SetLogLevelRequest_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetLogLevelRequest_LogLevel.Descriptor instead.
func (SetLogLevelRequest_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{6, 0}
}

type ProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	Filter  *Filter  `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ProfileRequest) Reset() {
	*x = ProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileRequest) ProtoMessage() {}

func (x *ProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileRequest.ProtoReflect.Descriptor instead.
func (*ProfileRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{0}
}

func (x *ProfileRequest) GetProfile() *Profile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ProfileRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"` // only meaningful if name == "cpu"
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{1}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Filter:
	//
	//	*Filter_Pachd
	//	*Filter_Pipeline
	//	*Filter_Worker
	//	*Filter_Database
	Filter isFilter_Filter `protobuf_oneof:"filter"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{2}
}

func (m *Filter) GetFilter() isFilter_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (x *Filter) GetPachd() bool {
	if x, ok := x.GetFilter().(*Filter_Pachd); ok {
		return x.Pachd
	}
	return false
}

func (x *Filter) GetPipeline() *pps.Pipeline {
	if x, ok := x.GetFilter().(*Filter_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

func (x *Filter) GetWorker() *Worker {
	if x, ok := x.GetFilter().(*Filter_Worker); ok {
		return x.Worker
	}
	return nil
}

func (x *Filter) GetDatabase() bool {
	if x, ok := x.GetFilter().(*Filter_Database); ok {
		return x.Database
	}
	return false
}

type isFilter_Filter interface {
	isFilter_Filter()
}

type Filter_Pachd struct {
	Pachd bool `protobuf:"varint,1,opt,name=pachd,proto3,oneof"`
}

type Filter_Pipeline struct {
	Pipeline *pps.Pipeline `protobuf:"bytes,2,opt,name=pipeline,proto3,oneof"`
}

type Filter_Worker struct {
	Worker *Worker `protobuf:"bytes,3,opt,name=worker,proto3,oneof"`
}

type Filter_Database struct {
	Database bool `protobuf:"varint,4,opt,name=database,proto3,oneof"`
}

func (*Filter_Pachd) isFilter_Filter() {}

func (*Filter_Pipeline) isFilter_Filter() {}

func (*Filter_Worker) isFilter_Filter() {}

func (*Filter_Database) isFilter_Filter() {}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod        string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	Redirected bool   `protobuf:"varint,2,opt,name=redirected,proto3" json:"redirected,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{3}
}

func (x *Worker) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *Worker) GetRedirected() bool {
	if x != nil {
		return x.Redirected
	}
	return false
}

type BinaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *BinaryRequest) Reset() {
	*x = BinaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryRequest) ProtoMessage() {}

func (x *BinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryRequest.ProtoReflect.Descriptor instead.
func (*BinaryRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{4}
}

func (x *BinaryRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type DumpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Limit sets the limit for the number of commits / jobs that are returned for each repo / pipeline in the dump.
	Limit int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DumpRequest) Reset() {
	*x = DumpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRequest) ProtoMessage() {}

func (x *DumpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRequest.ProtoReflect.Descriptor instead.
func (*DumpRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{5}
}

func (x *DumpRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DumpRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SetLogLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Level:
	//
	//	*SetLogLevelRequest_Pachyderm
	//	*SetLogLevelRequest_Grpc
	Level    isSetLogLevelRequest_Level `protobuf_oneof:"level"`
	Duration *durationpb.Duration       `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Recurse  bool                       `protobuf:"varint,4,opt,name=recurse,proto3" json:"recurse,omitempty"`
}

func (x *SetLogLevelRequest) Reset() {
	*x = SetLogLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelRequest) ProtoMessage() {}

func (x *SetLogLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{6}
}

func (m *SetLogLevelRequest) GetLevel() isSetLogLevelRequest_Level {
	if m != nil {
		return m.Level
	}
	return nil
}

func (x *SetLogLevelRequest) GetPachyderm() SetLogLevelRequest_LogLevel {
	if x, ok := x.GetLevel().(*SetLogLevelRequest_Pachyderm); ok {
		return x.Pachyderm
	}
	return SetLogLevelRequest_UNKNOWN
}

func (x *SetLogLevelRequest) GetGrpc() SetLogLevelRequest_LogLevel {
	if x, ok := x.GetLevel().(*SetLogLevelRequest_Grpc); ok {
		return x.Grpc
	}
	return SetLogLevelRequest_UNKNOWN
}

func (x *SetLogLevelRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SetLogLevelRequest) GetRecurse() bool {
	if x != nil {
		return x.Recurse
	}
	return false
}

type isSetLogLevelRequest_Level interface {
	isSetLogLevelRequest_Level()
}

type SetLogLevelRequest_Pachyderm struct {
	Pachyderm SetLogLevelRequest_LogLevel `protobuf:"varint,1,opt,name=pachyderm,proto3,enum=debug_v2.SetLogLevelRequest_LogLevel,oneof"`
}

type SetLogLevelRequest_Grpc struct {
	Grpc SetLogLevelRequest_LogLevel `protobuf:"varint,2,opt,name=grpc,proto3,enum=debug_v2.SetLogLevelRequest_LogLevel,oneof"`
}

func (*SetLogLevelRequest_Pachyderm) isSetLogLevelRequest_Level() {}

func (*SetLogLevelRequest_Grpc) isSetLogLevelRequest_Level() {}

type SetLogLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedPods []string `protobuf:"bytes,1,rep,name=affected_pods,json=affectedPods,proto3" json:"affected_pods,omitempty"`
	ErroredPods  []string `protobuf:"bytes,2,rep,name=errored_pods,json=erroredPods,proto3" json:"errored_pods,omitempty"`
}

func (x *SetLogLevelResponse) Reset() {
	*x = SetLogLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLogLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLogLevelResponse) ProtoMessage() {}

func (x *SetLogLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLogLevelResponse.ProtoReflect.Descriptor instead.
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{7}
}

func (x *SetLogLevelResponse) GetAffectedPods() []string {
	if x != nil {
		return x.AffectedPods
	}
	return nil
}

func (x *SetLogLevelResponse) GetErroredPods() []string {
	if x != nil {
		return x.ErroredPods
	}
	return nil
}

type GetDumpV2TemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []string `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *GetDumpV2TemplateRequest) Reset() {
	*x = GetDumpV2TemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDumpV2TemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDumpV2TemplateRequest) ProtoMessage() {}

func (x *GetDumpV2TemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDumpV2TemplateRequest.ProtoReflect.Descriptor instead.
func (*GetDumpV2TemplateRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{8}
}

func (x *GetDumpV2TemplateRequest) GetFilters() []string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type GetDumpV2TemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *DumpV2Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetDumpV2TemplateResponse) Reset() {
	*x = GetDumpV2TemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDumpV2TemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDumpV2TemplateResponse) ProtoMessage() {}

func (x *GetDumpV2TemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDumpV2TemplateResponse.ProtoReflect.Descriptor instead.
func (*GetDumpV2TemplateResponse) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{9}
}

func (x *GetDumpV2TemplateResponse) GetRequest() *DumpV2Request {
	if x != nil {
		return x.Request
	}
	return nil
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{10}
}

func (x *Pipeline) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip         string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Containers []string `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{11}
}

func (x *Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pod) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Pod) GetContainers() []string {
	if x != nil {
		return x.Containers
	}
	return nil
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pods     []*Pod               `protobuf:"bytes,2,rep,name=pods,proto3" json:"pods,omitempty"`
	Timeout  *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Pipeline *Pipeline            `protobuf:"bytes,4,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{12}
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetPods() []*Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *App) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *App) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Helm      bool   `protobuf:"varint,1,opt,name=helm,proto3" json:"helm,omitempty"`
	Database  bool   `protobuf:"varint,2,opt,name=database,proto3" json:"database,omitempty"`
	Version   bool   `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Describes []*App `protobuf:"bytes,4,rep,name=describes,proto3" json:"describes,omitempty"`
	Logs      []*App `protobuf:"bytes,5,rep,name=logs,proto3" json:"logs,omitempty"`
	LokiLogs  []*App `protobuf:"bytes,6,rep,name=loki_logs,json=lokiLogs,proto3" json:"loki_logs,omitempty"`
	Binaries  []*App `protobuf:"bytes,7,rep,name=binaries,proto3" json:"binaries,omitempty"`
	Profiles  []*App `protobuf:"bytes,8,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{13}
}

func (x *System) GetHelm() bool {
	if x != nil {
		return x.Helm
	}
	return false
}

func (x *System) GetDatabase() bool {
	if x != nil {
		return x.Database
	}
	return false
}

func (x *System) GetVersion() bool {
	if x != nil {
		return x.Version
	}
	return false
}

func (x *System) GetDescribes() []*App {
	if x != nil {
		return x.Describes
	}
	return nil
}

func (x *System) GetLogs() []*App {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *System) GetLokiLogs() []*App {
	if x != nil {
		return x.LokiLogs
	}
	return nil
}

func (x *System) GetBinaries() []*App {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *System) GetProfiles() []*App {
	if x != nil {
		return x.Profiles
	}
	return nil
}

// StarlarkLiteral is a custom Starlark script.
type StarlarkLiteral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the script; used for debug messages and to control where the output goes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The text of the "debugdump" personality Starlark program.
	ProgramText string `protobuf:"bytes,2,opt,name=program_text,json=programText,proto3" json:"program_text,omitempty"`
}

func (x *StarlarkLiteral) Reset() {
	*x = StarlarkLiteral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StarlarkLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarlarkLiteral) ProtoMessage() {}

func (x *StarlarkLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarlarkLiteral.ProtoReflect.Descriptor instead.
func (*StarlarkLiteral) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{14}
}

func (x *StarlarkLiteral) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StarlarkLiteral) GetProgramText() string {
	if x != nil {
		return x.ProgramText
	}
	return ""
}

// Starlark controls the running of a Starlark script.
type Starlark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where to load the program from.
	//
	// Types that are assignable to Source:
	//
	//	*Starlark_Builtin
	//	*Starlark_Literal
	Source isStarlark_Source `protobuf_oneof:"source"`
	// How long to allow the script to run for.  If unset, defaults to 1 minute.
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Starlark) Reset() {
	*x = Starlark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Starlark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Starlark) ProtoMessage() {}

func (x *Starlark) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Starlark.ProtoReflect.Descriptor instead.
func (*Starlark) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{15}
}

func (m *Starlark) GetSource() isStarlark_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Starlark) GetBuiltin() string {
	if x, ok := x.GetSource().(*Starlark_Builtin); ok {
		return x.Builtin
	}
	return ""
}

func (x *Starlark) GetLiteral() *StarlarkLiteral {
	if x, ok := x.GetSource().(*Starlark_Literal); ok {
		return x.Literal
	}
	return nil
}

func (x *Starlark) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type isStarlark_Source interface {
	isStarlark_Source()
}

type Starlark_Builtin struct {
	// One built into the pachd binary.
	Builtin string `protobuf:"bytes,1,opt,name=builtin,proto3,oneof"`
}

type Starlark_Literal struct {
	// Or a script supplied in this request.
	Literal *StarlarkLiteral `protobuf:"bytes,2,opt,name=literal,proto3,oneof"`
}

func (*Starlark_Builtin) isStarlark_Source() {}

func (*Starlark_Literal) isStarlark_Source() {}

type DumpV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which system-level information to include in the debug dump.
	System *System `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// Which pipelines to fetch information about and include in the debug dump.
	Pipelines []*Pipeline `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// If true, fetch information about non-output repos.
	InputRepos bool `protobuf:"varint,3,opt,name=input_repos,json=inputRepos,proto3" json:"input_repos,omitempty"`
	// How long to run the dump for.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Which defaults to include in the debug dump.
	Defaults *DumpV2Request_Defaults `protobuf:"bytes,5,opt,name=defaults,proto3" json:"defaults,omitempty"`
	// A list of Starlark scripts to run.
	StarlarkScripts []*Starlark `protobuf:"bytes,6,rep,name=starlark_scripts,json=starlarkScripts,proto3" json:"starlark_scripts,omitempty"`
}

func (x *DumpV2Request) Reset() {
	*x = DumpV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpV2Request) ProtoMessage() {}

func (x *DumpV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpV2Request.ProtoReflect.Descriptor instead.
func (*DumpV2Request) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{16}
}

func (x *DumpV2Request) GetSystem() *System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *DumpV2Request) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *DumpV2Request) GetInputRepos() bool {
	if x != nil {
		return x.InputRepos
	}
	return false
}

func (x *DumpV2Request) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *DumpV2Request) GetDefaults() *DumpV2Request_Defaults {
	if x != nil {
		return x.Defaults
	}
	return nil
}

func (x *DumpV2Request) GetStarlarkScripts() []*Starlark {
	if x != nil {
		return x.StarlarkScripts
	}
	return nil
}

type DumpContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *DumpContent) Reset() {
	*x = DumpContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpContent) ProtoMessage() {}

func (x *DumpContent) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpContent.ProtoReflect.Descriptor instead.
func (*DumpContent) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{17}
}

func (x *DumpContent) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type DumpProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task     string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Total    int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Progress int64  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *DumpProgress) Reset() {
	*x = DumpProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpProgress) ProtoMessage() {}

func (x *DumpProgress) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpProgress.ProtoReflect.Descriptor instead.
func (*DumpProgress) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{18}
}

func (x *DumpProgress) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *DumpProgress) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DumpProgress) GetProgress() int64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type DumpChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Chunk:
	//
	//	*DumpChunk_Content
	//	*DumpChunk_Progress
	Chunk isDumpChunk_Chunk `protobuf_oneof:"chunk"`
}

func (x *DumpChunk) Reset() {
	*x = DumpChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpChunk) ProtoMessage() {}

func (x *DumpChunk) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpChunk.ProtoReflect.Descriptor instead.
func (*DumpChunk) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{19}
}

func (m *DumpChunk) GetChunk() isDumpChunk_Chunk {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func (x *DumpChunk) GetContent() *DumpContent {
	if x, ok := x.GetChunk().(*DumpChunk_Content); ok {
		return x.Content
	}
	return nil
}

func (x *DumpChunk) GetProgress() *DumpProgress {
	if x, ok := x.GetChunk().(*DumpChunk_Progress); ok {
		return x.Progress
	}
	return nil
}

type isDumpChunk_Chunk interface {
	isDumpChunk_Chunk()
}

type DumpChunk_Content struct {
	Content *DumpContent `protobuf:"bytes,1,opt,name=content,proto3,oneof"`
}

type DumpChunk_Progress struct {
	Progress *DumpProgress `protobuf:"bytes,2,opt,name=progress,proto3,oneof"`
}

func (*DumpChunk_Content) isDumpChunk_Chunk() {}

func (*DumpChunk_Progress) isDumpChunk_Chunk() {}

type RunPFSLoadTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec    string      `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Branch  *pfs.Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Seed    int64       `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	StateId string      `protobuf:"bytes,4,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
}

func (x *RunPFSLoadTestRequest) Reset() {
	*x = RunPFSLoadTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPFSLoadTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPFSLoadTestRequest) ProtoMessage() {}

func (x *RunPFSLoadTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPFSLoadTestRequest.ProtoReflect.Descriptor instead.
func (*RunPFSLoadTestRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{20}
}

func (x *RunPFSLoadTestRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *RunPFSLoadTestRequest) GetBranch() *pfs.Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RunPFSLoadTestRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RunPFSLoadTestRequest) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

type RunPFSLoadTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec     string               `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Branch   *pfs.Branch          `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	Seed     int64                `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	Error    string               `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	Duration *durationpb.Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	StateId  string               `protobuf:"bytes,6,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
}

func (x *RunPFSLoadTestResponse) Reset() {
	*x = RunPFSLoadTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPFSLoadTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPFSLoadTestResponse) ProtoMessage() {}

func (x *RunPFSLoadTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPFSLoadTestResponse.ProtoReflect.Descriptor instead.
func (*RunPFSLoadTestResponse) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{21}
}

func (x *RunPFSLoadTestResponse) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *RunPFSLoadTestResponse) GetBranch() *pfs.Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RunPFSLoadTestResponse) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RunPFSLoadTestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunPFSLoadTestResponse) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *RunPFSLoadTestResponse) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

type TraceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *TraceRequest) Reset() {
	*x = TraceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceRequest) ProtoMessage() {}

func (x *TraceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceRequest.ProtoReflect.Descriptor instead.
func (*TraceRequest) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{22}
}

func (x *TraceRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type TraceChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reply:
	//
	//	*TraceChunk_Bytes
	Reply isTraceChunk_Reply `protobuf_oneof:"reply"`
}

func (x *TraceChunk) Reset() {
	*x = TraceChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceChunk) ProtoMessage() {}

func (x *TraceChunk) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceChunk.ProtoReflect.Descriptor instead.
func (*TraceChunk) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{23}
}

func (m *TraceChunk) GetReply() isTraceChunk_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *TraceChunk) GetBytes() *wrapperspb.BytesValue {
	if x, ok := x.GetReply().(*TraceChunk_Bytes); ok {
		return x.Bytes
	}
	return nil
}

type isTraceChunk_Reply interface {
	isTraceChunk_Reply()
}

type TraceChunk_Bytes struct {
	Bytes *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=bytes,proto3,oneof"`
}

func (*TraceChunk_Bytes) isTraceChunk_Reply() {}

type DumpV2Request_Defaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, include the cluster defaults.
	ClusterDefaults bool `protobuf:"varint,1,opt,name=cluster_defaults,json=clusterDefaults,proto3" json:"cluster_defaults,omitempty"`
}

func (x *DumpV2Request_Defaults) Reset() {
	*x = DumpV2Request_Defaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_debug_debug_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpV2Request_Defaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpV2Request_Defaults) ProtoMessage() {}

func (x *DumpV2Request_Defaults) ProtoReflect() protoreflect.Message {
	mi := &file_debug_debug_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpV2Request_Defaults.ProtoReflect.Descriptor instead.
func (*DumpV2Request_Defaults) Descriptor() ([]byte, []int) {
	return file_debug_debug_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DumpV2Request_Defaults) GetClusterDefaults() bool {
	if x != nil {
		return x.ClusterDefaults
	}
	return false
}

var File_debug_debug_proto protoreflect.FileDescriptor

var file_debug_debug_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x70, 0x73, 0x2f,
	0x70, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x66, 0x73, 0x2f, 0x70,
	0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x54, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x70, 0x61, 0x63, 0x68, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x63, 0x68, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3a,
	0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x39, 0x0a, 0x0d, 0x42, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xb4, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70,
	0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65,
	0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65,
	0x22, 0x40, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46,
	0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x5d, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x75, 0x6d, 0x70, 0x56, 0x32, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x4e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x56, 0x32, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x38, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x03, 0x50, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x06, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2a,
	0x0a, 0x09, 0x6c, 0x6f, 0x6b, 0x69, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x70,
	0x52, 0x08, 0x6c, 0x6f, 0x6b, 0x69, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x08, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x76, 0x32, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x22, 0x48, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x0d, 0x44, 0x75,
	0x6d, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x08, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x6c, 0x61, 0x72, 0x6b, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x6c,
	0x61, 0x72, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x1a, 0x35, 0x0a, 0x08, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x27, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0c, 0x44, 0x75,
	0x6d, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x7d, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22,
	0x82, 0x01, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x50, 0x46, 0x53, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x50, 0x46, 0x53, 0x4c,
	0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x08, 0x01, 0x2a, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x07, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xa2, 0x05, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x12, 0x44, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x04, 0x44, 0x75,
	0x6d, 0x70, 0x12, 0x15, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44,
	0x75, 0x6d, 0x70, 0x56, 0x32, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x75, 0x6d, 0x70,
	0x56, 0x32, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x75, 0x6d, 0x70, 0x56, 0x32, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x75, 0x6d, 0x70,
	0x56, 0x32, 0x12, 0x17, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75,
	0x6d, 0x70, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x16, 0x2e,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x55, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x50, 0x46, 0x53, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e,
	0x50, 0x46, 0x53, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75,
	0x6e, 0x50, 0x46, 0x53, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x15, 0x52, 0x75, 0x6e, 0x50, 0x46, 0x53,
	0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x46, 0x53, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64,
	0x65, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_debug_debug_proto_rawDescOnce sync.Once
	file_debug_debug_proto_rawDescData = file_debug_debug_proto_rawDesc
)

func file_debug_debug_proto_rawDescGZIP() []byte {
	file_debug_debug_proto_rawDescOnce.Do(func() {
		file_debug_debug_proto_rawDescData = protoimpl.X.CompressGZIP(file_debug_debug_proto_rawDescData)
	})
	return file_debug_debug_proto_rawDescData
}

var file_debug_debug_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_debug_debug_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_debug_debug_proto_goTypes = []interface{}{
	(SetLogLevelRequest_LogLevel)(0),  // 0: debug_v2.SetLogLevelRequest.LogLevel
	(*ProfileRequest)(nil),            // 1: debug_v2.ProfileRequest
	(*Profile)(nil),                   // 2: debug_v2.Profile
	(*Filter)(nil),                    // 3: debug_v2.Filter
	(*Worker)(nil),                    // 4: debug_v2.Worker
	(*BinaryRequest)(nil),             // 5: debug_v2.BinaryRequest
	(*DumpRequest)(nil),               // 6: debug_v2.DumpRequest
	(*SetLogLevelRequest)(nil),        // 7: debug_v2.SetLogLevelRequest
	(*SetLogLevelResponse)(nil),       // 8: debug_v2.SetLogLevelResponse
	(*GetDumpV2TemplateRequest)(nil),  // 9: debug_v2.GetDumpV2TemplateRequest
	(*GetDumpV2TemplateResponse)(nil), // 10: debug_v2.GetDumpV2TemplateResponse
	(*Pipeline)(nil),                  // 11: debug_v2.Pipeline
	(*Pod)(nil),                       // 12: debug_v2.Pod
	(*App)(nil),                       // 13: debug_v2.App
	(*System)(nil),                    // 14: debug_v2.System
	(*StarlarkLiteral)(nil),           // 15: debug_v2.StarlarkLiteral
	(*Starlark)(nil),                  // 16: debug_v2.Starlark
	(*DumpV2Request)(nil),             // 17: debug_v2.DumpV2Request
	(*DumpContent)(nil),               // 18: debug_v2.DumpContent
	(*DumpProgress)(nil),              // 19: debug_v2.DumpProgress
	(*DumpChunk)(nil),                 // 20: debug_v2.DumpChunk
	(*RunPFSLoadTestRequest)(nil),     // 21: debug_v2.RunPFSLoadTestRequest
	(*RunPFSLoadTestResponse)(nil),    // 22: debug_v2.RunPFSLoadTestResponse
	(*TraceRequest)(nil),              // 23: debug_v2.TraceRequest
	(*TraceChunk)(nil),                // 24: debug_v2.TraceChunk
	(*DumpV2Request_Defaults)(nil),    // 25: debug_v2.DumpV2Request.Defaults
	(*durationpb.Duration)(nil),       // 26: google.protobuf.Duration
	(*pps.Pipeline)(nil),              // 27: pps_v2.Pipeline
	(*pfs.Branch)(nil),                // 28: pfs_v2.Branch
	(*wrapperspb.BytesValue)(nil),     // 29: google.protobuf.BytesValue
	(*emptypb.Empty)(nil),             // 30: google.protobuf.Empty
}
var file_debug_debug_proto_depIdxs = []int32{
	2,  // 0: debug_v2.ProfileRequest.profile:type_name -> debug_v2.Profile
	3,  // 1: debug_v2.ProfileRequest.filter:type_name -> debug_v2.Filter
	26, // 2: debug_v2.Profile.duration:type_name -> google.protobuf.Duration
	27, // 3: debug_v2.Filter.pipeline:type_name -> pps_v2.Pipeline
	4,  // 4: debug_v2.Filter.worker:type_name -> debug_v2.Worker
	3,  // 5: debug_v2.BinaryRequest.filter:type_name -> debug_v2.Filter
	3,  // 6: debug_v2.DumpRequest.filter:type_name -> debug_v2.Filter
	0,  // 7: debug_v2.SetLogLevelRequest.pachyderm:type_name -> debug_v2.SetLogLevelRequest.LogLevel
	0,  // 8: debug_v2.SetLogLevelRequest.grpc:type_name -> debug_v2.SetLogLevelRequest.LogLevel
	26, // 9: debug_v2.SetLogLevelRequest.duration:type_name -> google.protobuf.Duration
	17, // 10: debug_v2.GetDumpV2TemplateResponse.request:type_name -> debug_v2.DumpV2Request
	12, // 11: debug_v2.App.pods:type_name -> debug_v2.Pod
	26, // 12: debug_v2.App.timeout:type_name -> google.protobuf.Duration
	11, // 13: debug_v2.App.pipeline:type_name -> debug_v2.Pipeline
	13, // 14: debug_v2.System.describes:type_name -> debug_v2.App
	13, // 15: debug_v2.System.logs:type_name -> debug_v2.App
	13, // 16: debug_v2.System.loki_logs:type_name -> debug_v2.App
	13, // 17: debug_v2.System.binaries:type_name -> debug_v2.App
	13, // 18: debug_v2.System.profiles:type_name -> debug_v2.App
	15, // 19: debug_v2.Starlark.literal:type_name -> debug_v2.StarlarkLiteral
	26, // 20: debug_v2.Starlark.timeout:type_name -> google.protobuf.Duration
	14, // 21: debug_v2.DumpV2Request.system:type_name -> debug_v2.System
	11, // 22: debug_v2.DumpV2Request.pipelines:type_name -> debug_v2.Pipeline
	26, // 23: debug_v2.DumpV2Request.timeout:type_name -> google.protobuf.Duration
	25, // 24: debug_v2.DumpV2Request.defaults:type_name -> debug_v2.DumpV2Request.Defaults
	16, // 25: debug_v2.DumpV2Request.starlark_scripts:type_name -> debug_v2.Starlark
	18, // 26: debug_v2.DumpChunk.content:type_name -> debug_v2.DumpContent
	19, // 27: debug_v2.DumpChunk.progress:type_name -> debug_v2.DumpProgress
	28, // 28: debug_v2.RunPFSLoadTestRequest.branch:type_name -> pfs_v2.Branch
	28, // 29: debug_v2.RunPFSLoadTestResponse.branch:type_name -> pfs_v2.Branch
	26, // 30: debug_v2.RunPFSLoadTestResponse.duration:type_name -> google.protobuf.Duration
	26, // 31: debug_v2.TraceRequest.duration:type_name -> google.protobuf.Duration
	29, // 32: debug_v2.TraceChunk.bytes:type_name -> google.protobuf.BytesValue
	1,  // 33: debug_v2.Debug.Profile:input_type -> debug_v2.ProfileRequest
	5,  // 34: debug_v2.Debug.Binary:input_type -> debug_v2.BinaryRequest
	6,  // 35: debug_v2.Debug.Dump:input_type -> debug_v2.DumpRequest
	7,  // 36: debug_v2.Debug.SetLogLevel:input_type -> debug_v2.SetLogLevelRequest
	9,  // 37: debug_v2.Debug.GetDumpV2Template:input_type -> debug_v2.GetDumpV2TemplateRequest
	17, // 38: debug_v2.Debug.DumpV2:input_type -> debug_v2.DumpV2Request
	23, // 39: debug_v2.Debug.Trace:input_type -> debug_v2.TraceRequest
	21, // 40: debug_v2.Debug.RunPFSLoadTest:input_type -> debug_v2.RunPFSLoadTestRequest
	30, // 41: debug_v2.Debug.RunPFSLoadTestDefault:input_type -> google.protobuf.Empty
	29, // 42: debug_v2.Debug.Profile:output_type -> google.protobuf.BytesValue
	29, // 43: debug_v2.Debug.Binary:output_type -> google.protobuf.BytesValue
	29, // 44: debug_v2.Debug.Dump:output_type -> google.protobuf.BytesValue
	8,  // 45: debug_v2.Debug.SetLogLevel:output_type -> debug_v2.SetLogLevelResponse
	10, // 46: debug_v2.Debug.GetDumpV2Template:output_type -> debug_v2.GetDumpV2TemplateResponse
	20, // 47: debug_v2.Debug.DumpV2:output_type -> debug_v2.DumpChunk
	24, // 48: debug_v2.Debug.Trace:output_type -> debug_v2.TraceChunk
	22, // 49: debug_v2.Debug.RunPFSLoadTest:output_type -> debug_v2.RunPFSLoadTestResponse
	22, // 50: debug_v2.Debug.RunPFSLoadTestDefault:output_type -> debug_v2.RunPFSLoadTestResponse
	42, // [42:51] is the sub-list for method output_type
	33, // [33:42] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_debug_debug_proto_init() }
func file_debug_debug_proto_init() {
	if File_debug_debug_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_debug_debug_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLogLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDumpV2TemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDumpV2TemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StarlarkLiteral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Starlark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPFSLoadTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPFSLoadTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_debug_debug_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpV2Request_Defaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_debug_debug_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Filter_Pachd)(nil),
		(*Filter_Pipeline)(nil),
		(*Filter_Worker)(nil),
		(*Filter_Database)(nil),
	}
	file_debug_debug_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SetLogLevelRequest_Pachyderm)(nil),
		(*SetLogLevelRequest_Grpc)(nil),
	}
	file_debug_debug_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Starlark_Builtin)(nil),
		(*Starlark_Literal)(nil),
	}
	file_debug_debug_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*DumpChunk_Content)(nil),
		(*DumpChunk_Progress)(nil),
	}
	file_debug_debug_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TraceChunk_Bytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_debug_debug_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_debug_debug_proto_goTypes,
		DependencyIndexes: file_debug_debug_proto_depIdxs,
		EnumInfos:         file_debug_debug_proto_enumTypes,
		MessageInfos:      file_debug_debug_proto_msgTypes,
	}.Build()
	File_debug_debug_proto = out.File
	file_debug_debug_proto_rawDesc = nil
	file_debug_debug_proto_goTypes = nil
	file_debug_debug_proto_depIdxs = nil
}

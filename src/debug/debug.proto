syntax = "proto3";

package debug_v2;
option go_package = "github.com/pachyderm/pachyderm/v2/src/debug";

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

import "pps/pps.proto";

message ProfileRequest {
  Profile profile = 1;
  Filter filter = 2;
}

message Profile {
    string name = 1;
    google.protobuf.Duration duration = 2; // only meaningful if name == "cpu"
}

message Filter {
  oneof filter {
    bool pachd = 1;
    pps_v2.Pipeline pipeline = 2;
    Worker worker = 3;
    bool database = 4;
  }
}

message Worker {
   string pod = 1;
   bool redirected = 2;
}

message BinaryRequest {
  Filter filter = 1;
}

message DumpRequest {
  Filter filter = 1;
  // Limit sets the limit for the number of commits / jobs that are returned for each repo / pipeline in the dump.
  int64 limit = 2;
}

message SetLogLevelRequest {
    enum LogLevel {
      UNKNOWN = 0;
      DEBUG = 1;
      INFO = 2;
      ERROR = 3;
      OFF = 4; // Only GRPC logs can be turned off.
    };
    oneof level {
      LogLevel pachyderm = 1;
      LogLevel grpc = 2;
    };
    google.protobuf.Duration duration = 3;
    bool recurse = 4;
}

message SetLogLevelResponse {
    repeated string affected_pods = 1;
    repeated string errored_pods = 2;
}

service Debug {
  rpc Profile(ProfileRequest) returns (stream google.protobuf.BytesValue) {}
  rpc Binary(BinaryRequest) returns (stream google.protobuf.BytesValue) {}
  rpc Dump(DumpRequest) returns (stream google.protobuf.BytesValue) {}
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse) {}
}

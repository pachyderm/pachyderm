syntax = "proto3";

package debug_v2;
option go_package = "github.com/pachyderm/pachyderm/v2/src/debug";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "protoextensions/validate.proto";

import "pps/pps.proto";
import "pfs/pfs.proto";

message ProfileRequest {
  Profile profile = 1;
  Filter filter = 2;
}

message Profile {
    string name = 1;
    google.protobuf.Duration duration = 2; // only meaningful if name == "cpu"
}

message Filter {
  oneof filter {
    bool pachd = 1;
    pps_v2.Pipeline pipeline = 2;
    Worker worker = 3;
    bool database = 4;
  }
}

message Worker {
   string pod = 1;
   bool redirected = 2;
}

message BinaryRequest {
  Filter filter = 1;
}

message DumpRequest {
  Filter filter = 1;
  // Limit sets the limit for the number of commits / jobs that are returned for each repo / pipeline in the dump.
  int64 limit = 2;
}

message SetLogLevelRequest {
    enum LogLevel {
      UNKNOWN = 0;
      DEBUG = 1;
      INFO = 2;
      ERROR = 3;
      OFF = 4; // Only GRPC logs can be turned off.
    };
    oneof level {
      LogLevel pachyderm = 1;
      LogLevel grpc = 2;
    };
    google.protobuf.Duration duration = 3;
    bool recurse = 4;
}

message SetLogLevelResponse {
    repeated string affected_pods = 1;
    repeated string errored_pods = 2;
}

message GetDumpV2TemplateRequest {
 repeated string filters = 1;
}

message GetDumpV2TemplateResponse {
 DumpV2Request request = 1;
}

message Pipeline {
  string project = 1;
  string name = 2;
}

message Pod {
  string name = 1;
  string ip = 2;
  repeated string containers = 3;
}

message App {
  string name = 1;
  repeated Pod pods = 2;
  google.protobuf.Duration timeout = 3;
  Pipeline pipeline = 4;
  oneof extra_args {
    LokiArgs loki_args = 5;
    ProfileArgs profile_args = 6;
  }
}

message ProfileArgs {
  repeated Profile profiles = 1;
}

message LokiArgs {
  uint64 max_logs = 1;
}

message System {
  bool helm = 1;
  bool database = 2;
  bool version = 3;
  repeated App describes = 4;
  repeated App logs = 5;
  repeated App loki_logs = 6;
  repeated App binaries = 7;
  repeated App profiles = 8;
}

// StarlarkLiteral is a custom Starlark script.
message StarlarkLiteral {
  // The name of the script; used for debug messages and to control where the output goes.
  string name = 1;
  // The text of the "debugdump" personality Starlark program.
  string program_text = 2;
}

// Starlark controls the running of a Starlark script.
message Starlark {
  // Where to load the program from.
  oneof source {
    // One built into the pachd binary.
    string builtin = 1;
    // Or a script supplied in this request.
    StarlarkLiteral literal = 2;
  }
  // How long to allow the script to run for.  If unset, defaults to 1 minute.
  google.protobuf.Duration timeout = 3;
}

message DumpV2Request {
  // Which system-level information to include in the debug dump.
  System system = 1;
  // Which pipelines to fetch information about and include in the debug dump.
  repeated Pipeline pipelines = 2;
  // If true, fetch information about non-output repos.
  bool input_repos = 3;
  // How long to run the dump for.
  google.protobuf.Duration timeout = 4;
  message Defaults {
    // If true, include the cluster defaults.
    bool cluster_defaults = 1;
  }
  // Which defaults to include in the debug dump.
  Defaults defaults = 5;
  // A list of Starlark scripts to run.
  repeated Starlark starlark_scripts = 6;
}

message DumpContent {
  bytes content = 1;
}

message DumpProgress {
  string task = 1;
  int64 total = 2;
  int64 progress = 3;
}

message DumpChunk {
  oneof chunk {
    DumpContent content = 1;
    DumpProgress progress = 2;
  }
}

message RunPFSLoadTestRequest {
  string spec = 1;
  pfs_v2.Branch branch = 2;
  int64 seed = 3;
  string state_id = 4;
}

message RunPFSLoadTestResponse {
  string spec = 1;
  pfs_v2.Branch branch = 2;
  int64 seed = 3;
  string error = 4;
  google.protobuf.Duration duration = 5;
  string state_id = 6;
}

message TraceRequest {
  google.protobuf.Duration duration = 1 [(validate.rules).duration.gt.seconds = 0, (validate.rules).duration.required = true];
}

message TraceChunk {
  oneof reply {
    google.protobuf.BytesValue content = 1;
  }
}

service Debug {
  rpc Profile(ProfileRequest) returns (stream google.protobuf.BytesValue) {}
  rpc Binary(BinaryRequest) returns (stream google.protobuf.BytesValue) {}
  rpc Dump(DumpRequest) returns (stream google.protobuf.BytesValue) {}
  rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse) {}
  rpc GetDumpV2Template(GetDumpV2TemplateRequest) returns (GetDumpV2TemplateResponse) {}
  rpc DumpV2(DumpV2Request) returns (stream DumpChunk) {}
  rpc Trace(TraceRequest) returns (stream TraceChunk) {}

  // RunLoadTest runs a load test.
  rpc RunPFSLoadTest(RunPFSLoadTestRequest) returns (RunPFSLoadTestResponse) {}
  // RunLoadTestDefault runs the default load tests.
  rpc RunPFSLoadTestDefault(google.protobuf.Empty) returns (RunPFSLoadTestResponse) {}
}

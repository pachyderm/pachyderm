{
  "swagger": "2.0",
  "info": {
    "title": "admin/admin.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/admin_v2.API/InspectCluster": {
      "post": {
        "operationId": "API_InspectCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/admin_v2ClusterInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/admin_v2InspectClusterRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/Activate": {
      "post": {
        "summary": "Activate/Deactivate the auth API. 'Activate' sets an initial set of admins\nfor the Pachyderm cluster, and 'Deactivate' removes all ACLs, tokens, and\nadmins from the Pachyderm cluster, making all data publicly accessable",
        "operationId": "API_Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2ActivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "ActivateRequest enables authentication on the cluster. It issues an auth token\nwith no expiration for the irrevocable admin user `pach:root`.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2ActivateRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/Deactivate": {
      "post": {
        "operationId": "API_Deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2DeactivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2DeactivateRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetConfiguration": {
      "post": {
        "operationId": "API_GetConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetConfigurationRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/SetConfiguration": {
      "post": {
        "operationId": "API_SetConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2SetConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2SetConfigurationRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/Authenticate": {
      "post": {
        "operationId": "API_Authenticate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2AuthenticateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2AuthenticateRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/Authorize": {
      "post": {
        "operationId": "API_Authorize",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2AuthorizeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2AuthorizeRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetPermissions": {
      "post": {
        "operationId": "API_GetPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetPermissionsRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetPermissionsForPrincipal": {
      "post": {
        "operationId": "API_GetPermissionsForPrincipal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetPermissionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetPermissionsForPrincipalRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/WhoAmI": {
      "post": {
        "operationId": "API_WhoAmI",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2WhoAmIResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2WhoAmIRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetRolesForPermission": {
      "post": {
        "operationId": "API_GetRolesForPermission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetRolesForPermissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetRolesForPermissionRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/ModifyRoleBinding": {
      "post": {
        "operationId": "API_ModifyRoleBinding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2ModifyRoleBindingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2ModifyRoleBindingRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetRoleBinding": {
      "post": {
        "operationId": "API_GetRoleBinding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetRoleBindingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetRoleBindingRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetOIDCLogin": {
      "post": {
        "operationId": "API_GetOIDCLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetOIDCLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetOIDCLoginRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetRobotToken": {
      "post": {
        "operationId": "API_GetRobotToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetRobotTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetRobotTokenRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/RevokeAuthToken": {
      "post": {
        "operationId": "API_RevokeAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2RevokeAuthTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2RevokeAuthTokenRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/RevokeAuthTokensForUser": {
      "post": {
        "operationId": "API_RevokeAuthTokensForUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2RevokeAuthTokensForUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2RevokeAuthTokensForUserRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/SetGroupsForUser": {
      "post": {
        "operationId": "API_SetGroupsForUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2SetGroupsForUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2SetGroupsForUserRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/ModifyMembers": {
      "post": {
        "operationId": "API_ModifyMembers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2ModifyMembersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2ModifyMembersRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetGroups": {
      "post": {
        "operationId": "API_GetGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetGroupsRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetGroupsForPrincipal": {
      "post": {
        "operationId": "API_GetGroupsForPrincipal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetGroupsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetGroupsForPrincipalRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/GetUsers": {
      "post": {
        "operationId": "API_GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2GetUsersRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/ExtractAuthTokens": {
      "post": {
        "operationId": "API_ExtractAuthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2ExtractAuthTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "ExtractAuthTokens returns all the hashed robot tokens that have been issued.\nUser tokens are not extracted as they can be recreated by logging in.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2ExtractAuthTokensRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/RestoreAuthToken": {
      "post": {
        "operationId": "API_RestoreAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2RestoreAuthTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "RestoreAuthToken inserts a hashed token that has previously been extracted.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2RestoreAuthTokenRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/DeleteExpiredAuthTokens": {
      "post": {
        "operationId": "API_DeleteExpiredAuthTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2DeleteExpiredAuthTokensResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2DeleteExpiredAuthTokensRequest"
            }
          }
        ]
      }
    },
    "/auth_v2.API/RotateRootToken": {
      "post": {
        "operationId": "API_RotateRootToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/auth_v2RotateRootTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_v2RotateRootTokenRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/Profile": {
      "post": {
        "operationId": "Debug_Profile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "format": "byte",
              "properties": {
                "result": {},
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of protobufBytesValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2ProfileRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/Binary": {
      "post": {
        "operationId": "Debug_Binary",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "format": "byte",
              "properties": {
                "result": {},
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of protobufBytesValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2BinaryRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/Dump": {
      "post": {
        "operationId": "Debug_Dump",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "format": "byte",
              "properties": {
                "result": {},
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of protobufBytesValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2DumpRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/SetLogLevel": {
      "post": {
        "operationId": "Debug_SetLogLevel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/debug_v2SetLogLevelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2SetLogLevelRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/GetDumpV2Template": {
      "post": {
        "operationId": "Debug_GetDumpV2Template",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/debug_v2GetDumpV2TemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2GetDumpV2TemplateRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/DumpV2": {
      "post": {
        "operationId": "Debug_DumpV2",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/debug_v2DumpChunk"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of debug_v2DumpChunk"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2DumpV2Request"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/Trace": {
      "post": {
        "operationId": "Debug_Trace",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/debug_v2TraceChunk"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of debug_v2TraceChunk"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2TraceRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/RunPFSLoadTest": {
      "post": {
        "summary": "RunLoadTest runs a load test.",
        "operationId": "Debug_RunPFSLoadTest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/debug_v2RunPFSLoadTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/debug_v2RunPFSLoadTestRequest"
            }
          }
        ]
      }
    },
    "/debug_v2.Debug/RunPFSLoadTestDefault": {
      "post": {
        "summary": "RunLoadTestDefault runs the default load tests.",
        "operationId": "Debug_RunPFSLoadTestDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/debug_v2RunPFSLoadTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/Activate": {
      "post": {
        "summary": "Provide a Pachyderm enterprise token, enabling Pachyderm enterprise\nfeatures, such as the Pachyderm Dashboard and Auth system",
        "operationId": "API_Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2ActivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2ActivateRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/GetState": {
      "post": {
        "operationId": "API_GetState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2GetStateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2GetStateRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/GetActivationCode": {
      "post": {
        "operationId": "API_GetActivationCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2GetActivationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2GetActivationCodeRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/Heartbeat": {
      "post": {
        "summary": "Heartbeat is used in testing to trigger a heartbeat on demand. Normally this happens\non a timer.",
        "operationId": "API_Heartbeat",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2HeartbeatResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Heartbeat in the enterprise service just triggers a heartbeat for\ntesting purposes. The RPC used to communicate with the license\nservice is defined in the license service.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2HeartbeatRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/Deactivate": {
      "post": {
        "summary": "Deactivate removes a cluster's enterprise activation\ntoken and sets its enterprise state to NONE.",
        "operationId": "API_Deactivate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2DeactivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2DeactivateRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/Pause": {
      "post": {
        "summary": "Pause pauses the cluster.",
        "operationId": "API_Pause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2PauseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2PauseRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/Unpause": {
      "post": {
        "summary": "Unpause unpauses the cluser.",
        "operationId": "API_Unpause",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2UnpauseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2UnpauseRequest"
            }
          }
        ]
      }
    },
    "/enterprise_v2.API/PauseStatus": {
      "post": {
        "operationId": "API_PauseStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/enterprise_v2PauseStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/enterprise_v2PauseStatusRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/SetIdentityServerConfig": {
      "post": {
        "operationId": "API_SetIdentityServerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2SetIdentityServerConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2SetIdentityServerConfigRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/GetIdentityServerConfig": {
      "post": {
        "operationId": "API_GetIdentityServerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2GetIdentityServerConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2GetIdentityServerConfigRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/CreateIDPConnector": {
      "post": {
        "operationId": "API_CreateIDPConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2CreateIDPConnectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2CreateIDPConnectorRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/UpdateIDPConnector": {
      "post": {
        "operationId": "API_UpdateIDPConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2UpdateIDPConnectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2UpdateIDPConnectorRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/ListIDPConnectors": {
      "post": {
        "operationId": "API_ListIDPConnectors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2ListIDPConnectorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2ListIDPConnectorsRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/GetIDPConnector": {
      "post": {
        "operationId": "API_GetIDPConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2GetIDPConnectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2GetIDPConnectorRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/DeleteIDPConnector": {
      "post": {
        "operationId": "API_DeleteIDPConnector",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteIDPConnectorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteIDPConnectorRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/CreateOIDCClient": {
      "post": {
        "operationId": "API_CreateOIDCClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2CreateOIDCClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2CreateOIDCClientRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/UpdateOIDCClient": {
      "post": {
        "operationId": "API_UpdateOIDCClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2UpdateOIDCClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2UpdateOIDCClientRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/GetOIDCClient": {
      "post": {
        "operationId": "API_GetOIDCClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2GetOIDCClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2GetOIDCClientRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/ListOIDCClients": {
      "post": {
        "operationId": "API_ListOIDCClients",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2ListOIDCClientsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2ListOIDCClientsRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/DeleteOIDCClient": {
      "post": {
        "operationId": "API_DeleteOIDCClient",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteOIDCClientResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteOIDCClientRequest"
            }
          }
        ]
      }
    },
    "/identity_v2.API/DeleteAll": {
      "post": {
        "operationId": "API_DeleteAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/identity_v2DeleteAllRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/Activate": {
      "post": {
        "summary": "Activate enables the license service by setting the enterprise activation\ncode to serve.",
        "operationId": "API_Activate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2ActivateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2ActivateRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/GetActivationCode": {
      "post": {
        "operationId": "API_GetActivationCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2GetActivationCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2GetActivationCodeRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/DeleteAll": {
      "post": {
        "summary": "DeleteAll deactivates the server and removes all data.",
        "operationId": "API_DeleteAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2DeleteAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2DeleteAllRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/AddCluster": {
      "post": {
        "summary": "CRUD operations for the pachds registered with this server.",
        "operationId": "API_AddCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2AddClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2AddClusterRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/DeleteCluster": {
      "post": {
        "operationId": "API_DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2DeleteClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2DeleteClusterRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/ListClusters": {
      "post": {
        "operationId": "API_ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2ListClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2ListClustersRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/UpdateCluster": {
      "post": {
        "operationId": "API_UpdateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2UpdateClusterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Note: Updates of the enterprise-server field are not allowed. In the worst case, a user can recreate their cluster if they need the field updated.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2UpdateClusterRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/Heartbeat": {
      "post": {
        "summary": "Heartbeat is the RPC registered pachds make to the license server\nto communicate their status and fetch updates.",
        "operationId": "API_Heartbeat",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2HeartbeatResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2HeartbeatRequest"
            }
          }
        ]
      }
    },
    "/license_v2.API/ListUserClusters": {
      "post": {
        "summary": "Lists all clusters available to user",
        "operationId": "API_ListUserClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/license_v2ListUserClustersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/license_v2ListUserClustersRequest"
            }
          }
        ]
      }
    },
    "/logs.API/GetLogs": {
      "post": {
        "operationId": "API_GetLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/logsGetLogsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of logsGetLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/logsGetLogsRequest"
            }
          }
        ]
      }
    },
    "/metadata.API/EditMetadata": {
      "post": {
        "summary": "EditMetadata edits metadata according to the request.  All edits are applied atomically at\nonce.  All edits are attempted, but any failing edit fails the entire request.",
        "operationId": "API_EditMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/metadataEditMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "EditMetadataRequest is a sequence of edits to apply to metadata.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/metadataEditMetadataRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/CreateRepo": {
      "post": {
        "summary": "CreateRepo creates a new repo.",
        "operationId": "API_CreateRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateRepoRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectRepo": {
      "post": {
        "summary": "InspectRepo returns info about a repo.",
        "operationId": "API_InspectRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2RepoInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectRepoRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListRepo": {
      "post": {
        "summary": "ListRepo returns info about all repos.",
        "operationId": "API_ListRepo",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2RepoInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2RepoInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListRepoRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DeleteRepo": {
      "post": {
        "summary": "DeleteRepo deletes a repo.",
        "operationId": "API_DeleteRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteRepoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteRepoRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DeleteRepos": {
      "post": {
        "summary": "DeleteRepos deletes more than one repo at once.  It attempts to\ndelete every repo matching the DeleteReposRequest.  When deleting\nall repos matching a project, any repos not deletable by the\ncaller will remain, and the project will not be empty; this is\nnot an error.  The returned DeleteReposResponse will contain a\nlist of all actually-deleted repos.",
        "operationId": "API_DeleteRepos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteReposResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "DeleteReposRequest is used to delete more than one repo at once.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteReposRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/StartCommit": {
      "post": {
        "summary": "StartCommit creates a new write commit from a parent commit.",
        "operationId": "API_StartCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2Commit"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2StartCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/FinishCommit": {
      "post": {
        "summary": "FinishCommit turns a write commit into a read commit.",
        "operationId": "API_FinishCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2FinishCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ClearCommit": {
      "post": {
        "summary": "ClearCommit removes all data from the commit.",
        "operationId": "API_ClearCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ClearCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectCommit": {
      "post": {
        "summary": "InspectCommit returns the info about a commit.",
        "operationId": "API_InspectCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListCommit": {
      "post": {
        "summary": "ListCommit returns info about all commits.",
        "operationId": "API_ListCommit",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/SubscribeCommit": {
      "post": {
        "summary": "SubscribeCommit subscribes for new commits on a given branch.",
        "operationId": "API_SubscribeCommit",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2SubscribeCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/SquashCommit": {
      "post": {
        "summary": "SquashCommit squashes the provided commit into its children.",
        "operationId": "API_SquashCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2SquashCommitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2SquashCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DropCommit": {
      "post": {
        "summary": "DropCommit drops the provided commit.",
        "operationId": "API_DropCommit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2DropCommitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DropCommitRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectCommitSet": {
      "post": {
        "summary": "InspectCommitSet returns the info about a CommitSet.",
        "operationId": "API_InspectCommitSet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectCommitSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListCommitSet": {
      "post": {
        "summary": "ListCommitSet returns info about all CommitSets.",
        "operationId": "API_ListCommitSet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitSetInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitSetInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListCommitSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/SquashCommitSet": {
      "post": {
        "summary": "SquashCommitSet squashes the commits of a CommitSet into their children.\nDeprecated: Use SquashCommit instead.",
        "operationId": "API_SquashCommitSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2SquashCommitSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DropCommitSet": {
      "post": {
        "summary": "DropCommitSet drops the commits of a CommitSet and all data included in the commits.\nDeprecated: Use DropCommit instead.",
        "operationId": "API_DropCommitSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DropCommitSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/FindCommits": {
      "post": {
        "summary": "FindCommits searches for commits that reference a supplied file being modified in a branch.",
        "operationId": "API_FindCommits",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2FindCommitsResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2FindCommitsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2FindCommitsRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/WalkCommitProvenance": {
      "post": {
        "summary": "WalkCommitProvenance traverses a commit's provenance graph and streams back each commit encountered.",
        "operationId": "API_WalkCommitProvenance",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2WalkCommitProvenanceRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/WalkCommitSubvenance": {
      "post": {
        "summary": "WalkCommitSubvenance traverses a commit's subvenance graph and streams back each commit encountered.",
        "operationId": "API_WalkCommitSubvenance",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2CommitInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2WalkCommitSubvenanceRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/CreateBranch": {
      "post": {
        "summary": "CreateBranch creates a new branch.",
        "operationId": "API_CreateBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateBranchRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectBranch": {
      "post": {
        "summary": "InspectBranch returns info about a branch.",
        "operationId": "API_InspectBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2BranchInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectBranchRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListBranch": {
      "post": {
        "summary": "ListBranch returns info about the heads of branches.",
        "operationId": "API_ListBranch",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2BranchInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2BranchInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListBranchRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DeleteBranch": {
      "post": {
        "summary": "DeleteBranch deletes a branch; note that the commits still exist.",
        "operationId": "API_DeleteBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteBranchRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/WalkBranchProvenance": {
      "post": {
        "summary": "WalkBranchProvenance traverses a branch's provenance graph and streams back each branch encountered.",
        "operationId": "API_WalkBranchProvenance",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2BranchInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2BranchInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2WalkBranchProvenanceRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/WalkBranchSubvenance": {
      "post": {
        "summary": "WalkBranchSubvenance traverses a branch's subvenance graph and streams back each branch encountered.",
        "operationId": "API_WalkBranchSubvenance",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2BranchInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2BranchInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2WalkBranchSubvenanceRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ModifyFile": {
      "post": {
        "summary": "ModifyFile performs modifications on a set of files.",
        "operationId": "API_ModifyFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ModifyFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/GetFile": {
      "post": {
        "summary": "GetFile returns the contents of a single file",
        "operationId": "API_GetFile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "format": "byte",
              "properties": {
                "result": {},
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of protobufBytesValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2GetFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/GetFileTAR": {
      "post": {
        "summary": "GetFileTAR returns a TAR stream of the contents matched by the request",
        "operationId": "API_GetFileTAR",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "format": "byte",
              "properties": {
                "result": {},
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of protobufBytesValue"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2GetFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectFile": {
      "post": {
        "summary": "InspectFile returns info about a file.",
        "operationId": "API_InspectFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2FileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListFile": {
      "post": {
        "summary": "ListFile returns info about all files.",
        "operationId": "API_ListFile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2FileInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2FileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/WalkFile": {
      "post": {
        "summary": "WalkFile walks over all the files under a directory, including children of children.",
        "operationId": "API_WalkFile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2FileInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2FileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2WalkFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/GlobFile": {
      "post": {
        "summary": "GlobFile returns info about all files.",
        "operationId": "API_GlobFile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2FileInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2FileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2GlobFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DiffFile": {
      "post": {
        "summary": "DiffFile returns the differences between 2 paths at 2 commits.",
        "operationId": "API_DiffFile",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2DiffFileResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2DiffFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DiffFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ActivateAuth": {
      "post": {
        "summary": "ActivateAuth creates a role binding for all existing repos",
        "operationId": "API_ActivateAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2ActivateAuthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ActivateAuthRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DeleteAll": {
      "post": {
        "summary": "DeleteAll deletes everything.",
        "operationId": "API_DeleteAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pfs_v2.API/Fsck": {
      "post": {
        "summary": "Fsck does a file system consistency check for pfs.",
        "operationId": "API_Fsck",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2FsckResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2FsckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2FsckRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/CreateFileSet": {
      "post": {
        "summary": "FileSet API\nCreateFileSet creates a new file set.",
        "operationId": "API_CreateFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateFileSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ModifyFileRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/GetFileSet": {
      "post": {
        "summary": "GetFileSet returns a file set with the data from a commit",
        "operationId": "API_GetFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateFileSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2GetFileSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/AddFileSet": {
      "post": {
        "summary": "AddFileSet associates a file set with a commit",
        "operationId": "API_AddFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2AddFileSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/RenewFileSet": {
      "post": {
        "summary": "RenewFileSet prevents a file set from being deleted for a set amount of time.",
        "operationId": "API_RenewFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2RenewFileSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ComposeFileSet": {
      "post": {
        "summary": "ComposeFileSet composes a file set from a list of file sets.",
        "operationId": "API_ComposeFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateFileSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ComposeFileSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ShardFileSet": {
      "post": {
        "operationId": "API_ShardFileSet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2ShardFileSetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "If both num_files and size_bytes are set, shards are created\nbased on whichever threshold is surpassed first. If a shard\nconfiguration field (num_files, size_bytes) is unset, the\nstorage's default value is used.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ShardFileSetRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/CheckStorage": {
      "post": {
        "summary": "CheckStorage runs integrity checks for the storage layer.",
        "operationId": "API_CheckStorage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2CheckStorageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2CheckStorageRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/PutCache": {
      "post": {
        "operationId": "API_PutCache",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2PutCacheRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/GetCache": {
      "post": {
        "operationId": "API_GetCache",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2GetCacheResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2GetCacheRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ClearCache": {
      "post": {
        "operationId": "API_ClearCache",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ClearCacheRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListTask": {
      "post": {
        "summary": "ListTask lists PFS tasks",
        "operationId": "API_ListTask",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/taskapiTaskInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of taskapiTaskInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskapiListTaskRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/Egress": {
      "post": {
        "summary": "Egress writes data from a commit to an external system",
        "operationId": "API_Egress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2EgressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2EgressRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/CreateProject": {
      "post": {
        "summary": "Project API\nCreateProject creates a new project.",
        "operationId": "API_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2CreateProjectRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectProject": {
      "post": {
        "summary": "InspectProject returns info about a project.",
        "operationId": "API_InspectProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2ProjectInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectProjectRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/InspectProjectV2": {
      "post": {
        "summary": "InspectProjectV2 returns info about and defaults for a project.",
        "operationId": "API_InspectProjectV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectProjectV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2InspectProjectV2Request"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ListProject": {
      "post": {
        "summary": "ListProject returns info about all projects.",
        "operationId": "API_ListProject",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pfs_v2ProjectInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pfs_v2ProjectInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ListProjectRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/DeleteProject": {
      "post": {
        "summary": "DeleteProject deletes a project.",
        "operationId": "API_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2DeleteProjectRequest"
            }
          }
        ]
      }
    },
    "/pfs_v2.API/ReposSummary": {
      "post": {
        "summary": "Summary API\nReposSummary returns a list of summaries about the repos for each of the requested projects.",
        "operationId": "API_ReposSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pfs_v2ReposSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pfs_v2ReposSummaryRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/CreateJob": {
      "post": {
        "summary": "CreateJob creates a new job.\nChild jobs can be created by setting the context field to the appropriate parent job context.",
        "operationId": "API_CreateJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pjsCreateJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsCreateJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/CancelJob": {
      "post": {
        "summary": "CancelJob cancels a job.\nCanceling a job transitions all of the associated QUEUED and PROCESSING jobs to the DONE state and sets their error codes to CANCELED. \nThis will terminate all ongoing processing associated with the job.\nNothing will be deleted.\nA job can only be canceled with the parent job context.",
        "operationId": "API_CancelJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pjsCancelJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsCancelJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/DeleteJob": {
      "post": {
        "summary": "DeleteJob deletes a job.\nDeleteJob first cancels the job, then deletes all of the metadata and filesets associated with the job.\nA job can only be deleted with the parent job context.",
        "operationId": "API_DeleteJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pjsDeleteJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsDeleteJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/ListJob": {
      "post": {
        "summary": "ListJob returns a list of jobs and information about each job.\nThe jobs returned in the list are the child jobs of the provided job.\nIf no job is provided, the list is the child jobs of the provided job context.\nThe provided job must be associated with the provided job context or a descendant of the job associated with the provided job context.",
        "operationId": "API_ListJob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pjsListJobResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pjsListJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsListJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/WalkJob": {
      "post": {
        "summary": "WalkJob returns a list of jobs in a hierarchy and information about each job.\nWalking a job traverses the job hierarchy rooted at the provided job.\nThe provided job must be associated with the provided job context or a descendant of the job associated with the provided job context.",
        "operationId": "API_WalkJob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pjsListJobResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pjsListJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsWalkJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/InspectJob": {
      "post": {
        "summary": "InspectJob returns detailed information about a job.",
        "operationId": "API_InspectJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pjsInspectJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsInspectJobRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/ProcessQueue": {
      "post": {
        "summary": "ProcessQueue should be called by workers to process jobs in a queue.\nThe protocol is as follows:\n  Worker sends an initial request with the queue id.\n  For each job:\n    Server sends a response with a job context and the associated queue element.\n    Worker processes the job.\n    Worker sends a request with the job output or indicates that the job failed.\nThis RPC should generally be run indefinitely. Workers will be scaled based on demand, so the expectation is that they should be processing queues while they are up.\nThis RPC will be canceled by the server if the current job is canceled. Workers should generally retry the RPC when disconnects occur.",
        "operationId": "API_ProcessQueue",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pjsProcessQueueResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pjsProcessQueueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Queue Messages\nProcessQueueRequest is the client -\u003e server message for the bi-di ProcessQueue RPC. (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsProcessQueueRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/ListQueue": {
      "post": {
        "summary": "ListQueue returns a list of queues and information about each queue.",
        "operationId": "API_ListQueue",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pjsListQueueResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pjsListQueueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsListQueueRequest"
            }
          }
        ]
      }
    },
    "/pjs.API/InspectQueue": {
      "post": {
        "summary": "InspectQueue returns detailed information about a queue.",
        "operationId": "API_InspectQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pjsInspectQueueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pjsInspectQueueRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/InspectJob": {
      "post": {
        "operationId": "API_InspectJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2JobInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2InspectJobRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/InspectJobSet": {
      "post": {
        "operationId": "API_InspectJobSet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2JobInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2JobInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2InspectJobSetRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListJob": {
      "post": {
        "summary": "ListJob returns information about current and past Pachyderm jobs.",
        "operationId": "API_ListJob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2JobInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2JobInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2ListJobRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListJobSet": {
      "post": {
        "operationId": "API_ListJobSet",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2JobSetInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2JobSetInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2ListJobSetRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/SubscribeJob": {
      "post": {
        "operationId": "API_SubscribeJob",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2JobInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2JobInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2SubscribeJobRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/DeleteJob": {
      "post": {
        "operationId": "API_DeleteJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2DeleteJobRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/StopJob": {
      "post": {
        "operationId": "API_StopJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2StopJobRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/InspectDatum": {
      "post": {
        "operationId": "API_InspectDatum",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2DatumInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2InspectDatumRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListDatum": {
      "post": {
        "summary": "ListDatum returns information about each datum fed to a Pachyderm job",
        "operationId": "API_ListDatum",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2DatumInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2DatumInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2ListDatumRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/CreateDatum": {
      "post": {
        "summary": "CreateDatum prioritizes time to first datum. Each request returns a batch\nof datums.",
        "operationId": "API_CreateDatum",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2DatumInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2DatumInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Emits a stream of datums as they are created from the given input. Client\nmust cancel the stream when it no longer wants to receive datums. (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2CreateDatumRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RestartDatum": {
      "post": {
        "operationId": "API_RestartDatum",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RestartDatumRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RerunPipeline": {
      "post": {
        "operationId": "API_RerunPipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RerunPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/CreatePipeline": {
      "post": {
        "operationId": "API_CreatePipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2CreatePipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/CreatePipelineV2": {
      "post": {
        "operationId": "API_CreatePipelineV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2CreatePipelineV2Response"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2CreatePipelineV2Request"
            }
          }
        ]
      }
    },
    "/pps_v2.API/InspectPipeline": {
      "post": {
        "operationId": "API_InspectPipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2PipelineInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2InspectPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListPipeline": {
      "post": {
        "operationId": "API_ListPipeline",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2PipelineInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2PipelineInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2ListPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/DeletePipeline": {
      "post": {
        "operationId": "API_DeletePipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Delete a pipeline.  If the deprecated all member is true, then delete all\npipelines in the default project.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2DeletePipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/DeletePipelines": {
      "post": {
        "operationId": "API_DeletePipelines",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2DeletePipelinesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Delete more than one pipeline.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2DeletePipelinesRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/StartPipeline": {
      "post": {
        "operationId": "API_StartPipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2StartPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/StopPipeline": {
      "post": {
        "operationId": "API_StopPipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2StopPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RunPipeline": {
      "post": {
        "operationId": "API_RunPipeline",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RunPipelineRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RunCron": {
      "post": {
        "operationId": "API_RunCron",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RunCronRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/CheckStatus": {
      "post": {
        "summary": "Check Status returns the status of pipelines within a project.",
        "operationId": "API_CheckStatus",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2CheckStatusResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2CheckStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Request to check the status of pipelines within a project.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2CheckStatusRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/CreateSecret": {
      "post": {
        "operationId": "API_CreateSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2CreateSecretRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/DeleteSecret": {
      "post": {
        "operationId": "API_DeleteSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2DeleteSecretRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListSecret": {
      "post": {
        "operationId": "API_ListSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2SecretInfos"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pps_v2.API/InspectSecret": {
      "post": {
        "operationId": "API_InspectSecret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2SecretInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2InspectSecretRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/DeleteAll": {
      "post": {
        "summary": "DeleteAll deletes everything",
        "operationId": "API_DeleteAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pps_v2.API/GetLogs": {
      "post": {
        "operationId": "API_GetLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2LogMessage"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2LogMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2GetLogsRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ActivateAuth": {
      "post": {
        "summary": "An internal call that causes PPS to put itself into an auth-enabled state\n(all pipeline have tokens, correct permissions, etcd)",
        "operationId": "API_ActivateAuth",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2ActivateAuthResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2ActivateAuthRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/UpdateJobState": {
      "post": {
        "summary": "An internal call used to move a job from one state to another",
        "operationId": "API_UpdateJobState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2UpdateJobStateRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RunLoadTest": {
      "post": {
        "summary": "RunLoadTest runs a load test.",
        "operationId": "API_RunLoadTest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2RunLoadTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RunLoadTestRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/RunLoadTestDefault": {
      "post": {
        "summary": "RunLoadTestDefault runs the default load test.",
        "operationId": "API_RunLoadTestDefault",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2RunLoadTestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pps_v2.API/RenderTemplate": {
      "post": {
        "summary": "RenderTemplate renders the provided template and arguments into a list of Pipeline specicifications",
        "operationId": "API_RenderTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2RenderTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2RenderTemplateRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/ListTask": {
      "post": {
        "summary": "ListTask lists PPS tasks",
        "operationId": "API_ListTask",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/taskapiTaskInfo"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of taskapiTaskInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/taskapiListTaskRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/GetKubeEvents": {
      "post": {
        "summary": "GetKubeEvents returns a stream of kubernetes events",
        "operationId": "API_GetKubeEvents",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2LokiLogMessage"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2LokiLogMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2LokiRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/QueryLoki": {
      "post": {
        "summary": "QueryLoki returns a stream of loki log messages given a query string",
        "operationId": "API_QueryLoki",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pps_v2LokiLogMessage"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pps_v2LokiLogMessage"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2LokiRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/GetClusterDefaults": {
      "post": {
        "summary": "GetClusterDefaults returns the current cluster defaults.",
        "operationId": "API_GetClusterDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2GetClusterDefaultsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2GetClusterDefaultsRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/SetClusterDefaults": {
      "post": {
        "summary": "SetClusterDefaults returns the current cluster defaults.",
        "operationId": "API_SetClusterDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2SetClusterDefaultsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2SetClusterDefaultsRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/GetProjectDefaults": {
      "post": {
        "summary": "GetProjectDefaults returns the defaults for a particular project.",
        "operationId": "API_GetProjectDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2GetProjectDefaultsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2GetProjectDefaultsRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/SetProjectDefaults": {
      "post": {
        "summary": "SetProjectDefaults sets the defaults for a particular project.",
        "operationId": "API_SetProjectDefaults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2SetProjectDefaultsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2SetProjectDefaultsRequest"
            }
          }
        ]
      }
    },
    "/pps_v2.API/PipelinesSummary": {
      "post": {
        "summary": "PipelinesSummary summarizes the pipelines for each requested project.",
        "operationId": "API_PipelinesSummary",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2PipelinesSummaryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pps_v2PipelinesSummaryRequest"
            }
          }
        ]
      }
    },
    "/proxy.API/Listen": {
      "post": {
        "summary": "Listen streams database events.\nIt signals that it is internally set up by sending an initial empty ListenResponse.",
        "operationId": "API_Listen",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/proxyListenResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of proxyListenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/proxyListenRequest"
            }
          }
        ]
      }
    },
    "/storage.Fileset/CreateFileset": {
      "post": {
        "summary": "CreateFileset creates a fileset based on a stream of file modifications.\nA string identifier for the created fileset will be returned that can be used for subsequent fileset operations.\nFilesets have a fixed time-to-live (ttl), which is currently 10 minutes.\nFilesets needed longer than the ttl will need to be renewed.",
        "operationId": "Fileset_CreateFileset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageCreateFilesetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "A CreateFilesetRequest corresponds to a single file modification.\nSupported file modifications are append and delete.\nA put / overwrite file modification can be performed by a delete followed by an\nappend.\n TODO: Decide how to handle datums. (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageCreateFilesetRequest"
            }
          }
        ]
      }
    },
    "/storage.Fileset/ReadFileset": {
      "post": {
        "summary": "ReadFileset reads a fileset.",
        "operationId": "Fileset_ReadFileset",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/storageReadFilesetResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of storageReadFilesetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageReadFilesetRequest"
            }
          }
        ]
      }
    },
    "/storage.Fileset/RenewFileset": {
      "post": {
        "summary": "RenewFileset renews a fileset.",
        "operationId": "Fileset_RenewFileset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageRenewFilesetRequest"
            }
          }
        ]
      }
    },
    "/storage.Fileset/ComposeFileset": {
      "post": {
        "summary": "ComposeFileset composes a fileset.\nComposing a fileset involves combining one or more filesets into a single fileset.\nTODO: Explain how the filesets are layered and what that means for the order of file modifications.",
        "operationId": "Fileset_ComposeFileset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageComposeFilesetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageComposeFilesetRequest"
            }
          }
        ]
      }
    },
    "/storage.Fileset/ShardFileset": {
      "post": {
        "summary": "ShardFileset shards a fileset.\nThe shards of a fileset are returned as a list of path ranges that are disjoint\nand account for the full set of paths in the fileset.",
        "operationId": "Fileset_ShardFileset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/storageShardFilesetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "If both num_files and size_bytes are set, shards are created\nbased on whichever threshold is surpassed first. If a shard\nconfiguration field (num_files, size_bytes) is unset, the\nstorage's default value is used.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/storageShardFilesetRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/BatchTransaction": {
      "post": {
        "summary": "Transaction rpcs",
        "operationId": "API_BatchTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction_v2TransactionInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2BatchTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/StartTransaction": {
      "post": {
        "operationId": "API_StartTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction_v2Transaction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2StartTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/InspectTransaction": {
      "post": {
        "operationId": "API_InspectTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction_v2TransactionInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2InspectTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/DeleteTransaction": {
      "post": {
        "operationId": "API_DeleteTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2DeleteTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/ListTransaction": {
      "post": {
        "operationId": "API_ListTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction_v2TransactionInfos"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2ListTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/FinishTransaction": {
      "post": {
        "operationId": "API_FinishTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/transaction_v2TransactionInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2FinishTransactionRequest"
            }
          }
        ]
      }
    },
    "/transaction_v2.API/DeleteAll": {
      "post": {
        "operationId": "API_DeleteAll",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transaction_v2DeleteAllRequest"
            }
          }
        ]
      }
    },
    "/versionpb_v2.API/GetVersion": {
      "post": {
        "operationId": "API_GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/versionpb_v2Version"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pachyderm.worker.Worker/Status": {
      "post": {
        "operationId": "Worker_Status",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pps_v2WorkerStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ]
      }
    },
    "/pachyderm.worker.Worker/Cancel": {
      "post": {
        "operationId": "Worker_Cancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workerCancelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workerCancelRequest"
            }
          }
        ]
      }
    },
    "/pachyderm.worker.Worker/NextDatum": {
      "post": {
        "summary": "NextDatum should only be called by user code running in a pipeline with\ndatum batching enabled.\nNextDatum will signal to the worker code that the user code is ready to\nproceed to the next datum. This generally means setting up the next\ndatum's filesystem state and updating internal metadata similarly to datum\nprocessing in a normal pipeline.\nNextDatum is a synchronous operation, so user code should expect to block\non this until the next datum is set up for processing.\nUser code should generally be migratable to datum batching by wrapping it\nin a loop that calls next datum.",
        "operationId": "Worker_NextDatum",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/workerNextDatumResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "Error indicates that the processing of the current datum errored.\nDatum error semantics with datum batching enabled are similar to datum error\nsemantics without datum batching enabled in that the datum may be retried,\nrecovered, or result with a job failure.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/workerNextDatumRequest"
            }
          }
        ]
      }
    }
  },
  "definitions": {
    "AddFileURLSource": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "recursive": {
          "type": "boolean"
        },
        "concurrency": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "BranchPickerBranchName": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2RepoPicker"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CommitPickerAncestorOf": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "start": {
          "$ref": "#/definitions/pfs_v2CommitPicker"
        }
      },
      "description": "This models ^ syntax recursively."
    },
    "CommitPickerBranchRoot": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2BranchPicker"
        }
      },
      "description": "This models .N syntax."
    },
    "CommitPickerCommitByGlobalId": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2RepoPicker"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "DumpV2RequestDefaults": {
      "type": "object",
      "properties": {
        "clusterDefaults": {
          "type": "boolean",
          "description": "If true, include the cluster defaults."
        }
      }
    },
    "EditAddKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the metadata key to add.  It may not be the empty string."
        },
        "value": {
          "type": "string",
          "description": "value is the value to assign to the metadata key."
        }
      },
      "description": "AddKey is an operation that adds a new metadata key."
    },
    "EditDeleteKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the metadata key to remove.  It may not be the empty string."
        }
      },
      "description": "DeleteKey is an operation that removes a metadata key."
    },
    "EditEditKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the metadata key to change or add.  It may not be the empty string."
        },
        "value": {
          "type": "string",
          "description": "value is the value to assign to the metadata key."
        }
      },
      "description": "EditKey is an operation that changes or adds a metadata key."
    },
    "EditReplace": {
      "type": "object",
      "properties": {
        "replacement": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "replacement is the map to replace the object's metadata with."
        }
      },
      "description": "Replace is an operation that replaces metadata."
    },
    "EgressResponseObjectStorageResult": {
      "type": "object",
      "properties": {
        "bytesWritten": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "EgressResponseSQLDatabaseResult": {
      "type": "object",
      "properties": {
        "rowsWritten": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "GetFileSetRequestFileSetType": {
      "type": "string",
      "enum": [
        "TOTAL",
        "DIFF"
      ],
      "default": "TOTAL"
    },
    "PauseStatusResponsePauseStatus": {
      "type": "string",
      "enum": [
        "UNPAUSED",
        "PARTIALLY_PAUSED",
        "PAUSED"
      ],
      "default": "UNPAUSED"
    },
    "PipelineInfoPipelineType": {
      "type": "string",
      "enum": [
        "PIPELINT_TYPE_UNKNOWN",
        "PIPELINE_TYPE_TRANSFORM",
        "PIPELINE_TYPE_SPOUT",
        "PIPELINE_TYPE_SERVICE"
      ],
      "default": "PIPELINT_TYPE_UNKNOWN",
      "description": "The pipeline type is stored here so that we can internally know the type of\nthe pipeline without loading the spec from PFS."
    },
    "RepoPickerRepoName": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2ProjectPicker"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "type is optional. If omitted, the default type is 'user'."
        }
      }
    },
    "SQLDatabaseEgressFileFormat": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormatType"
        },
        "columns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SQLDatabaseEgressFileFormatType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CSV",
        "JSON",
        "PARQUET"
      ],
      "default": "UNKNOWN"
    },
    "admin_v2ClusterInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "deploymentId": {
          "type": "string"
        },
        "warningsOk": {
          "type": "boolean",
          "description": "True if the server is capable of generating warnings."
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Warnings about the client configuration."
        },
        "proxyHost": {
          "type": "string",
          "description": "The configured public URL of Pachyderm."
        },
        "proxyTls": {
          "type": "boolean",
          "description": "True if Pachyderm is served over TLS (HTTPS)."
        },
        "paused": {
          "type": "boolean",
          "description": "True if this pachd is in \"paused\" mode."
        },
        "webResources": {
          "$ref": "#/definitions/admin_v2WebResource",
          "description": "Any HTTP links that the client might want to be aware of."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cluster-level metadata."
        }
      }
    },
    "admin_v2InspectClusterRequest": {
      "type": "object",
      "properties": {
        "clientVersion": {
          "$ref": "#/definitions/versionpb_v2Version",
          "description": "The version of the client that's connecting; used by the server to warn about too-old (or\ntoo-new!) clients."
        },
        "currentProject": {
          "$ref": "#/definitions/pfs_v2Project",
          "description": "If CurrentProject is set, then InspectCluster will return an error if the\nproject does not exist."
        }
      }
    },
    "admin_v2WebResource": {
      "type": "object",
      "properties": {
        "archiveDownloadBaseUrl": {
          "type": "string",
          "description": "The base URL of the archive server; append a filename to this.  Empty if the archive server is\nnot exposed."
        },
        "createPipelineRequestJsonSchemaUrl": {
          "type": "string",
          "description": "Where to find the CreatePipelineRequest JSON schema; if this server is not accessible via a\nURL, then a link to Github is provided based on the baked-in version of the server."
        }
      },
      "description": "WebResource contains URL prefixes of common HTTP functions."
    },
    "auth_v2ActivateRequest": {
      "type": "object",
      "properties": {
        "rootToken": {
          "type": "string",
          "description": "If set, this token is used as the root user login token. Otherwise the root token\nis randomly generated and returned in the response."
        }
      },
      "description": "ActivateRequest enables authentication on the cluster. It issues an auth token\nwith no expiration for the irrevocable admin user `pach:root`."
    },
    "auth_v2ActivateResponse": {
      "type": "object",
      "properties": {
        "pachToken": {
          "type": "string",
          "title": "pach_token authenticates the caller with Pachyderm (if you want to perform\nPachyderm operations after auth has been activated as themselves, you must\npresent this token along with your regular request)"
        }
      }
    },
    "auth_v2AuthenticateRequest": {
      "type": "object",
      "properties": {
        "oidcState": {
          "type": "string",
          "description": "This is the session state that Pachyderm creates in order to keep track of\ninformation related to the current OIDC session."
        },
        "idToken": {
          "type": "string",
          "description": "This is an ID Token issued by the OIDC provider."
        }
      },
      "title": "Exactly one of 'id_token' or 'one_time_password' must be set:"
    },
    "auth_v2AuthenticateResponse": {
      "type": "object",
      "properties": {
        "pachToken": {
          "type": "string",
          "title": "pach_token authenticates the caller with Pachyderm (if you want to perform\nPachyderm operations after auth has been activated as themselves, you must\npresent this token along with your regular request)"
        }
      }
    },
    "auth_v2AuthorizeRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/auth_v2Resource"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "title": "permissions are the operations the caller is attempting to perform"
        }
      }
    },
    "auth_v2AuthorizeResponse": {
      "type": "object",
      "properties": {
        "authorized": {
          "type": "boolean",
          "title": "authorized is true if the caller has the require permissions"
        },
        "satisfied": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "title": "satisfied is the set of permission that the principal has"
        },
        "missing": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "title": "missing is the set of permissions that the principal lacks"
        },
        "principal": {
          "type": "string",
          "title": "principal is the principal the request was evaluated for"
        }
      }
    },
    "auth_v2DeactivateRequest": {
      "type": "object"
    },
    "auth_v2DeactivateResponse": {
      "type": "object"
    },
    "auth_v2DeleteExpiredAuthTokensRequest": {
      "type": "object"
    },
    "auth_v2DeleteExpiredAuthTokensResponse": {
      "type": "object"
    },
    "auth_v2ExtractAuthTokensRequest": {
      "type": "object",
      "description": "ExtractAuthTokens returns all the hashed robot tokens that have been issued.\nUser tokens are not extracted as they can be recreated by logging in."
    },
    "auth_v2ExtractAuthTokensResponse": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/auth_v2TokenInfo"
          }
        }
      }
    },
    "auth_v2GetConfigurationRequest": {
      "type": "object"
    },
    "auth_v2GetConfigurationResponse": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/auth_v2OIDCConfig"
        }
      }
    },
    "auth_v2GetGroupsForPrincipalRequest": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string"
        }
      }
    },
    "auth_v2GetGroupsRequest": {
      "type": "object"
    },
    "auth_v2GetGroupsResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth_v2GetOIDCLoginRequest": {
      "type": "object"
    },
    "auth_v2GetOIDCLoginResponse": {
      "type": "object",
      "properties": {
        "loginUrl": {
          "type": "string",
          "title": "The login URL generated for the OIDC object"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "auth_v2GetPermissionsForPrincipalRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/auth_v2Resource"
        },
        "principal": {
          "type": "string"
        }
      },
      "title": "GetPermissionsForPrincipal evaluates an arbitrary principal's permissions\non a resource"
    },
    "auth_v2GetPermissionsRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/auth_v2Resource"
        }
      },
      "title": "GetPermissions evaluates the current user's permissions on a resource"
    },
    "auth_v2GetPermissionsResponse": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "title": "permissions is the set of permissions the principal has"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles is the set of roles the principal has"
        }
      }
    },
    "auth_v2GetRobotTokenRequest": {
      "type": "object",
      "properties": {
        "robot": {
          "type": "string",
          "title": "The returned token will allow the caller to access resources as this\nrobot user"
        },
        "ttl": {
          "type": "string",
          "format": "int64",
          "title": "ttl indicates the requested (approximate) remaining lifetime of this token,\nin seconds"
        }
      }
    },
    "auth_v2GetRobotTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "A new auth token for the requested robot"
        }
      }
    },
    "auth_v2GetRoleBindingRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/auth_v2Resource"
        }
      }
    },
    "auth_v2GetRoleBindingResponse": {
      "type": "object",
      "properties": {
        "binding": {
          "$ref": "#/definitions/auth_v2RoleBinding"
        }
      }
    },
    "auth_v2GetRolesForPermissionRequest": {
      "type": "object",
      "properties": {
        "permission": {
          "$ref": "#/definitions/auth_v2Permission"
        }
      }
    },
    "auth_v2GetRolesForPermissionResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/auth_v2Role"
          }
        }
      }
    },
    "auth_v2GetUsersRequest": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        }
      }
    },
    "auth_v2GetUsersResponse": {
      "type": "object",
      "properties": {
        "usernames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth_v2ModifyMembersRequest": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "add": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth_v2ModifyMembersResponse": {
      "type": "object"
    },
    "auth_v2ModifyRoleBindingRequest": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/auth_v2Resource",
          "title": "resource is the resource to modify the role bindings on"
        },
        "principal": {
          "type": "string",
          "title": "principal is the principal to modify the roles binding for"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "roles is the set of roles for principal - an empty list\nremoves all role bindings"
        }
      }
    },
    "auth_v2ModifyRoleBindingResponse": {
      "type": "object"
    },
    "auth_v2OIDCConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "redirectUri": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "requireEmailVerified": {
          "type": "boolean"
        },
        "localhostIssuer": {
          "type": "boolean",
          "description": "localhost_issuer ignores the contents of the issuer claim and makes all\nOIDC requests to the embedded OIDC provider. This is necessary to support\nsome network configurations like Minikube."
        },
        "userAccessibleIssuerHost": {
          "type": "string",
          "description": "user_accessible_issuer_host can be set to override the host used\nin the OAuth2 authorization URL in case the OIDC issuer isn't\naccessible outside the cluster. This requires a fully formed URL with scheme of either http or https.\nThis is necessary to support some configurations like Minikube."
        }
      },
      "title": "Configure Pachyderm's auth system with an OIDC provider"
    },
    "auth_v2Permission": {
      "type": "string",
      "enum": [
        "PERMISSION_UNKNOWN",
        "CLUSTER_MODIFY_BINDINGS",
        "CLUSTER_GET_BINDINGS",
        "CLUSTER_GET_PACHD_LOGS",
        "CLUSTER_GET_LOKI_LOGS",
        "CLUSTER_AUTH_ACTIVATE",
        "CLUSTER_AUTH_DEACTIVATE",
        "CLUSTER_AUTH_GET_CONFIG",
        "CLUSTER_AUTH_SET_CONFIG",
        "CLUSTER_AUTH_GET_ROBOT_TOKEN",
        "CLUSTER_AUTH_MODIFY_GROUP_MEMBERS",
        "CLUSTER_AUTH_GET_GROUPS",
        "CLUSTER_AUTH_GET_GROUP_USERS",
        "CLUSTER_AUTH_EXTRACT_TOKENS",
        "CLUSTER_AUTH_RESTORE_TOKEN",
        "CLUSTER_AUTH_GET_PERMISSIONS_FOR_PRINCIPAL",
        "CLUSTER_AUTH_DELETE_EXPIRED_TOKENS",
        "CLUSTER_AUTH_REVOKE_USER_TOKENS",
        "CLUSTER_AUTH_ROTATE_ROOT_TOKEN",
        "CLUSTER_ENTERPRISE_ACTIVATE",
        "CLUSTER_ENTERPRISE_HEARTBEAT",
        "CLUSTER_ENTERPRISE_GET_CODE",
        "CLUSTER_ENTERPRISE_DEACTIVATE",
        "CLUSTER_ENTERPRISE_PAUSE",
        "CLUSTER_IDENTITY_SET_CONFIG",
        "CLUSTER_IDENTITY_GET_CONFIG",
        "CLUSTER_IDENTITY_CREATE_IDP",
        "CLUSTER_IDENTITY_UPDATE_IDP",
        "CLUSTER_IDENTITY_LIST_IDPS",
        "CLUSTER_IDENTITY_GET_IDP",
        "CLUSTER_IDENTITY_DELETE_IDP",
        "CLUSTER_IDENTITY_CREATE_OIDC_CLIENT",
        "CLUSTER_IDENTITY_UPDATE_OIDC_CLIENT",
        "CLUSTER_IDENTITY_LIST_OIDC_CLIENTS",
        "CLUSTER_IDENTITY_GET_OIDC_CLIENT",
        "CLUSTER_IDENTITY_DELETE_OIDC_CLIENT",
        "CLUSTER_DEBUG_DUMP",
        "CLUSTER_LICENSE_ACTIVATE",
        "CLUSTER_LICENSE_GET_CODE",
        "CLUSTER_LICENSE_ADD_CLUSTER",
        "CLUSTER_LICENSE_UPDATE_CLUSTER",
        "CLUSTER_LICENSE_DELETE_CLUSTER",
        "CLUSTER_LICENSE_LIST_CLUSTERS",
        "CLUSTER_CREATE_SECRET",
        "CLUSTER_LIST_SECRETS",
        "SECRET_DELETE",
        "SECRET_INSPECT",
        "CLUSTER_EDIT_CLUSTER_METADATA",
        "CLUSTER_DELETE_ALL",
        "REPO_READ",
        "REPO_WRITE",
        "REPO_MODIFY_BINDINGS",
        "REPO_DELETE",
        "REPO_INSPECT_COMMIT",
        "REPO_LIST_COMMIT",
        "REPO_DELETE_COMMIT",
        "REPO_CREATE_BRANCH",
        "REPO_LIST_BRANCH",
        "REPO_DELETE_BRANCH",
        "REPO_INSPECT_FILE",
        "REPO_LIST_FILE",
        "REPO_ADD_PIPELINE_READER",
        "REPO_REMOVE_PIPELINE_READER",
        "REPO_ADD_PIPELINE_WRITER",
        "PIPELINE_LIST_JOB",
        "CLUSTER_SET_DEFAULTS",
        "PROJECT_SET_DEFAULTS",
        "PROJECT_CREATE",
        "PROJECT_DELETE",
        "PROJECT_LIST_REPO",
        "PROJECT_CREATE_REPO",
        "PROJECT_MODIFY_BINDINGS"
      ],
      "default": "PERMISSION_UNKNOWN",
      "description": "- CLUSTER_CREATE_SECRET: TODO(actgardner): Make k8s secrets into nouns and add an Update RPC\n - CLUSTER_SET_DEFAULTS: CLUSTER_SET_DEFAULTS is part of PPS.\n - PROJECT_SET_DEFAULTS: PROJECT_SET_DEFAULTS is part of PPS.",
      "title": "Permission represents the ability to perform a given operation on a Resource"
    },
    "auth_v2Resource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/auth_v2ResourceType"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Resource represents any resource that has role-bindings in the system"
    },
    "auth_v2ResourceType": {
      "type": "string",
      "enum": [
        "RESOURCE_TYPE_UNKNOWN",
        "CLUSTER",
        "REPO",
        "SPEC_REPO",
        "PROJECT"
      ],
      "default": "RESOURCE_TYPE_UNKNOWN",
      "title": "ResourceType represents the type of a Resource"
    },
    "auth_v2RestoreAuthTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/auth_v2TokenInfo"
        }
      },
      "description": "RestoreAuthToken inserts a hashed token that has previously been extracted."
    },
    "auth_v2RestoreAuthTokenResponse": {
      "type": "object"
    },
    "auth_v2RevokeAuthTokenRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "auth_v2RevokeAuthTokenResponse": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "auth_v2RevokeAuthTokensForUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "auth_v2RevokeAuthTokensForUserResponse": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "auth_v2Role": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          }
        },
        "canBeBoundTo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2ResourceType"
          },
          "description": "Resources this role can be bound to.  For example, you can't apply clusterAdmin to a repo, so\nREPO would not be listed here."
        },
        "returnedFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2ResourceType"
          },
          "description": "Resources this role is returned for.  For example, a principal might have clusterAdmin\npermissions on the cluster, and this is what allows them to write to a repo.  So, clusterAdmin\nis returned for the repo, even though it cannot be bound to a repo."
        }
      }
    },
    "auth_v2RoleBinding": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/auth_v2Roles"
          },
          "description": "principal -\u003e roles. All principal names include the structured prefix indicating their type."
        }
      },
      "title": "RoleBinding represents the set of roles principals have on a given Resource"
    },
    "auth_v2Roles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "title": "Roles represents the set of roles a principal has"
    },
    "auth_v2RotateRootTokenRequest": {
      "type": "object",
      "properties": {
        "rootToken": {
          "type": "string",
          "description": "root_token is used as the new root token value. If it's unset, then a token will be auto-generated."
        }
      }
    },
    "auth_v2RotateRootTokenResponse": {
      "type": "object",
      "properties": {
        "rootToken": {
          "type": "string"
        }
      }
    },
    "auth_v2SetConfigurationRequest": {
      "type": "object",
      "properties": {
        "configuration": {
          "$ref": "#/definitions/auth_v2OIDCConfig"
        }
      }
    },
    "auth_v2SetConfigurationResponse": {
      "type": "object"
    },
    "auth_v2SetGroupsForUserRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "groups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "auth_v2SetGroupsForUserResponse": {
      "type": "object"
    },
    "auth_v2TokenInfo": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string",
          "description": "Subject (i.e. Pachyderm account) that a given token authorizes.\nSee the note at the top of the doc for an explanation of subject structure."
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        },
        "hashedToken": {
          "type": "string"
        }
      },
      "title": "TokenInfo is the 'value' of an auth token 'key' in the 'tokens' collection"
    },
    "auth_v2WhoAmIRequest": {
      "type": "object"
    },
    "auth_v2WhoAmIResponse": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "expiration": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "debug_v2App": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "pods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2Pod"
          }
        },
        "timeout": {
          "type": "string"
        },
        "pipeline": {
          "$ref": "#/definitions/debug_v2Pipeline"
        },
        "lokiArgs": {
          "$ref": "#/definitions/debug_v2LokiArgs"
        },
        "profileArgs": {
          "$ref": "#/definitions/debug_v2ProfileArgs"
        }
      }
    },
    "debug_v2BinaryRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/debug_v2Filter"
        }
      }
    },
    "debug_v2DumpChunk": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/debug_v2DumpContent"
        },
        "progress": {
          "$ref": "#/definitions/debug_v2DumpProgress"
        }
      }
    },
    "debug_v2DumpContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "debug_v2DumpProgress": {
      "type": "object",
      "properties": {
        "task": {
          "type": "string"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "progress": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "debug_v2DumpRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/debug_v2Filter"
        },
        "limit": {
          "type": "string",
          "format": "int64",
          "description": "Limit sets the limit for the number of commits / jobs that are returned for each repo / pipeline in the dump."
        }
      }
    },
    "debug_v2DumpV2Request": {
      "type": "object",
      "properties": {
        "system": {
          "$ref": "#/definitions/debug_v2System",
          "description": "Which system-level information to include in the debug dump."
        },
        "pipelines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2Pipeline"
          },
          "description": "Which pipelines to fetch information about and include in the debug dump."
        },
        "inputRepos": {
          "type": "boolean",
          "description": "If true, fetch information about non-output repos."
        },
        "timeout": {
          "type": "string",
          "description": "How long to run the dump for."
        },
        "defaults": {
          "$ref": "#/definitions/DumpV2RequestDefaults",
          "description": "Which defaults to include in the debug dump."
        },
        "starlarkScripts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2Starlark"
          },
          "description": "A list of Starlark scripts to run."
        }
      }
    },
    "debug_v2Filter": {
      "type": "object",
      "properties": {
        "pachd": {
          "type": "boolean"
        },
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "worker": {
          "$ref": "#/definitions/debug_v2Worker"
        },
        "database": {
          "type": "boolean"
        }
      }
    },
    "debug_v2GetDumpV2TemplateRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "debug_v2GetDumpV2TemplateResponse": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/debug_v2DumpV2Request"
        }
      }
    },
    "debug_v2LokiArgs": {
      "type": "object",
      "properties": {
        "maxLogs": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "debug_v2Pipeline": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "debug_v2Pod": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "debug_v2Profile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "title": "only meaningful if name == \"cpu\""
        }
      }
    },
    "debug_v2ProfileArgs": {
      "type": "object",
      "properties": {
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2Profile"
          }
        }
      }
    },
    "debug_v2ProfileRequest": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/debug_v2Profile"
        },
        "filter": {
          "$ref": "#/definitions/debug_v2Filter"
        }
      }
    },
    "debug_v2RunPFSLoadTestRequest": {
      "type": "object",
      "properties": {
        "spec": {
          "type": "string"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "seed": {
          "type": "string",
          "format": "int64"
        },
        "stateId": {
          "type": "string"
        }
      }
    },
    "debug_v2RunPFSLoadTestResponse": {
      "type": "object",
      "properties": {
        "spec": {
          "type": "string"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "seed": {
          "type": "string",
          "format": "int64"
        },
        "error": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "stateId": {
          "type": "string"
        }
      }
    },
    "debug_v2SetLogLevelRequest": {
      "type": "object",
      "properties": {
        "pachyderm": {
          "$ref": "#/definitions/debug_v2SetLogLevelRequestLogLevel"
        },
        "grpc": {
          "$ref": "#/definitions/debug_v2SetLogLevelRequestLogLevel"
        },
        "duration": {
          "type": "string"
        },
        "recurse": {
          "type": "boolean"
        }
      }
    },
    "debug_v2SetLogLevelRequestLogLevel": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DEBUG",
        "INFO",
        "ERROR",
        "OFF"
      ],
      "default": "UNKNOWN",
      "description": " - OFF: Only GRPC logs can be turned off."
    },
    "debug_v2SetLogLevelResponse": {
      "type": "object",
      "properties": {
        "affectedPods": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "erroredPods": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "debug_v2Starlark": {
      "type": "object",
      "properties": {
        "builtin": {
          "type": "string",
          "description": "One built into the pachd binary."
        },
        "literal": {
          "$ref": "#/definitions/debug_v2StarlarkLiteral",
          "description": "Or a script supplied in this request."
        },
        "timeout": {
          "type": "string",
          "description": "How long to allow the script to run for.  If unset, defaults to 1 minute."
        }
      },
      "description": "Starlark controls the running of a Starlark script."
    },
    "debug_v2StarlarkLiteral": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the script; used for debug messages and to control where the output goes."
        },
        "programText": {
          "type": "string",
          "description": "The text of the \"debugdump\" personality Starlark program."
        }
      },
      "description": "StarlarkLiteral is a custom Starlark script."
    },
    "debug_v2System": {
      "type": "object",
      "properties": {
        "helm": {
          "type": "boolean"
        },
        "database": {
          "type": "boolean"
        },
        "version": {
          "type": "boolean"
        },
        "describes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2App"
          }
        },
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2App"
          }
        },
        "lokiLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2App"
          }
        },
        "binaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2App"
          }
        },
        "profiles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/debug_v2App"
          }
        }
      }
    },
    "debug_v2TraceChunk": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "debug_v2TraceRequest": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        }
      }
    },
    "debug_v2Worker": {
      "type": "object",
      "properties": {
        "pod": {
          "type": "string"
        },
        "redirected": {
          "type": "boolean"
        }
      }
    },
    "enterprise_v2ActivateRequest": {
      "type": "object",
      "properties": {
        "licenseServer": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "enterprise_v2ActivateResponse": {
      "type": "object"
    },
    "enterprise_v2DeactivateRequest": {
      "type": "object"
    },
    "enterprise_v2DeactivateResponse": {
      "type": "object"
    },
    "enterprise_v2GetActivationCodeRequest": {
      "type": "object"
    },
    "enterprise_v2GetActivationCodeResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/enterprise_v2State"
        },
        "info": {
          "$ref": "#/definitions/enterprise_v2TokenInfo"
        },
        "activationCode": {
          "type": "string"
        }
      }
    },
    "enterprise_v2GetStateRequest": {
      "type": "object"
    },
    "enterprise_v2GetStateResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/enterprise_v2State"
        },
        "info": {
          "$ref": "#/definitions/enterprise_v2TokenInfo"
        },
        "activationCode": {
          "type": "string",
          "title": "activation_code will always be an empty string,\ncall GetEnterpriseCode to get the activation code"
        }
      }
    },
    "enterprise_v2HeartbeatRequest": {
      "type": "object",
      "description": "Heartbeat in the enterprise service just triggers a heartbeat for\ntesting purposes. The RPC used to communicate with the license\nservice is defined in the license service."
    },
    "enterprise_v2HeartbeatResponse": {
      "type": "object"
    },
    "enterprise_v2LicenseRecord": {
      "type": "object",
      "properties": {
        "activationCode": {
          "type": "string"
        },
        "expires": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "LicenseRecord is the record we store in etcd for a Pachyderm enterprise\ntoken that has been provided to a Pachyderm license server"
    },
    "enterprise_v2PauseRequest": {
      "type": "object"
    },
    "enterprise_v2PauseResponse": {
      "type": "object"
    },
    "enterprise_v2PauseStatusRequest": {
      "type": "object"
    },
    "enterprise_v2PauseStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/PauseStatusResponsePauseStatus"
        }
      }
    },
    "enterprise_v2State": {
      "type": "string",
      "enum": [
        "NONE",
        "ACTIVE",
        "EXPIRED",
        "HEARTBEAT_FAILED"
      ],
      "default": "NONE"
    },
    "enterprise_v2TokenInfo": {
      "type": "object",
      "properties": {
        "expires": {
          "type": "string",
          "format": "date-time",
          "title": "expires indicates when the current token expires (unset if there is no\ncurrent token)"
        }
      },
      "title": "TokenInfo contains information about the currently active enterprise token"
    },
    "enterprise_v2UnpauseRequest": {
      "type": "object"
    },
    "enterprise_v2UnpauseResponse": {
      "type": "object"
    },
    "identity_v2CreateIDPConnectorRequest": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/identity_v2IDPConnector"
        }
      }
    },
    "identity_v2CreateIDPConnectorResponse": {
      "type": "object"
    },
    "identity_v2CreateOIDCClientRequest": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/identity_v2OIDCClient"
        }
      }
    },
    "identity_v2CreateOIDCClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/identity_v2OIDCClient"
        }
      }
    },
    "identity_v2DeleteAllRequest": {
      "type": "object"
    },
    "identity_v2DeleteAllResponse": {
      "type": "object"
    },
    "identity_v2DeleteIDPConnectorRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "identity_v2DeleteIDPConnectorResponse": {
      "type": "object"
    },
    "identity_v2DeleteOIDCClientRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "identity_v2DeleteOIDCClientResponse": {
      "type": "object"
    },
    "identity_v2GetIDPConnectorRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "identity_v2GetIDPConnectorResponse": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/identity_v2IDPConnector"
        }
      }
    },
    "identity_v2GetIdentityServerConfigRequest": {
      "type": "object"
    },
    "identity_v2GetIdentityServerConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/identity_v2IdentityServerConfig"
        }
      }
    },
    "identity_v2GetOIDCClientRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "identity_v2GetOIDCClientResponse": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/identity_v2OIDCClient"
        }
      }
    },
    "identity_v2IDPConnector": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID is the unique identifier for this connector."
        },
        "name": {
          "type": "string",
          "description": "Name is the human-readable identifier for this connector,\nwhich will be shown to end users when they're authenticating."
        },
        "type": {
          "type": "string",
          "description": "Type is the type of the IDP ex. `saml`, `oidc`, `github`."
        },
        "configVersion": {
          "type": "string",
          "format": "int64",
          "description": "ConfigVersion must be incremented every time a connector is\nupdated, to avoid concurrent updates conflicting."
        },
        "jsonConfig": {
          "type": "string",
          "description": "This is left for backwards compatibility, but we want users to use the config defined below."
        },
        "config": {
          "type": "object",
          "description": "Config is the configuration for the upstream IDP, which varies based on the type.\nWe make the assumption that this is either yaml or JSON."
        }
      },
      "title": "IDPConnector represents a connection to an identity provider"
    },
    "identity_v2IdentityServerConfig": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string"
        },
        "idTokenExpiry": {
          "type": "string"
        },
        "rotationTokenExpiry": {
          "type": "string"
        }
      },
      "description": "IdentityServerConfig is the configuration for the identity web server.\nWhen the configuration is changed the web server is reloaded automatically."
    },
    "identity_v2ListIDPConnectorsRequest": {
      "type": "object"
    },
    "identity_v2ListIDPConnectorsResponse": {
      "type": "object",
      "properties": {
        "connectors": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identity_v2IDPConnector"
          }
        }
      }
    },
    "identity_v2ListOIDCClientsRequest": {
      "type": "object"
    },
    "identity_v2ListOIDCClientsResponse": {
      "type": "object",
      "properties": {
        "clients": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/identity_v2OIDCClient"
          }
        }
      }
    },
    "identity_v2OIDCClient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "redirectUris": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "trustedPeers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      }
    },
    "identity_v2SetIdentityServerConfigRequest": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/identity_v2IdentityServerConfig"
        }
      }
    },
    "identity_v2SetIdentityServerConfigResponse": {
      "type": "object"
    },
    "identity_v2UpdateIDPConnectorRequest": {
      "type": "object",
      "properties": {
        "connector": {
          "$ref": "#/definitions/identity_v2IDPConnector"
        }
      }
    },
    "identity_v2UpdateIDPConnectorResponse": {
      "type": "object"
    },
    "identity_v2UpdateOIDCClientRequest": {
      "type": "object",
      "properties": {
        "client": {
          "$ref": "#/definitions/identity_v2OIDCClient"
        }
      }
    },
    "identity_v2UpdateOIDCClientResponse": {
      "type": "object"
    },
    "license_v2ActivateRequest": {
      "type": "object",
      "properties": {
        "activationCode": {
          "type": "string",
          "title": "activation_code is a Pachyderm enterprise activation code. New users can\nobtain trial activation codes"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "description": "expires is a timestamp indicating when this activation code will expire.\nThis should not generally be set (it's primarily used for testing), and is\nonly applied if it's earlier than the signed expiration time in\n'activation_code'."
        }
      }
    },
    "license_v2ActivateResponse": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/enterprise_v2TokenInfo"
        }
      }
    },
    "license_v2AddClusterRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is the unique, immutable identifier for this cluster"
        },
        "address": {
          "type": "string",
          "title": "address is the public GPRC address where the cluster can be reached"
        },
        "secret": {
          "type": "string",
          "description": "If set, secret specifies the shared secret this cluster will use\nto authenticate to the license server. Otherwise a secret will be\ngenerated and returned in the response."
        },
        "userAddress": {
          "type": "string",
          "description": "The pachd address for users to connect to."
        },
        "clusterDeploymentId": {
          "type": "string",
          "title": "The deployment ID value generated by each Cluster"
        },
        "enterpriseServer": {
          "type": "boolean",
          "title": "This field indicates whether the address points to an enterprise server"
        }
      }
    },
    "license_v2AddClusterResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        }
      }
    },
    "license_v2ClusterStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "authEnabled": {
          "type": "boolean"
        },
        "clientId": {
          "type": "string"
        },
        "lastHeartbeat": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "license_v2DeleteAllRequest": {
      "type": "object"
    },
    "license_v2DeleteAllResponse": {
      "type": "object"
    },
    "license_v2DeleteClusterRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "license_v2DeleteClusterResponse": {
      "type": "object"
    },
    "license_v2GetActivationCodeRequest": {
      "type": "object"
    },
    "license_v2GetActivationCodeResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/enterprise_v2State"
        },
        "info": {
          "$ref": "#/definitions/enterprise_v2TokenInfo"
        },
        "activationCode": {
          "type": "string"
        }
      }
    },
    "license_v2HeartbeatRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "authEnabled": {
          "type": "boolean"
        },
        "clientId": {
          "type": "string"
        }
      }
    },
    "license_v2HeartbeatResponse": {
      "type": "object",
      "properties": {
        "license": {
          "$ref": "#/definitions/enterprise_v2LicenseRecord"
        }
      }
    },
    "license_v2ListClustersRequest": {
      "type": "object"
    },
    "license_v2ListClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/license_v2ClusterStatus"
          }
        }
      }
    },
    "license_v2ListUserClustersRequest": {
      "type": "object"
    },
    "license_v2ListUserClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/license_v2UserClusterInfo"
          }
        }
      }
    },
    "license_v2UpdateClusterRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "clusterDeploymentId": {
          "type": "string"
        },
        "secret": {
          "type": "string"
        }
      },
      "description": "Note: Updates of the enterprise-server field are not allowed. In the worst case, a user can recreate their cluster if they need the field updated."
    },
    "license_v2UpdateClusterResponse": {
      "type": "object"
    },
    "license_v2UserClusterInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "clusterDeploymentId": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "enterpriseServer": {
          "type": "boolean"
        }
      }
    },
    "logsAdminLogQuery": {
      "type": "object",
      "properties": {
        "logql": {
          "type": "string",
          "title": "Arbitrary LogQL query"
        },
        "pod": {
          "type": "string",
          "title": "A pod's logs (all containers)"
        },
        "podContainer": {
          "$ref": "#/definitions/logsPodContainer",
          "title": "One container"
        },
        "app": {
          "type": "string",
          "title": "One \"app\" (logql -\u003e {app=X})"
        },
        "master": {
          "$ref": "#/definitions/logsPipelineLogQuery",
          "title": "All master worker lines from a pipeline"
        },
        "storage": {
          "$ref": "#/definitions/logsPipelineLogQuery",
          "title": "All storage container lines from a pipeline"
        },
        "user": {
          "$ref": "#/definitions/logsUserLogQuery",
          "title": "All worker lines from a pipeline/job"
        }
      }
    },
    "logsGetLogsRequest": {
      "type": "object",
      "properties": {
        "query": {
          "$ref": "#/definitions/logsLogQuery"
        },
        "filter": {
          "$ref": "#/definitions/logsLogFilter"
        },
        "tail": {
          "type": "boolean"
        },
        "wantPagingHint": {
          "type": "boolean"
        }
      }
    },
    "logsGetLogsResponse": {
      "type": "object",
      "properties": {
        "pagingHint": {
          "$ref": "#/definitions/logsPagingHint"
        },
        "log": {
          "$ref": "#/definitions/logsLogMessage"
        }
      }
    },
    "logsJobDatumLogQuery": {
      "type": "object",
      "properties": {
        "job": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        }
      }
    },
    "logsLogFilter": {
      "type": "object",
      "properties": {
        "timeRange": {
          "$ref": "#/definitions/logsTimeRangeLogFilter"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "regex": {
          "$ref": "#/definitions/logsRegexLogFilter"
        },
        "level": {
          "$ref": "#/definitions/logsLogLevel",
          "title": "Minimum log level to return; worker will always run at level debug, but setting INFO here restores original behavior"
        }
      }
    },
    "logsLogLevel": {
      "type": "string",
      "enum": [
        "LOG_LEVEL_DEBUG",
        "LOG_LEVEL_INFO",
        "LOG_LEVEL_ERROR"
      ],
      "default": "LOG_LEVEL_DEBUG"
    },
    "logsLogMessage": {
      "type": "object",
      "properties": {
        "verbatim": {
          "$ref": "#/definitions/logsVerbatimLogMessage",
          "title": "The verbatim line from Loki"
        },
        "object": {
          "type": "object",
          "title": "A raw JSON parse of the entire line"
        },
        "nativeTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "If a parseable timestamp was found in `fields`"
        },
        "ppsLogMessage": {
          "$ref": "#/definitions/pps_v2LogMessage",
          "title": "For code that wants to filter on pipeline/job/etc"
        }
      }
    },
    "logsLogQuery": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/logsUserLogQuery"
        },
        "admin": {
          "$ref": "#/definitions/logsAdminLogQuery"
        }
      }
    },
    "logsPagingHint": {
      "type": "object",
      "properties": {
        "older": {
          "$ref": "#/definitions/logsGetLogsRequest"
        },
        "newer": {
          "$ref": "#/definitions/logsGetLogsRequest"
        }
      }
    },
    "logsPipelineJobLogQuery": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/logsPipelineLogQuery"
        },
        "job": {
          "type": "string"
        }
      }
    },
    "logsPipelineLogQuery": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "pipeline": {
          "type": "string"
        }
      }
    },
    "logsPodContainer": {
      "type": "object",
      "properties": {
        "pod": {
          "type": "string"
        },
        "container": {
          "type": "string"
        }
      }
    },
    "logsRegexLogFilter": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string"
        },
        "negate": {
          "type": "boolean"
        }
      }
    },
    "logsTimeRangeLogFilter": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "date-time",
          "title": "Can be null"
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "title": "Can be null"
        },
        "offset": {
          "type": "string",
          "format": "uint64",
          "title": "Offset from which to return results"
        }
      }
    },
    "logsUserLogQuery": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "title": "All pipelines in the project"
        },
        "pipeline": {
          "$ref": "#/definitions/logsPipelineLogQuery",
          "title": "One pipeline in a project"
        },
        "datum": {
          "type": "string",
          "description": "One datum."
        },
        "job": {
          "type": "string",
          "title": "One job, across pipelines and projects"
        },
        "pipelineJob": {
          "$ref": "#/definitions/logsPipelineJobLogQuery",
          "title": "One job in one pipeline"
        },
        "jobDatum": {
          "$ref": "#/definitions/logsJobDatumLogQuery",
          "title": "One datum in one job"
        }
      },
      "title": "Only returns \"user\" logs"
    },
    "logsVerbatimLogMessage": {
      "type": "object",
      "properties": {
        "line": {
          "type": "string",
          "format": "byte"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "metadataClusterPicker": {
      "type": "object",
      "description": "ClusterPicker selects a cluster.  Since clusters will never \"cascade\", there is only one cluster\nthat can be selected, the one running this API server."
    },
    "metadataEdit": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2ProjectPicker",
          "description": "project targets a named project's metadata."
        },
        "commit": {
          "$ref": "#/definitions/pfs_v2CommitPicker",
          "description": "commit targets a commit's metadata."
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2BranchPicker",
          "description": "branch targets a branch's metadata."
        },
        "repo": {
          "$ref": "#/definitions/pfs_v2RepoPicker",
          "description": "repo targets a repo's metadata."
        },
        "cluster": {
          "$ref": "#/definitions/metadataClusterPicker",
          "description": "cluster targets the cluster's metadata."
        },
        "replace": {
          "$ref": "#/definitions/EditReplace",
          "description": "replace replaces a target's metadata with a new metadata mapping."
        },
        "addKey": {
          "$ref": "#/definitions/EditAddKey",
          "description": "add_key adds a new key to the target object's metadata."
        },
        "editKey": {
          "$ref": "#/definitions/EditEditKey",
          "description": "edit_key adds or changes a key in the target object's metadata."
        },
        "deleteKey": {
          "$ref": "#/definitions/EditDeleteKey",
          "description": "delete_key removes a key from the target object's metadata."
        }
      },
      "description": "Edit represents editing one piece of metadata."
    },
    "metadataEditMetadataRequest": {
      "type": "object",
      "properties": {
        "edits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/metadataEdit"
          },
          "description": "edits is the ordered list of metadata edits to perform."
        }
      },
      "description": "EditMetadataRequest is a sequence of edits to apply to metadata."
    },
    "metadataEditMetadataResponse": {
      "type": "object",
      "description": "EditMetadataResponse is the result of editing metadata."
    },
    "pfs_v2ActivateAuthRequest": {
      "type": "object"
    },
    "pfs_v2ActivateAuthResponse": {
      "type": "object"
    },
    "pfs_v2AddFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        },
        "raw": {
          "type": "string",
          "format": "byte"
        },
        "url": {
          "$ref": "#/definitions/AddFileURLSource"
        }
      }
    },
    "pfs_v2AddFileSetRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "fileSetId": {
          "type": "string"
        }
      }
    },
    "pfs_v2AuthInfo": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/auth_v2Permission"
          },
          "description": "The callers access level to the relevant resource. These are very granular\npermissions - for the end user it makes sense to show them the roles\nthey have instead."
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The caller's roles on the relevant resource. This includes inherited\nroles from the cluster, project, group membership, etc."
        }
      },
      "title": "AuthInfo includes the caller's access scope for a resource, and is returned\nby services like ListRepo, InspectRepo, and ListProject, but is not persisted in the database.\nIt's used by the Pachyderm dashboard to render repo access appropriately.\nTo set a user's auth scope for a resource, use the Pachyderm Auth API (in src/auth/auth.proto)"
    },
    "pfs_v2Branch": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2BranchInfo": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "head": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "provenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "subvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "directProvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "pfs_v2BranchPicker": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/BranchPickerBranchName"
        }
      },
      "description": "BranchPicker defines mutually exclusive pickers that resolve to a single branch.\nCurrently, the only way to pick a branch is by composing a branch name with a repo.\nPicker messages should only be used as request parameters."
    },
    "pfs_v2CheckStorageRequest": {
      "type": "object",
      "properties": {
        "readChunkData": {
          "type": "boolean"
        },
        "chunkBegin": {
          "type": "string",
          "format": "byte"
        },
        "chunkEnd": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pfs_v2CheckStorageResponse": {
      "type": "object",
      "properties": {
        "chunkObjectCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pfs_v2ClearCacheRequest": {
      "type": "object",
      "properties": {
        "tagPrefix": {
          "type": "string"
        }
      }
    },
    "pfs_v2ClearCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        }
      }
    },
    "pfs_v2Commit": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "id": {
          "type": "string"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch",
          "title": "only used by the client"
        }
      },
      "title": "Commit is a reference to a commit (e.g. the collection of branches and the\ncollection of currently-open commits in etcd are collections of Commit\nprotos)"
    },
    "pfs_v2CommitInfo": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "origin": {
          "$ref": "#/definitions/pfs_v2CommitOrigin"
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided script describing this commit"
        },
        "parentCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "childCommits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "finishing": {
          "type": "string",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "format": "date-time"
        },
        "directProvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "directSubvenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "error": {
          "type": "string"
        },
        "sizeBytesUpperBound": {
          "type": "string",
          "format": "int64"
        },
        "details": {
          "$ref": "#/definitions/pfs_v2CommitInfoDetails"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata is user-applied annotations."
        }
      },
      "title": "CommitInfo is the main data structure representing a commit in postgres"
    },
    "pfs_v2CommitInfoDetails": {
      "type": "object",
      "properties": {
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "compactingTime": {
          "type": "string"
        },
        "validatingTime": {
          "type": "string"
        }
      },
      "title": "Details are only provided when explicitly requested"
    },
    "pfs_v2CommitOrigin": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/pfs_v2OriginKind"
        }
      }
    },
    "pfs_v2CommitPicker": {
      "type": "object",
      "properties": {
        "branchHead": {
          "$ref": "#/definitions/pfs_v2BranchPicker"
        },
        "id": {
          "$ref": "#/definitions/CommitPickerCommitByGlobalId"
        },
        "ancestor": {
          "$ref": "#/definitions/CommitPickerAncestorOf"
        },
        "branchRoot": {
          "$ref": "#/definitions/CommitPickerBranchRoot"
        }
      },
      "description": "CommitPicker defines mutually exclusive pickers that resolve to a single commit.\nCommits can be picked relatively from some other commit like a parent or start of branch.\nAlternatively, they can be picked via their global Id, which is composed of a repo picker and an id.\nPicker messages should only be used as request parameters."
    },
    "pfs_v2CommitSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "pfs_v2CommitSetInfo": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        },
        "commits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2CommitInfo"
          }
        }
      }
    },
    "pfs_v2CommitState": {
      "type": "string",
      "enum": [
        "COMMIT_STATE_UNKNOWN",
        "STARTED",
        "READY",
        "FINISHING",
        "FINISHED"
      ],
      "default": "COMMIT_STATE_UNKNOWN",
      "description": "CommitState describes the states a commit can be in.\nThe states are increasingly specific, i.e. a commit that is FINISHED also counts as STARTED.\n\n - STARTED: The commit has been started, all commits satisfy this state.\n - READY: The commit has been started, and all of its provenant commits have been finished.\n - FINISHING: The commit is in the process of being finished.\n - FINISHED: The commit has been finished."
    },
    "pfs_v2ComposeFileSetRequest": {
      "type": "object",
      "properties": {
        "fileSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttlSeconds": {
          "type": "string",
          "format": "int64"
        },
        "compact": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2CopyFile": {
      "type": "object",
      "properties": {
        "dst": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        },
        "src": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "append": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2CreateBranchRequest": {
      "type": "object",
      "properties": {
        "head": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "provenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger"
        },
        "newCommitSet": {
          "type": "boolean",
          "title": "overrides the default behavior of using the same CommitSet as 'head'"
        }
      }
    },
    "pfs_v2CreateFileSetResponse": {
      "type": "object",
      "properties": {
        "fileSetId": {
          "type": "string"
        }
      }
    },
    "pfs_v2CreateProjectRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "description": {
          "type": "string"
        },
        "update": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2CreateRepoRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "description": {
          "type": "string"
        },
        "update": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteBranchRequest": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        }
      }
    },
    "pfs_v2DeleteProjectRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteRepoRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DeleteRepoResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean",
          "description": "The repos that were deleted, perhaps none."
        }
      },
      "description": "DeleteRepoResponse returns the repos that were deleted by a DeleteRepo call."
    },
    "pfs_v2DeleteReposRequest": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "All repos in each project will be deleted if the caller has\npermission."
        },
        "force": {
          "type": "boolean"
        },
        "all": {
          "type": "boolean",
          "description": "If all is set, then all repos in all projects will be deleted if the caller\nhas permission."
        }
      },
      "description": "DeleteReposRequest is used to delete more than one repo at once."
    },
    "pfs_v2DeleteReposResponse": {
      "type": "object",
      "properties": {
        "repos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Repo"
          }
        }
      }
    },
    "pfs_v2DiffFileRequest": {
      "type": "object",
      "properties": {
        "newFile": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "oldFile": {
          "$ref": "#/definitions/pfs_v2File",
          "description": "OldFile may be left nil in which case the same path in the parent of\nNewFile's commit will be used."
        },
        "shallow": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2DiffFileResponse": {
      "type": "object",
      "properties": {
        "newFile": {
          "$ref": "#/definitions/pfs_v2FileInfo"
        },
        "oldFile": {
          "$ref": "#/definitions/pfs_v2FileInfo"
        }
      }
    },
    "pfs_v2DropCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "recursive": {
          "type": "boolean",
          "description": "Setting recursive to true indicates that the drop should be applied recursively to subvenant commits.\nIf recursive is set to false and the provided commit has subvenant commits, the drop will fail."
        }
      }
    },
    "pfs_v2DropCommitResponse": {
      "type": "object"
    },
    "pfs_v2DropCommitSetRequest": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        }
      }
    },
    "pfs_v2EgressRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "objectStorage": {
          "$ref": "#/definitions/pfs_v2ObjectStorageEgress"
        },
        "sqlDatabase": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgress"
        }
      }
    },
    "pfs_v2EgressResponse": {
      "type": "object",
      "properties": {
        "objectStorage": {
          "$ref": "#/definitions/EgressResponseObjectStorageResult"
        },
        "sqlDatabase": {
          "$ref": "#/definitions/EgressResponseSQLDatabaseResult"
        }
      }
    },
    "pfs_v2File": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "path": {
          "type": "string"
        },
        "datum": {
          "type": "string"
        }
      }
    },
    "pfs_v2FileInfo": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "fileType": {
          "$ref": "#/definitions/pfs_v2FileType"
        },
        "committed": {
          "type": "string",
          "format": "date-time"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        },
        "hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pfs_v2FileType": {
      "type": "string",
      "enum": [
        "RESERVED",
        "FILE",
        "DIR"
      ],
      "default": "RESERVED"
    },
    "pfs_v2FindCommitsRequest": {
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "filePath": {
          "type": "string"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "a limit of 0 means there is no upper bound on the limit."
        }
      }
    },
    "pfs_v2FindCommitsResponse": {
      "type": "object",
      "properties": {
        "foundCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "lastSearchedCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "commitsSearched": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "pfs_v2FinishCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided string describing this commit. Setting this\nwill overwrite the description set in StartCommit"
        },
        "error": {
          "type": "string"
        },
        "force": {
          "type": "boolean"
        }
      }
    },
    "pfs_v2FsckRequest": {
      "type": "object",
      "properties": {
        "fix": {
          "type": "boolean"
        },
        "zombieTarget": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "zombieAll": {
          "type": "boolean",
          "title": "run zombie data detection against all pipelines"
        }
      }
    },
    "pfs_v2FsckResponse": {
      "type": "object",
      "properties": {
        "fix": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "pfs_v2GetCacheRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "pfs_v2GetCacheResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "pfs_v2GetFileRequest": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "URL": {
          "type": "string"
        },
        "offset": {
          "type": "string",
          "format": "int64"
        },
        "pathRange": {
          "$ref": "#/definitions/pfs_v2PathRange",
          "title": "TODO:\n  int64 size_bytes = 3;"
        }
      }
    },
    "pfs_v2GetFileSetRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "type": {
          "$ref": "#/definitions/GetFileSetRequestFileSetType"
        }
      }
    },
    "pfs_v2GlobFileRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "pattern": {
          "type": "string"
        },
        "pathRange": {
          "$ref": "#/definitions/pfs_v2PathRange"
        }
      }
    },
    "pfs_v2InspectBranchRequest": {
      "type": "object",
      "properties": {
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        }
      }
    },
    "pfs_v2InspectCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "wait": {
          "$ref": "#/definitions/pfs_v2CommitState",
          "description": "Wait causes inspect commit to wait until the commit is in the desired state."
        }
      }
    },
    "pfs_v2InspectCommitSetRequest": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        },
        "wait": {
          "type": "boolean",
          "title": "When true, wait until all commits in the set are finished"
        }
      }
    },
    "pfs_v2InspectFileRequest": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File"
        }
      }
    },
    "pfs_v2InspectProjectRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2InspectProjectV2Request": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2InspectProjectV2Response": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/pfs_v2ProjectInfo"
        },
        "defaultsJson": {
          "type": "string"
        }
      }
    },
    "pfs_v2InspectRepoRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        }
      }
    },
    "pfs_v2ListBranchRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "reverse": {
          "type": "boolean",
          "title": "Returns branches oldest to newest"
        }
      }
    },
    "pfs_v2ListCommitRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "from": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "to": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "number": {
          "type": "string",
          "format": "int64"
        },
        "reverse": {
          "type": "boolean",
          "title": "Return commits oldest to newest"
        },
        "all": {
          "type": "boolean",
          "title": "Return commits of all kinds (without this, aliases are excluded)"
        },
        "originKind": {
          "$ref": "#/definitions/pfs_v2OriginKind",
          "title": "Return only commits of this kind (mutually exclusive with all)"
        },
        "startedTime": {
          "type": "string",
          "format": "date-time",
          "title": "Return commits started before this time"
        }
      }
    },
    "pfs_v2ListCommitSetRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2ListFileRequest": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File",
          "title": "File is the parent directory of the files we want to list. This sets the\nrepo, the commit/branch, and path prefix of files we're interested in\nIf the \"path\" field is omitted, a list of files at the top level of the repo\nis returned"
        },
        "paginationMarker": {
          "$ref": "#/definitions/pfs_v2File",
          "description": "Marker for pagination. If set, the files that come after the marker in\nlexicographical order will be returned. If reverse is also set, the files\nthat come before the marker in lexicographical order will be returned."
        },
        "number": {
          "type": "string",
          "format": "int64",
          "title": "Number of files to return"
        },
        "reverse": {
          "type": "boolean",
          "title": "If true, return files in reverse order"
        }
      }
    },
    "pfs_v2ListProjectRequest": {
      "type": "object"
    },
    "pfs_v2ListRepoRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type is the type of (system) repo that should be returned.\nAn empty string requests all repos."
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "Filters out repos whos project isn't represented.\nAn empty list of projects doesn't filter repos by their project."
        },
        "page": {
          "$ref": "#/definitions/pfs_v2RepoPage",
          "description": "Specifies which page of repos should be returned.\nIf page isn't specified, a single page containing all the relevant repos is returned."
        }
      }
    },
    "pfs_v2ModifyFileRequest": {
      "type": "object",
      "properties": {
        "setCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "addFile": {
          "$ref": "#/definitions/pfs_v2AddFile"
        },
        "deleteFile": {
          "$ref": "#/definitions/pfs_v2DeleteFile"
        },
        "copyFile": {
          "$ref": "#/definitions/pfs_v2CopyFile"
        }
      }
    },
    "pfs_v2ObjectStorageEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "pfs_v2OriginKind": {
      "type": "string",
      "enum": [
        "ORIGIN_KIND_UNKNOWN",
        "USER",
        "AUTO",
        "FSCK"
      ],
      "default": "ORIGIN_KIND_UNKNOWN",
      "title": "These are the different places where a commit may be originated from"
    },
    "pfs_v2PathRange": {
      "type": "object",
      "properties": {
        "lower": {
          "type": "string"
        },
        "upper": {
          "type": "string"
        }
      }
    },
    "pfs_v2Project": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "pfs_v2ProjectInfo": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "description": {
          "type": "string"
        },
        "authInfo": {
          "$ref": "#/definitions/pfs_v2AuthInfo"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "pfs_v2ProjectPicker": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "description": "ProjectPicker defines mutually exclusive pickers that resolve to a single project.\nCurrently, the only way to pick a project is by using a project name.\nPicker messages should only be used as request parameters."
    },
    "pfs_v2PutCacheRequest": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        },
        "fileSetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "pfs_v2RenewFileSetRequest": {
      "type": "object",
      "properties": {
        "fileSetId": {
          "type": "string"
        },
        "ttlSeconds": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pfs_v2Repo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pfs_v2RepoInfo": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "sizeBytesUpperBound": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "branches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Branch"
          }
        },
        "authInfo": {
          "$ref": "#/definitions/pfs_v2AuthInfo",
          "title": "Set by ListRepo and InspectRepo if Pachyderm's auth system is active, but\nnot stored in etcd. To set a user's auth scope for a repo, use the\nPachyderm Auth API (in src/client/auth/auth.proto)"
        },
        "details": {
          "$ref": "#/definitions/pfs_v2RepoInfoDetails"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata are user-defined key-value pairs."
        }
      },
      "title": "RepoInfo is the main data structure representing a Repo in etcd"
    },
    "pfs_v2RepoInfoDetails": {
      "type": "object",
      "properties": {
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Details are only provided when explicitly requested"
    },
    "pfs_v2RepoPage": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/pfs_v2RepoPageOrdering"
        },
        "pageSize": {
          "type": "string",
          "format": "int64"
        },
        "pageIndex": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pfs_v2RepoPageOrdering": {
      "type": "string",
      "enum": [
        "PROJECT_REPO"
      ],
      "default": "PROJECT_REPO"
    },
    "pfs_v2RepoPicker": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/RepoPickerRepoName"
        }
      },
      "description": "Repo defines mutually exclusive pickers that resolve to a single repository.\nCurrently, the only way to pick a repo is by composing a repo name and type with a project.\nIf the type is omitted, the 'user' type will be used as a default.\nPicker messages should only be used as request parameters."
    },
    "pfs_v2ReposSummary": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project",
          "title": "the project the ReposSummary corresponds to"
        },
        "userRepoCount": {
          "type": "string",
          "format": "int64",
          "title": "the count of user repos in the summary"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "title": "aggregate size of all the repos returned in the summary"
        }
      }
    },
    "pfs_v2ReposSummaryRequest": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2ProjectPicker"
          },
          "title": "a ReposSummary will be returned for every specified project"
        }
      }
    },
    "pfs_v2ReposSummaryResponse": {
      "type": "object",
      "properties": {
        "summaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2ReposSummary"
          },
          "title": "repo summaries for the requested projects"
        }
      }
    },
    "pfs_v2SQLDatabaseEgress": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "fileFormat": {
          "$ref": "#/definitions/SQLDatabaseEgressFileFormat"
        },
        "secret": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgressSecret"
        }
      }
    },
    "pfs_v2SQLDatabaseEgressSecret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "pfs_v2ShardFileSetRequest": {
      "type": "object",
      "properties": {
        "fileSetId": {
          "type": "string"
        },
        "numFiles": {
          "type": "string",
          "format": "int64",
          "title": "Number of files targeted in each shard"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "title": "Size (in bytes) targeted for each shard"
        }
      },
      "description": "If both num_files and size_bytes are set, shards are created\nbased on whichever threshold is surpassed first. If a shard\nconfiguration field (num_files, size_bytes) is unset, the\nstorage's default value is used."
    },
    "pfs_v2ShardFileSetResponse": {
      "type": "object",
      "properties": {
        "shards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2PathRange"
          }
        }
      }
    },
    "pfs_v2SquashCommitRequest": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "recursive": {
          "type": "boolean",
          "description": "Setting recursive to true indicates that the squash should be applied recursively to subvenant commits.\nIf recursive is set to false and the provided commit has subvenant commits, the squash will fail."
        }
      }
    },
    "pfs_v2SquashCommitResponse": {
      "type": "object"
    },
    "pfs_v2SquashCommitSetRequest": {
      "type": "object",
      "properties": {
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet"
        }
      }
    },
    "pfs_v2StartCommitRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/pfs_v2Commit",
          "description": "parent may be empty in which case the commit that Branch points to will be used as the parent.\nIf the branch does not exist, the commit will have no parent."
        },
        "description": {
          "type": "string",
          "title": "description is a user-provided string describing this commit"
        },
        "branch": {
          "$ref": "#/definitions/pfs_v2Branch"
        }
      }
    },
    "pfs_v2SubscribeCommitRequest": {
      "type": "object",
      "properties": {
        "repo": {
          "$ref": "#/definitions/pfs_v2Repo"
        },
        "branch": {
          "type": "string"
        },
        "from": {
          "$ref": "#/definitions/pfs_v2Commit",
          "title": "only commits created since this commit are returned"
        },
        "state": {
          "$ref": "#/definitions/pfs_v2CommitState",
          "description": "Don't return commits until they're in (at least) the desired state."
        },
        "all": {
          "type": "boolean",
          "title": "Return commits of all kinds (without this, aliases are excluded)"
        },
        "originKind": {
          "$ref": "#/definitions/pfs_v2OriginKind",
          "title": "Return only commits of this kind (mutually exclusive with all)"
        }
      }
    },
    "pfs_v2Trigger": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string",
          "title": "Which branch this trigger refers to"
        },
        "all": {
          "type": "boolean",
          "description": "All indicates that all conditions must be satisfied before the trigger\nhappens, otherwise any conditions being satisfied will trigger it."
        },
        "rateLimitSpec": {
          "type": "string",
          "description": "Triggers if the rate limit spec (cron expression) has been satisfied since\nthe last trigger."
        },
        "size": {
          "type": "string",
          "description": "Triggers if there's been `size` new data added since the last trigger."
        },
        "commits": {
          "type": "string",
          "format": "int64",
          "description": "Triggers if there's been `commits` new commits added since the last trigger."
        },
        "cronSpec": {
          "type": "string",
          "description": "Creates a background process which fires the trigger on the schedule\nprovided by the cron spec.\nThis condition is mutually exclusive with respect to the others, so\nsetting this will result with the trigger only firing based on the cron\nschedule."
        }
      },
      "description": "Trigger defines the conditions under which a head is moved, and to which\nbranch it is moved."
    },
    "pfs_v2WalkBranchProvenanceRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2BranchPicker"
          },
          "description": "if more than one picker is specified, the result stream is the concatenation of the streams of each picker."
        },
        "maxBranches": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 10,000 if unspecified"
        },
        "maxDepth": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 1000 if unspecified"
        }
      }
    },
    "pfs_v2WalkBranchSubvenanceRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2BranchPicker"
          },
          "description": "if more than one picker is specified, the result stream is the concatenation of the streams of each picker."
        },
        "maxBranches": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 10,000 if unspecified"
        },
        "maxDepth": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 1000 if unspecified"
        }
      }
    },
    "pfs_v2WalkCommitProvenanceRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2CommitPicker"
          },
          "description": "if more than one picker is specified, the result stream is the concatenation of the streams of each picker."
        },
        "maxCommits": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 10,000 if unspecified"
        },
        "maxDepth": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 1000 if unspecified"
        }
      }
    },
    "pfs_v2WalkCommitSubvenanceRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2CommitPicker"
          },
          "description": "if more than one picker is specified, the result stream is the concatenation of the streams of each picker."
        },
        "maxCommits": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 10,000 if unspecified"
        },
        "maxDepth": {
          "type": "string",
          "format": "uint64",
          "title": "defaults to 1000 if unspecified"
        }
      }
    },
    "pfs_v2WalkFileRequest": {
      "type": "object",
      "properties": {
        "file": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "paginationMarker": {
          "$ref": "#/definitions/pfs_v2File",
          "description": "Marker for pagination. If set, the files that come after the marker in\nlexicographical order will be returned. If reverse is also set, the files\nthat come before the marker in lexicographical order will be returned."
        },
        "number": {
          "type": "string",
          "format": "int64",
          "title": "Number of files to return"
        },
        "reverse": {
          "type": "boolean",
          "title": "If true, return files in reverse order"
        }
      }
    },
    "pjsCancelJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "job": {
          "$ref": "#/definitions/pjsJob"
        }
      }
    },
    "pjsCancelJobResponse": {
      "type": "object"
    },
    "pjsCreateJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "spec": {
          "$ref": "#/definitions/protobufAny"
        },
        "input": {
          "$ref": "#/definitions/pjsQueueElement"
        },
        "cacheRead": {
          "type": "boolean"
        },
        "cacheWrite": {
          "type": "boolean"
        }
      }
    },
    "pjsCreateJobResponse": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/pjsJob"
        }
      }
    },
    "pjsDeleteJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "job": {
          "$ref": "#/definitions/pjsJob"
        }
      }
    },
    "pjsDeleteJobResponse": {
      "type": "object"
    },
    "pjsInspectJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "job": {
          "$ref": "#/definitions/pjsJob",
          "description": "job is the job to start walking from.  If unset the context Job is assumed."
        }
      }
    },
    "pjsInspectJobResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/pjsJobInfoDetails"
        }
      }
    },
    "pjsInspectQueueRequest": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/pjsQueue"
        }
      }
    },
    "pjsInspectQueueResponse": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/pjsQueueInfoDetails"
        }
      }
    },
    "pjsJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Job uniquely identifies a Job\nJob will be nil to indicate no Job, or an unset Job."
    },
    "pjsJobErrorCode": {
      "type": "string",
      "enum": [
        "JobErrorCode_UNSPECIFIED",
        "FAILED",
        "DISCONNECTED",
        "CANCELED"
      ],
      "default": "JobErrorCode_UNSPECIFIED",
      "description": " - JobErrorCode_UNSPECIFIED: UNSPECIFIED means the job error code is unspecified.\n - FAILED: FAILED means that the worker processing the job indicated that it failed.\n - DISCONNECTED: DISCONNECTED means the worker processing the job disconnected.\n - CANCELED: CANCELED means the job was canceled."
    },
    "pjsJobInfo": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pjsJob",
          "title": "Job is the Job's identity"
        },
        "parentJob": {
          "$ref": "#/definitions/pjsJob",
          "description": "parent_job is the Job's parent if it exists."
        },
        "state": {
          "$ref": "#/definitions/pjsJobState",
          "description": "state is the Job's state.\nSee JobState for a description of the possible states."
        },
        "spec": {
          "$ref": "#/definitions/protobufAny",
          "description": "spec is the code specification for the Job."
        },
        "input": {
          "$ref": "#/definitions/pjsQueueElement",
          "description": "input is the input data for the Job."
        },
        "output": {
          "$ref": "#/definitions/pjsQueueElement",
          "title": "output is produced by a successfully completing Job"
        },
        "error": {
          "$ref": "#/definitions/pjsJobErrorCode",
          "title": "error is set when the Job is unable to complete successfully"
        }
      },
      "title": "JobInfo describes a Job"
    },
    "pjsJobInfoDetails": {
      "type": "object",
      "properties": {
        "jobInfo": {
          "$ref": "#/definitions/pjsJobInfo"
        }
      },
      "title": "JobInfoDetails is more detailed information about a Job.\nIt contains a superset of the information in JobInfo"
    },
    "pjsJobState": {
      "type": "string",
      "enum": [
        "JobState_UNSPECIFIED",
        "QUEUED",
        "PROCESSING",
        "DONE"
      ],
      "default": "JobState_UNSPECIFIED",
      "description": " - JobState_UNSPECIFIED: UNSPECIFIED means the job state is unspecified.\n - QUEUED: QUEUED means the job is currently in a queue.\nA QUEUED job will not have any descendants.\n - PROCESSING: PROCESSING means the job is currently being processed by a worker.\n - DONE: DONE means the job, and all of its descendants, are done."
    },
    "pjsListJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "job": {
          "$ref": "#/definitions/pjsJob",
          "description": "job is the job to start listing at.\nIf nil, then the listing starts at the first job in the natural ordering."
        }
      },
      "title": "TODO:\n- Filter\n- Paginate"
    },
    "pjsListJobResponse": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/pjsJob"
        },
        "info": {
          "$ref": "#/definitions/pjsJobInfo"
        },
        "details": {
          "$ref": "#/definitions/pjsJobInfoDetails"
        }
      },
      "description": "ListJobResponse lists information about Jobs\nID will always be set.\nInfo and Details may not be set depending on how much information was requested."
    },
    "pjsListQueueRequest": {
      "type": "object",
      "title": "TODO:\n- Filter\n- Paginate"
    },
    "pjsListQueueResponse": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/pjsQueue"
        },
        "info": {
          "$ref": "#/definitions/pjsQueueInfo"
        },
        "details": {
          "$ref": "#/definitions/pjsQueueInfoDetails"
        }
      }
    },
    "pjsProcessQueueRequest": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/pjsQueue",
          "description": "queue is set to start processing from a Queue."
        },
        "output": {
          "$ref": "#/definitions/pjsQueueElement",
          "description": "output is set by the client to complete the Job successfully."
        },
        "failed": {
          "type": "boolean",
          "description": "failed is set by the client to fail the Job.\nThe Job will transition to state DONE with code FAILED."
        }
      },
      "description": "Queue Messages\nProcessQueueRequest is the client -\u003e server message for the bi-di ProcessQueue RPC."
    },
    "pjsProcessQueueResponse": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used to act on behalf of the Job in other RPCs.\nThe server issues this token to the client, and the client should use it when performing Job RPCs."
        },
        "input": {
          "$ref": "#/definitions/pjsQueueElement",
          "description": "input is the input data for a Job.\nThe server sends this to ask the client to compute the output."
        }
      },
      "description": "ProcessQueueResposne is the server -\u003e client message for the bi-di ProcessQueue RPC."
    },
    "pjsQueue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "Queue uniquely identifies a Queue\nQueue will be nil to identify no Queue, or to indicate unset."
    },
    "pjsQueueElement": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string",
          "format": "byte",
          "title": "data is opaque data used as the input and output of Jobs"
        },
        "filesets": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "filesets is a list of Fileset handles, used to associate Filesets with the input and output of Jobs.\nAny of the filesets referenced here will be persisted for as long as this element is in a Queue.\nNew handles, pointing to equivalent Filesets, are minted whenever they cross the API boundary."
        }
      },
      "description": "QueueElement is a single element in a Queue."
    },
    "pjsQueueInfo": {
      "type": "object",
      "properties": {
        "queue": {
          "$ref": "#/definitions/pjsQueue",
          "title": "queue is the Queue's identity"
        },
        "spec": {
          "$ref": "#/definitions/protobufAny",
          "description": "spec specifies the code to be run to process the Queue."
        }
      },
      "title": "QueueInfo describes a Queue"
    },
    "pjsQueueInfoDetails": {
      "type": "object",
      "properties": {
        "queueInfo": {
          "$ref": "#/definitions/pjsQueueInfo"
        },
        "size": {
          "type": "string",
          "format": "int64",
          "description": "size is the number of elements queued."
        }
      },
      "description": "QueueInfoDetails contains detailed information about a Queue, which may be more expensive to get.\nIt contains a superset of the information in QueueInfo."
    },
    "pjsWalkJobRequest": {
      "type": "object",
      "properties": {
        "context": {
          "type": "string",
          "description": "context is a bearer token used when calling from within a running Job."
        },
        "job": {
          "$ref": "#/definitions/pjsJob",
          "description": "job is the job to start walking from.  If unset, the context Job is assumed."
        }
      }
    },
    "pps_v2ActivateAuthRequest": {
      "type": "object"
    },
    "pps_v2ActivateAuthResponse": {
      "type": "object"
    },
    "pps_v2CheckStatusRequest": {
      "type": "object",
      "properties": {
        "all": {
          "type": "boolean",
          "description": "boolean field indicating status of all project pipelines."
        },
        "project": {
          "$ref": "#/definitions/pfs_v2Project",
          "title": "project field"
        }
      },
      "description": "Request to check the status of pipelines within a project."
    },
    "pps_v2CheckStatusResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project",
          "title": "project field"
        },
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline",
          "title": "pipeline field"
        },
        "alerts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "alert indicators"
        }
      },
      "description": "Response for check status request. Provides alerts if any."
    },
    "pps_v2ContinueCreateDatumRequest": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "Number of datums to return in next batch. If 0, default batch size\nis returned."
        }
      }
    },
    "pps_v2CreateDatumRequest": {
      "type": "object",
      "properties": {
        "start": {
          "$ref": "#/definitions/pps_v2StartCreateDatumRequest"
        },
        "continue": {
          "$ref": "#/definitions/pps_v2ContinueCreateDatumRequest"
        }
      },
      "description": "Emits a stream of datums as they are created from the given input. Client\nmust cancel the stream when it no longer wants to receive datums."
    },
    "pps_v2CreatePipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "tfJob": {
          "$ref": "#/definitions/pps_v2TFJob",
          "title": "tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs\nwhen running in a kubernetes cluster on which kubeflow has been installed.\nExactly one of 'tf_job' and 'transform' should be set"
        },
        "transform": {
          "$ref": "#/definitions/pps_v2Transform"
        },
        "parallelismSpec": {
          "$ref": "#/definitions/pps_v2ParallelismSpec"
        },
        "egress": {
          "$ref": "#/definitions/pps_v2Egress"
        },
        "update": {
          "type": "boolean"
        },
        "outputBranch": {
          "type": "string"
        },
        "s3Out": {
          "type": "boolean",
          "title": "s3_out, if set, requires a pipeline's user to write to its output repo\nvia Pachyderm's s3 gateway (if set, workers will serve Pachyderm's s3\ngateway API at http://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.out/my/file).\nIn this mode /pfs_v2/out won't be walked or uploaded, and the s3 gateway\nservice in the workers will allow writes to the job's output commit"
        },
        "resourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "resourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "sidecarResourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "input": {
          "$ref": "#/definitions/pps_v2Input"
        },
        "description": {
          "type": "string"
        },
        "reprocess": {
          "type": "boolean",
          "title": "Reprocess forces the pipeline to reprocess all datums.\nIt only has meaning if Update is true"
        },
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        },
        "spout": {
          "$ref": "#/definitions/pps_v2Spout"
        },
        "datumSetSpec": {
          "$ref": "#/definitions/pps_v2DatumSetSpec"
        },
        "datumTimeout": {
          "type": "string"
        },
        "jobTimeout": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "datumTries": {
          "type": "string",
          "format": "int64"
        },
        "schedulingSpec": {
          "$ref": "#/definitions/pps_v2SchedulingSpec"
        },
        "podSpec": {
          "type": "string",
          "title": "deprecated, use pod_patch below"
        },
        "podPatch": {
          "type": "string",
          "title": "a json patch will be applied to the pipeline's pod_spec before it's created;"
        },
        "specCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "metadata": {
          "$ref": "#/definitions/pps_v2Metadata"
        },
        "reprocessSpec": {
          "type": "string"
        },
        "autoscaling": {
          "type": "boolean"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Toleration"
          }
        },
        "sidecarResourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "dryRun": {
          "type": "boolean"
        },
        "determined": {
          "$ref": "#/definitions/pps_v2Determined"
        },
        "maximumExpectedUptime": {
          "type": "string"
        }
      }
    },
    "pps_v2CreatePipelineTransaction": {
      "type": "object",
      "properties": {
        "createPipelineRequest": {
          "$ref": "#/definitions/pps_v2CreatePipelineRequest"
        },
        "userJson": {
          "type": "string",
          "title": "the JSON the user originally submitted"
        },
        "effectiveJson": {
          "type": "string",
          "title": "the effective spec: the result of merging the user JSON into the cluster defaults"
        }
      }
    },
    "pps_v2CreatePipelineV2Request": {
      "type": "object",
      "properties": {
        "createPipelineRequestJson": {
          "type": "string",
          "title": "a JSON-encoded CreatePipelineRequest"
        },
        "dryRun": {
          "type": "boolean"
        },
        "update": {
          "type": "boolean"
        },
        "reprocess": {
          "type": "boolean"
        }
      }
    },
    "pps_v2CreatePipelineV2Response": {
      "type": "object",
      "properties": {
        "effectiveCreatePipelineRequestJson": {
          "type": "string"
        }
      }
    },
    "pps_v2CreateSecretRequest": {
      "type": "object",
      "properties": {
        "file": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pps_v2CronInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "spec": {
          "type": "string"
        },
        "overwrite": {
          "type": "boolean",
          "description": "Overwrite, if true, will expose a single datum that gets overwritten each\ntick. If false, it will create a new datum for each tick."
        },
        "start": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pps_v2Datum": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job",
          "title": "ID is the hash computed from all the files"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "pps_v2DatumInfo": {
      "type": "object",
      "properties": {
        "datum": {
          "$ref": "#/definitions/pps_v2Datum"
        },
        "state": {
          "$ref": "#/definitions/pps_v2DatumState"
        },
        "stats": {
          "$ref": "#/definitions/pps_v2ProcessStats"
        },
        "pfsState": {
          "$ref": "#/definitions/pfs_v2File"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2FileInfo"
          }
        },
        "imageId": {
          "type": "string"
        }
      }
    },
    "pps_v2DatumSetSpec": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string",
          "format": "int64",
          "description": "number, if nonzero, specifies that each datum set should contain `number`\ndatums. Datum sets may contain fewer if the total number of datums don't\ndivide evenly."
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "description": "size_bytes, if nonzero, specifies a target size for each datum set.\nDatum sets may be larger or smaller than size_bytes, but will usually be\npretty close to size_bytes in size."
        },
        "perWorker": {
          "type": "string",
          "format": "int64",
          "description": "per_worker, if nonzero, specifies how many datum sets should be created\nfor each worker. It can't be set with number or size_bytes."
        }
      },
      "description": "DatumSetSpec specifies how a pipeline should split its datums into datum sets."
    },
    "pps_v2DatumState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "FAILED",
        "SUCCESS",
        "SKIPPED",
        "STARTING",
        "RECOVERED"
      ],
      "default": "UNKNOWN",
      "title": "- UNKNOWN: or not part of a job"
    },
    "pps_v2DatumStatus": {
      "type": "object",
      "properties": {
        "started": {
          "type": "string",
          "format": "date-time",
          "description": "Started is the time processing on the current datum began."
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2InputFile"
          }
        }
      }
    },
    "pps_v2DeleteJobRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        }
      }
    },
    "pps_v2DeletePipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "all": {
          "type": "boolean",
          "description": "Deprecated."
        },
        "force": {
          "type": "boolean"
        },
        "keepRepo": {
          "type": "boolean"
        },
        "mustExist": {
          "type": "boolean",
          "description": "If true, an error will be returned if the pipeline doesn't exist."
        }
      },
      "description": "Delete a pipeline.  If the deprecated all member is true, then delete all\npipelines in the default project."
    },
    "pps_v2DeletePipelinesRequest": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "All pipelines in each project will be deleted if the caller has\npermission."
        },
        "force": {
          "type": "boolean"
        },
        "keepRepo": {
          "type": "boolean"
        },
        "all": {
          "type": "boolean",
          "description": "If set, all pipelines in all projects will be deleted if the caller has\npermission."
        }
      },
      "description": "Delete more than one pipeline."
    },
    "pps_v2DeletePipelinesResponse": {
      "type": "object",
      "properties": {
        "pipelines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Pipeline"
          }
        }
      }
    },
    "pps_v2DeleteSecretRequest": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/pps_v2Secret"
        }
      }
    },
    "pps_v2Determined": {
      "type": "object",
      "properties": {
        "workspaces": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2Egress": {
      "type": "object",
      "properties": {
        "URL": {
          "type": "string"
        },
        "objectStorage": {
          "$ref": "#/definitions/pfs_v2ObjectStorageEgress"
        },
        "sqlDatabase": {
          "$ref": "#/definitions/pfs_v2SQLDatabaseEgress"
        }
      }
    },
    "pps_v2GPUSpec": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of GPU (nvidia.com/gpu or amd.com/gpu for example)."
        },
        "number": {
          "type": "string",
          "format": "int64",
          "description": "The number of GPUs to request."
        }
      }
    },
    "pps_v2GetClusterDefaultsRequest": {
      "type": "object"
    },
    "pps_v2GetClusterDefaultsResponse": {
      "type": "object",
      "properties": {
        "clusterDefaultsJson": {
          "type": "string",
          "description": "A JSON-encoded ClusterDefaults message, this is the verbatim input passed\nto SetClusterDefaults."
        }
      }
    },
    "pps_v2GetLogsRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline",
          "description": "The pipeline from which we want to get logs (required if the job in 'job'\nwas created as part of a pipeline. To get logs from a non-orphan job\nwithout the pipeline that created it, you need to use ElasticSearch)."
        },
        "job": {
          "$ref": "#/definitions/pps_v2Job",
          "description": "The job from which we want to get logs."
        },
        "dataFilters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Names of input files from which we want processing logs. This may contain\nmultiple files, to query pipelines that contain multiple inputs. Each\nfilter may be an absolute path of a file within a pps repo, or it may be\na hash for that file (to search for files at specific versions)"
        },
        "datum": {
          "$ref": "#/definitions/pps_v2Datum"
        },
        "master": {
          "type": "boolean",
          "title": "If true get logs from the master process"
        },
        "follow": {
          "type": "boolean",
          "description": "Continue to follow new logs as they become available."
        },
        "tail": {
          "type": "string",
          "format": "int64",
          "description": "If nonzero, the number of lines from the end of the logs to return.  Note:\ntail applies per container, so you will get tail * \u003cnumber of pods\u003e total\nlines back."
        },
        "useLokiBackend": {
          "type": "boolean",
          "description": "UseLokiBackend causes the logs request to go through the loki backend\nrather than through kubernetes. This behavior can also be achieved by\nsetting the LOKI_LOGGING feature flag."
        },
        "since": {
          "type": "string",
          "description": "Since specifies how far in the past to return logs from. It defaults to 24 hours."
        }
      }
    },
    "pps_v2GetProjectDefaultsRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        }
      }
    },
    "pps_v2GetProjectDefaultsResponse": {
      "type": "object",
      "properties": {
        "projectDefaultsJson": {
          "type": "string",
          "description": "A JSON-encoded ProjectDefaults message, this is the verbatim input passed\nto SetProjectDefaults."
        }
      }
    },
    "pps_v2Input": {
      "type": "object",
      "properties": {
        "pfs": {
          "$ref": "#/definitions/pps_v2PFSInput"
        },
        "join": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "group": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "cross": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "union": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Input"
          }
        },
        "cron": {
          "$ref": "#/definitions/pps_v2CronInput"
        }
      }
    },
    "pps_v2InputFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "This file's absolute path within its pfs repo."
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "This file's hash"
        }
      }
    },
    "pps_v2InspectDatumRequest": {
      "type": "object",
      "properties": {
        "datum": {
          "$ref": "#/definitions/pps_v2Datum"
        }
      }
    },
    "pps_v2InspectJobRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job",
          "description": "Callers should set either Job or OutputCommit, not both."
        },
        "wait": {
          "type": "boolean",
          "title": "wait until state is either FAILURE or SUCCESS"
        },
        "details": {
          "type": "boolean"
        }
      }
    },
    "pps_v2InspectJobSetRequest": {
      "type": "object",
      "properties": {
        "jobSet": {
          "$ref": "#/definitions/pps_v2JobSet"
        },
        "wait": {
          "type": "boolean",
          "title": "When true, wait until all jobs in the set are finished"
        },
        "details": {
          "type": "boolean"
        }
      }
    },
    "pps_v2InspectPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "details": {
          "type": "boolean",
          "description": "When true, return PipelineInfos with the details field, which requires\nloading the pipeline spec from PFS."
        }
      }
    },
    "pps_v2InspectSecretRequest": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/pps_v2Secret"
        }
      }
    },
    "pps_v2Job": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "pps_v2JobInfo": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "pipelineVersion": {
          "type": "string",
          "format": "uint64"
        },
        "outputCommit": {
          "$ref": "#/definitions/pfs_v2Commit"
        },
        "restart": {
          "type": "string",
          "format": "uint64",
          "title": "Job restart count (e.g. due to datum failure)"
        },
        "dataProcessed": {
          "type": "string",
          "format": "int64",
          "title": "Counts of how many times we processed or skipped a datum"
        },
        "dataSkipped": {
          "type": "string",
          "format": "int64"
        },
        "dataTotal": {
          "type": "string",
          "format": "int64"
        },
        "dataFailed": {
          "type": "string",
          "format": "int64"
        },
        "dataRecovered": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/pps_v2ProcessStats",
          "title": "Download/process/upload time and download/upload bytes"
        },
        "state": {
          "$ref": "#/definitions/pps_v2JobState"
        },
        "reason": {
          "type": "string",
          "title": "reason explains why the job is in the current state"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "finished": {
          "type": "string",
          "format": "date-time"
        },
        "details": {
          "$ref": "#/definitions/pps_v2JobInfoDetails"
        },
        "authToken": {
          "type": "string"
        }
      },
      "description": "JobInfo is the data stored in the database regarding a given job.  The\n'details' field contains more information about the job which is expensive to\nfetch, requiring querying workers or loading the pipeline spec from object\nstorage."
    },
    "pps_v2JobInfoDetails": {
      "type": "object",
      "properties": {
        "transform": {
          "$ref": "#/definitions/pps_v2Transform"
        },
        "parallelismSpec": {
          "$ref": "#/definitions/pps_v2ParallelismSpec"
        },
        "egress": {
          "$ref": "#/definitions/pps_v2Egress"
        },
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        },
        "spout": {
          "$ref": "#/definitions/pps_v2Spout"
        },
        "workerStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2WorkerStatus"
          }
        },
        "resourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "resourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "sidecarResourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "input": {
          "$ref": "#/definitions/pps_v2Input"
        },
        "salt": {
          "type": "string"
        },
        "datumSetSpec": {
          "$ref": "#/definitions/pps_v2DatumSetSpec"
        },
        "datumTimeout": {
          "type": "string"
        },
        "jobTimeout": {
          "type": "string"
        },
        "datumTries": {
          "type": "string",
          "format": "int64"
        },
        "schedulingSpec": {
          "$ref": "#/definitions/pps_v2SchedulingSpec"
        },
        "podSpec": {
          "type": "string"
        },
        "podPatch": {
          "type": "string"
        },
        "sidecarResourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        }
      }
    },
    "pps_v2JobSet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "pps_v2JobSetInfo": {
      "type": "object",
      "properties": {
        "jobSet": {
          "$ref": "#/definitions/pps_v2JobSet"
        },
        "jobs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2JobInfo"
          }
        }
      }
    },
    "pps_v2JobState": {
      "type": "string",
      "enum": [
        "JOB_STATE_UNKNOWN",
        "JOB_CREATED",
        "JOB_STARTING",
        "JOB_RUNNING",
        "JOB_FAILURE",
        "JOB_SUCCESS",
        "JOB_KILLED",
        "JOB_EGRESSING",
        "JOB_FINISHING",
        "JOB_UNRUNNABLE"
      ],
      "default": "JOB_STATE_UNKNOWN"
    },
    "pps_v2ListDatumRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job",
          "description": "Job and Input are two different ways to specify the datums you want.\nOnly one can be set.\nJob is the job to list datums from."
        },
        "input": {
          "$ref": "#/definitions/pps_v2Input",
          "description": "Input is the input to list datums from.\nThe datums listed are the ones that would be run if a pipeline was created\nwith the provided input."
        },
        "filter": {
          "$ref": "#/definitions/pps_v2ListDatumRequestFilter"
        },
        "paginationMarker": {
          "type": "string",
          "title": "datum id to start from. we do not include this datum in the response"
        },
        "number": {
          "type": "string",
          "format": "int64",
          "title": "Number of datums to return"
        },
        "reverse": {
          "type": "boolean",
          "title": "If true, return datums in reverse order"
        }
      }
    },
    "pps_v2ListDatumRequestFilter": {
      "type": "object",
      "properties": {
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pps_v2DatumState"
          },
          "description": "Must match one of the given states."
        }
      },
      "description": "Filter restricts returned DatumInfo messages to those which match\nall of the filtered attributes."
    },
    "pps_v2ListJobRequest": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "A list of projects to filter jobs on, nil means don't filter."
        },
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline",
          "title": "nil means all pipelines"
        },
        "inputCommit": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          },
          "title": "nil means all inputs"
        },
        "history": {
          "type": "string",
          "format": "int64",
          "description": "History indicates return jobs from historical versions of pipelines\nsemantics are:\n0: Return jobs from the current version of the pipeline or pipelines.\n1: Return the above and jobs from the next most recent version\n2: etc.\n-1: Return jobs from all historical versions."
        },
        "details": {
          "type": "boolean",
          "title": "Details indicates whether the result should include all pipeline details in\neach JobInfo, or limited information including name and status, but\nexcluding information in the pipeline spec. Leaving this \"false\" can make\nthe call significantly faster in clusters with a large number of pipelines\nand jobs.\nNote that if 'input_commit' is set, this field is coerced to \"true\""
        },
        "jqFilter": {
          "type": "string",
          "title": "A jq program string for additional result filtering"
        },
        "paginationMarker": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp that is pagination marker"
        },
        "number": {
          "type": "string",
          "format": "int64",
          "title": "number of results to return"
        },
        "reverse": {
          "type": "boolean",
          "title": "flag to indicated if results should be returned in reverse order"
        }
      }
    },
    "pps_v2ListJobSetRequest": {
      "type": "object",
      "properties": {
        "details": {
          "type": "boolean"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "A list of projects to filter jobs on, nil means don't filter."
        },
        "paginationMarker": {
          "type": "string",
          "format": "date-time",
          "title": "we return job sets created before or after this time based on the reverse flag"
        },
        "number": {
          "type": "string",
          "format": "int64",
          "title": "number of results to return"
        },
        "reverse": {
          "type": "boolean",
          "title": "if true, return results in reverse order"
        },
        "jqFilter": {
          "type": "string",
          "title": "A jq program string for additional result filtering"
        }
      }
    },
    "pps_v2ListPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline",
          "description": "If non-nil, only return info about a single pipeline, this is redundant\nwith InspectPipeline unless history is non-zero."
        },
        "history": {
          "type": "string",
          "format": "int64",
          "description": "History indicates how many historical versions you want returned. Its\nsemantics are:\n0: Return the current version of the pipeline or pipelines.\n1: Return the above and the next most recent version\n2: etc.\n-1: Return all historical versions."
        },
        "details": {
          "type": "boolean",
          "description": "Deprecated: Details are always returned."
        },
        "jqFilter": {
          "type": "string",
          "title": "A jq program string for additional result filtering"
        },
        "commitSet": {
          "$ref": "#/definitions/pfs_v2CommitSet",
          "title": "If non-nil, will return all the pipeline infos at this commit set"
        },
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Project"
          },
          "description": "Projects to filter on. Empty list means no filter, so return all pipelines."
        },
        "page": {
          "$ref": "#/definitions/pps_v2PipelinePage",
          "description": "Page indicates which page of a certain size to return. If page is left empty,\nall of the selected pipelines will be returned."
        }
      }
    },
    "pps_v2LogMessage": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string",
          "title": "The job and pipeline for which a PFS file is being processed (if the job\nis an orphan job, pipeline name and ID will be unset)"
        },
        "pipelineName": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        },
        "workerId": {
          "type": "string"
        },
        "datumId": {
          "type": "string"
        },
        "master": {
          "type": "boolean"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2InputFile"
          },
          "title": "The PFS files being processed (one per pipeline/job input)"
        },
        "user": {
          "type": "boolean",
          "description": "User is true if log message comes from the users code."
        },
        "ts": {
          "type": "string",
          "format": "date-time",
          "title": "The message logged, and the time at which it was logged"
        },
        "message": {
          "type": "string"
        }
      },
      "description": "LogMessage is a log line from a PPS worker, annotated with metadata\nindicating when and why the line was logged."
    },
    "pps_v2LokiLogMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "pps_v2LokiRequest": {
      "type": "object",
      "properties": {
        "since": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "pps_v2Metadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2PFSInput": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "repo": {
          "type": "string"
        },
        "repoType": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "glob": {
          "type": "string"
        },
        "joinOn": {
          "type": "string"
        },
        "outerJoin": {
          "type": "boolean"
        },
        "groupBy": {
          "type": "string"
        },
        "lazy": {
          "type": "boolean"
        },
        "emptyFiles": {
          "type": "boolean",
          "description": "EmptyFiles, if true, will cause files from this PFS input to be\npresented as empty files. This is useful in shuffle pipelines where you\nwant to read the names of files and reorganize them using symlinks."
        },
        "s3": {
          "type": "boolean",
          "title": "S3, if true, will cause the worker to NOT download or link files from this\ninput into the /pfs_v2 directory. Instead, an instance of our S3 gateway\nservice will run on each of the sidecars, and data can be retrieved from\nthis input by querying\nhttp://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.\u003cinput\u003e/my/file"
        },
        "trigger": {
          "$ref": "#/definitions/pfs_v2Trigger",
          "description": "Trigger defines when this input is processed by the pipeline, if it's nil\nthe input is processed anytime something is committed to the input branch."
        }
      }
    },
    "pps_v2ParallelismSpec": {
      "type": "object",
      "properties": {
        "constant": {
          "type": "string",
          "format": "uint64",
          "title": "Starts the pipeline/job with a 'constant' workers, unless 'constant' is\nzero. If 'constant' is zero (which is the zero value of ParallelismSpec),\nthen Pachyderm will choose the number of workers that is started,\n(currently it chooses the number of workers in the cluster)"
        }
      }
    },
    "pps_v2Pipeline": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "pps_v2PipelineInfo": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "specCommit": {
          "$ref": "#/definitions/pfs_v2Commit",
          "title": "The first spec commit for this version of the pipeline"
        },
        "stopped": {
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/pps_v2PipelineState",
          "title": "state indicates the current state of the pipeline"
        },
        "reason": {
          "type": "string",
          "title": "reason includes any error messages associated with a failed pipeline"
        },
        "lastJobState": {
          "$ref": "#/definitions/pps_v2JobState",
          "title": "last_job_state indicates the state of the most recently created job"
        },
        "parallelism": {
          "type": "string",
          "format": "uint64",
          "description": "parallelism tracks the literal number of workers that this pipeline should\nrun."
        },
        "type": {
          "$ref": "#/definitions/PipelineInfoPipelineType"
        },
        "authToken": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/pps_v2PipelineInfoDetails"
        },
        "userSpecJson": {
          "type": "string",
          "description": "The user-submitted pipeline spec in JSON format."
        },
        "effectiveSpecJson": {
          "type": "string",
          "description": "The effective spec used to create the pipeline.  Created by merging the user spec into the cluster defaults."
        }
      },
      "description": "PipelineInfo is proto for each pipeline that Pachd stores in the\ndatabase. It tracks the state of the pipeline, and points to its metadata in\nPFS (and, by pointing to a PFS commit, de facto tracks the pipeline's\nversion).  Any information about the pipeline _not_ stored in the database is\nin the Details object, which requires fetching the spec from PFS or other\npotentially expensive operations."
    },
    "pps_v2PipelineInfoDetails": {
      "type": "object",
      "properties": {
        "transform": {
          "$ref": "#/definitions/pps_v2Transform"
        },
        "tfJob": {
          "$ref": "#/definitions/pps_v2TFJob",
          "title": "tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs\nwhen running in a kubernetes cluster on which kubeflow has been installed.\nExactly one of 'tf_job' and 'transform' should be set"
        },
        "parallelismSpec": {
          "$ref": "#/definitions/pps_v2ParallelismSpec"
        },
        "egress": {
          "$ref": "#/definitions/pps_v2Egress"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "recentError": {
          "type": "string"
        },
        "workersRequested": {
          "type": "string",
          "format": "int64"
        },
        "workersAvailable": {
          "type": "string",
          "format": "int64"
        },
        "outputBranch": {
          "type": "string"
        },
        "resourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "resourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "sidecarResourceLimits": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "input": {
          "$ref": "#/definitions/pps_v2Input"
        },
        "description": {
          "type": "string"
        },
        "salt": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        },
        "spout": {
          "$ref": "#/definitions/pps_v2Spout"
        },
        "datumSetSpec": {
          "$ref": "#/definitions/pps_v2DatumSetSpec"
        },
        "datumTimeout": {
          "type": "string"
        },
        "jobTimeout": {
          "type": "string"
        },
        "datumTries": {
          "type": "string",
          "format": "int64"
        },
        "schedulingSpec": {
          "$ref": "#/definitions/pps_v2SchedulingSpec"
        },
        "podSpec": {
          "type": "string"
        },
        "podPatch": {
          "type": "string"
        },
        "s3Out": {
          "type": "boolean"
        },
        "metadata": {
          "$ref": "#/definitions/pps_v2Metadata"
        },
        "reprocessSpec": {
          "type": "string"
        },
        "unclaimedTasks": {
          "type": "string",
          "format": "int64"
        },
        "workerRc": {
          "type": "string"
        },
        "autoscaling": {
          "type": "boolean"
        },
        "tolerations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Toleration"
          }
        },
        "sidecarResourceRequests": {
          "$ref": "#/definitions/pps_v2ResourceSpec"
        },
        "determined": {
          "$ref": "#/definitions/pps_v2Determined"
        },
        "maximumExpectedUptime": {
          "type": "string"
        },
        "workersStartedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pps_v2PipelinePage": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/pps_v2PipelinePageOrdering"
        },
        "pageSize": {
          "type": "string",
          "format": "int64"
        },
        "pageIndex": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pps_v2PipelinePageOrdering": {
      "type": "string",
      "enum": [
        "RECENT"
      ],
      "default": "RECENT"
    },
    "pps_v2PipelineState": {
      "type": "string",
      "enum": [
        "PIPELINE_STATE_UNKNOWN",
        "PIPELINE_STARTING",
        "PIPELINE_RUNNING",
        "PIPELINE_RESTARTING",
        "PIPELINE_FAILURE",
        "PIPELINE_PAUSED",
        "PIPELINE_STANDBY",
        "PIPELINE_CRASHING"
      ],
      "default": "PIPELINE_STATE_UNKNOWN",
      "description": " - PIPELINE_STARTING: There is a PipelineInfo + spec commit, but no RC\nThis happens when a pipeline has been created but not yet picked up by a\nPPS server.\n - PIPELINE_RUNNING: A pipeline has a spec commit and a service + RC\nThis is the normal state of a pipeline.\n - PIPELINE_RESTARTING: Equivalent to STARTING (there is a PipelineInfo + commit, but no RC)\nAfter some error caused runPipeline to exit, but before the pipeline is\nre-run. This is when the exponential backoff is in effect.\n - PIPELINE_FAILURE: The pipeline has encountered unrecoverable errors and is no longer being\nretried. It won't leave this state until the pipeline is updated.\n - PIPELINE_PAUSED: The pipeline has been explicitly paused by the user (the pipeline spec's\nStopped field should be true if the pipeline is in this state)\n - PIPELINE_STANDBY: The pipeline is fully functional, but there are no commits to process.\n - PIPELINE_CRASHING: The pipeline's workers are crashing, or failing to come up, this may\nresolve itself, the pipeline may make progress while in this state if the\nproblem is only being experienced by some workers."
    },
    "pps_v2PipelinesSummary": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project",
          "title": "the project the PipelinesSummary corresponds to"
        },
        "activePipelines": {
          "type": "string",
          "format": "int64",
          "title": "count of active pipelines"
        },
        "pausedPipelines": {
          "type": "string",
          "format": "int64",
          "title": "count of paused pipelines"
        },
        "failedPipelines": {
          "type": "string",
          "format": "int64",
          "title": "count of failed pipelines"
        },
        "unhealthyPipelines": {
          "type": "string",
          "format": "int64",
          "title": "count of pipelines with a failed latest job"
        }
      }
    },
    "pps_v2PipelinesSummaryRequest": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2ProjectPicker"
          },
          "title": "a PipelinesSummary will be returned for each of the requests projects"
        }
      }
    },
    "pps_v2PipelinesSummaryResponse": {
      "type": "object",
      "properties": {
        "summaries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2PipelinesSummary"
          },
          "title": "the pipeline summaries for the requested projects"
        }
      }
    },
    "pps_v2ProcessStats": {
      "type": "object",
      "properties": {
        "downloadTime": {
          "type": "string"
        },
        "processTime": {
          "type": "string"
        },
        "uploadTime": {
          "type": "string"
        },
        "downloadBytes": {
          "type": "string",
          "format": "int64"
        },
        "uploadBytes": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "pps_v2RenderTemplateRequest": {
      "type": "object",
      "properties": {
        "template": {
          "type": "string"
        },
        "args": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2RenderTemplateResponse": {
      "type": "object",
      "properties": {
        "json": {
          "type": "string"
        },
        "specs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2CreatePipelineRequest"
          }
        }
      }
    },
    "pps_v2RerunPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "reprocess": {
          "type": "boolean",
          "description": "Reprocess forces the pipeline to reprocess all datums."
        }
      }
    },
    "pps_v2ResourceSpec": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "float",
          "title": "The number of CPUs each worker needs (partial values are allowed, and\nencouraged)"
        },
        "memory": {
          "type": "string",
          "description": "The amount of memory each worker needs (in bytes, with allowed\nSI suffixes (M, K, G, Mi, Ki, Gi, etc)."
        },
        "gpu": {
          "$ref": "#/definitions/pps_v2GPUSpec",
          "description": "The spec for GPU resources."
        },
        "disk": {
          "type": "string",
          "description": "The amount of ephemeral storage each worker needs (in bytes, with allowed\nSI suffixes (M, K, G, Mi, Ki, Gi, etc)."
        }
      },
      "description": "ResourceSpec describes the amount of resources that pipeline pods should\nrequest from kubernetes, for scheduling."
    },
    "pps_v2RestartDatumRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "dataFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "pps_v2RunCronRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        }
      }
    },
    "pps_v2RunLoadTestRequest": {
      "type": "object",
      "properties": {
        "dagSpec": {
          "type": "string"
        },
        "loadSpec": {
          "type": "string"
        },
        "seed": {
          "type": "string",
          "format": "int64"
        },
        "parallelism": {
          "type": "string",
          "format": "int64"
        },
        "podPatch": {
          "type": "string"
        },
        "stateId": {
          "type": "string"
        }
      }
    },
    "pps_v2RunLoadTestResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "stateId": {
          "type": "string"
        }
      }
    },
    "pps_v2RunPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "provenance": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pfs_v2Commit"
          }
        },
        "jobId": {
          "type": "string"
        }
      }
    },
    "pps_v2SchedulingSpec": {
      "type": "object",
      "properties": {
        "nodeSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "priorityClassName": {
          "type": "string"
        }
      }
    },
    "pps_v2Secret": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "pps_v2SecretInfo": {
      "type": "object",
      "properties": {
        "secret": {
          "$ref": "#/definitions/pps_v2Secret"
        },
        "type": {
          "type": "string"
        },
        "creationTimestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "pps_v2SecretInfos": {
      "type": "object",
      "properties": {
        "secretInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2SecretInfo"
          }
        }
      }
    },
    "pps_v2SecretMount": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name must be the name of the secret in kubernetes."
        },
        "key": {
          "type": "string",
          "description": "Key of the secret to load into env_var, this field only has meaning if EnvVar != \"\"."
        },
        "mountPath": {
          "type": "string"
        },
        "envVar": {
          "type": "string"
        }
      }
    },
    "pps_v2Service": {
      "type": "object",
      "properties": {
        "internalPort": {
          "type": "integer",
          "format": "int32"
        },
        "externalPort": {
          "type": "integer",
          "format": "int32"
        },
        "ip": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "pps_v2SetClusterDefaultsRequest": {
      "type": "object",
      "properties": {
        "regenerate": {
          "type": "boolean"
        },
        "reprocess": {
          "type": "boolean",
          "title": "must be false if regenerate is false"
        },
        "dryRun": {
          "type": "boolean"
        },
        "clusterDefaultsJson": {
          "type": "string",
          "description": "A JSON-encoded ClusterDefaults message, this will be stored verbatim."
        }
      }
    },
    "pps_v2SetClusterDefaultsResponse": {
      "type": "object",
      "properties": {
        "affectedPipelines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Pipeline"
          }
        }
      }
    },
    "pps_v2SetProjectDefaultsRequest": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/pfs_v2Project"
        },
        "regenerate": {
          "type": "boolean"
        },
        "reprocess": {
          "type": "boolean",
          "title": "must be false if regenerate is false"
        },
        "dryRun": {
          "type": "boolean"
        },
        "projectDefaultsJson": {
          "type": "string",
          "description": "A JSON-encoded ProjectDefaults message, this will be stored verbatim."
        }
      }
    },
    "pps_v2SetProjectDefaultsResponse": {
      "type": "object",
      "properties": {
        "affectedPipelines": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2Pipeline"
          }
        }
      }
    },
    "pps_v2Spout": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/pps_v2Service"
        }
      }
    },
    "pps_v2StartCreateDatumRequest": {
      "type": "object",
      "properties": {
        "input": {
          "$ref": "#/definitions/pps_v2Input",
          "description": "Input is the input to list datums from. The datums listed are the ones \nthat would be run if a pipeline was created with the provided input."
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "Number of datums to return in first batch. If 0, default batch size\nis returned."
        }
      }
    },
    "pps_v2StartPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        }
      }
    },
    "pps_v2StopJobRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "pps_v2StopPipelineRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "mustExist": {
          "type": "boolean",
          "description": "If true, an error will be returned if the pipeline doesn't exist."
        }
      }
    },
    "pps_v2SubscribeJobRequest": {
      "type": "object",
      "properties": {
        "pipeline": {
          "$ref": "#/definitions/pps_v2Pipeline"
        },
        "details": {
          "type": "boolean",
          "title": "Same as ListJobRequest.Details"
        }
      },
      "title": "Streams open jobs until canceled"
    },
    "pps_v2TFJob": {
      "type": "object",
      "properties": {
        "tfJob": {
          "type": "string",
          "description": "tf_job  is a serialized Kubeflow TFJob spec. Pachyderm sends this directly\nto a kubernetes cluster on which kubeflow has been installed, instead of\ncreating a pipeline ReplicationController as it normally would."
        }
      }
    },
    "pps_v2TaintEffect": {
      "type": "string",
      "enum": [
        "ALL_EFFECTS",
        "NO_SCHEDULE",
        "PREFER_NO_SCHEDULE",
        "NO_EXECUTE"
      ],
      "default": "ALL_EFFECTS",
      "description": "TaintEffect is an effect that can be matched by a toleration.\n\n - ALL_EFFECTS: Empty matches all effects.\n - NO_SCHEDULE: \"NoSchedule\"\n - PREFER_NO_SCHEDULE: \"PreferNoSchedule\"\n - NO_EXECUTE: \"NoExecute\""
    },
    "pps_v2Toleration": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the taint key that the toleration applies to.  Empty means match all taint keys."
        },
        "operator": {
          "$ref": "#/definitions/pps_v2TolerationOperator",
          "description": "operator represents a key's relationship to the value."
        },
        "value": {
          "type": "string",
          "description": "value is the taint value the toleration matches to."
        },
        "effect": {
          "$ref": "#/definitions/pps_v2TaintEffect",
          "description": "effect indicates the taint effect to match.  Empty means match all taint effects."
        },
        "tolerationSeconds": {
          "type": "string",
          "format": "int64",
          "description": "toleration_seconds represents the period of time the toleration (which must be of effect\nNoExecute, otherwise this field is ignored) tolerates the taint.  If not set, tolerate the\ntaint forever."
        }
      },
      "description": "Toleration is a Kubernetes toleration."
    },
    "pps_v2TolerationOperator": {
      "type": "string",
      "enum": [
        "EMPTY",
        "EXISTS",
        "EQUAL"
      ],
      "default": "EMPTY",
      "description": "TolerationOperator relates a Toleration's key to its value.\n\n - EMPTY: K8s doesn't have this, but it's possible to represent something similar.\n - EXISTS: \"Exists\"\n - EQUAL: \"Equal\""
    },
    "pps_v2Transform": {
      "type": "object",
      "properties": {
        "image": {
          "type": "string"
        },
        "cmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errCmd": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "env": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/pps_v2SecretMount"
          }
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stdin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "errStdin": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "acceptReturnCode": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "debug": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "workingDir": {
          "type": "string"
        },
        "dockerfile": {
          "type": "string"
        },
        "memoryVolume": {
          "type": "boolean"
        },
        "datumBatching": {
          "type": "boolean"
        }
      }
    },
    "pps_v2UpdateJobStateRequest": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/pps_v2Job"
        },
        "state": {
          "$ref": "#/definitions/pps_v2JobState"
        },
        "reason": {
          "type": "string"
        },
        "restart": {
          "type": "string",
          "format": "uint64"
        },
        "dataProcessed": {
          "type": "string",
          "format": "int64"
        },
        "dataSkipped": {
          "type": "string",
          "format": "int64"
        },
        "dataFailed": {
          "type": "string",
          "format": "int64"
        },
        "dataRecovered": {
          "type": "string",
          "format": "int64"
        },
        "dataTotal": {
          "type": "string",
          "format": "int64"
        },
        "stats": {
          "$ref": "#/definitions/pps_v2ProcessStats"
        }
      }
    },
    "pps_v2WorkerStatus": {
      "type": "object",
      "properties": {
        "workerId": {
          "type": "string"
        },
        "jobId": {
          "type": "string"
        },
        "datumStatus": {
          "$ref": "#/definitions/pps_v2DatumStatus"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "proxyListenRequest": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string"
        }
      }
    },
    "proxyListenResponse": {
      "type": "object",
      "properties": {
        "extra": {
          "type": "string"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "storageAppendFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "AppendFile will append the provided data to the file with the specified path. If\na file with the specified path doesn't exist, it will be created."
    },
    "storageComposeFilesetRequest": {
      "type": "object",
      "properties": {
        "filesetIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ttlSeconds": {
          "type": "string",
          "format": "int64",
          "description": "The TTL, in seconds, for the composite fileset that is created."
        }
      }
    },
    "storageComposeFilesetResponse": {
      "type": "object",
      "properties": {
        "filesetId": {
          "type": "string"
        }
      }
    },
    "storageCreateFilesetRequest": {
      "type": "object",
      "properties": {
        "appendFile": {
          "$ref": "#/definitions/storageAppendFile"
        },
        "deleteFile": {
          "$ref": "#/definitions/storageDeleteFile"
        }
      },
      "description": "A CreateFilesetRequest corresponds to a single file modification.\nSupported file modifications are append and delete.\nA put / overwrite file modification can be performed by a delete followed by an\nappend.\n TODO: Decide how to handle datums."
    },
    "storageCreateFilesetResponse": {
      "type": "object",
      "properties": {
        "filesetId": {
          "type": "string"
        }
      }
    },
    "storageDeleteFile": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      },
      "description": "DeleteFile will delete the file with the specified path. If a file with the\nspecified path doesn't exist, the delete will be a no-op."
    },
    "storageFileFilter": {
      "type": "object",
      "properties": {
        "pathRange": {
          "$ref": "#/definitions/storagePathRange",
          "description": "Only emit files with paths in the provided path range."
        },
        "pathRegex": {
          "type": "string",
          "description": "Only emit files with paths that match the provided regular expression."
        }
      }
    },
    "storagePathRange": {
      "type": "object",
      "properties": {
        "lower": {
          "type": "string"
        },
        "upper": {
          "type": "string"
        }
      },
      "description": "PathRange is a range of paths.\nThe range is inclusive, exclusive: [Lower, Upper)."
    },
    "storageReadFilesetRequest": {
      "type": "object",
      "properties": {
        "filesetId": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storageFileFilter"
          },
          "description": "Filters constrain which files are emitted.\nA file is only emitted if it makes it through all of the filters sequentially."
        },
        "emptyFiles": {
          "type": "boolean",
          "description": "If true, then the file data will be omitted from the stream."
        }
      }
    },
    "storageReadFilesetResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "A ReadFilesetResponse corresponds to a single chunk of data in a file. \nSmall or empty files will be contained within a single message, while large\nfiles may be spread across multiple messages.\nFor files spread across multiple messages, each message will have the same\npath and the content will be returned in append order."
    },
    "storageRenewFilesetRequest": {
      "type": "object",
      "properties": {
        "filesetId": {
          "type": "string"
        },
        "ttlSeconds": {
          "type": "string",
          "format": "int64",
          "description": "The TTL, in seconds, for the fileset after renewal."
        }
      }
    },
    "storageShardFilesetRequest": {
      "type": "object",
      "properties": {
        "filesetId": {
          "type": "string"
        },
        "numFiles": {
          "type": "string",
          "format": "int64",
          "description": "Number of files targeted in each shard."
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64",
          "description": "Size (in bytes) targeted for each shard."
        }
      },
      "description": "If both num_files and size_bytes are set, shards are created\nbased on whichever threshold is surpassed first. If a shard\nconfiguration field (num_files, size_bytes) is unset, the\nstorage's default value is used."
    },
    "storageShardFilesetResponse": {
      "type": "object",
      "properties": {
        "shards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/storagePathRange"
          }
        }
      }
    },
    "taskapiGroup": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "group": {
          "type": "string"
        }
      }
    },
    "taskapiListTaskRequest": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/taskapiGroup"
        }
      }
    },
    "taskapiState": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "RUNNING",
        "SUCCESS",
        "FAILURE",
        "CLAIMED"
      ],
      "default": "UNKNOWN",
      "title": "- CLAIMED: not a real state used by task logic"
    },
    "taskapiTaskInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/taskapiGroup"
        },
        "state": {
          "$ref": "#/definitions/taskapiState"
        },
        "reason": {
          "type": "string"
        },
        "inputType": {
          "type": "string"
        },
        "inputData": {
          "type": "string"
        }
      }
    },
    "transaction_v2BatchTransactionRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionRequest"
          }
        }
      }
    },
    "transaction_v2DeleteAllRequest": {
      "type": "object"
    },
    "transaction_v2DeleteTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction_v2Transaction"
        }
      }
    },
    "transaction_v2FinishTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction_v2Transaction"
        }
      }
    },
    "transaction_v2InspectTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction_v2Transaction"
        }
      }
    },
    "transaction_v2ListTransactionRequest": {
      "type": "object"
    },
    "transaction_v2StartTransactionRequest": {
      "type": "object"
    },
    "transaction_v2Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "transaction_v2TransactionInfo": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/transaction_v2Transaction"
        },
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionRequest"
          }
        },
        "responses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionResponse"
          }
        },
        "started": {
          "type": "string",
          "format": "date-time"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "transaction_v2TransactionInfos": {
      "type": "object",
      "properties": {
        "transactionInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/transaction_v2TransactionInfo"
          }
        }
      }
    },
    "transaction_v2TransactionRequest": {
      "type": "object",
      "properties": {
        "createRepo": {
          "$ref": "#/definitions/pfs_v2CreateRepoRequest",
          "title": "Exactly one of these fields should be set"
        },
        "deleteRepo": {
          "$ref": "#/definitions/pfs_v2DeleteRepoRequest"
        },
        "startCommit": {
          "$ref": "#/definitions/pfs_v2StartCommitRequest"
        },
        "finishCommit": {
          "$ref": "#/definitions/pfs_v2FinishCommitRequest"
        },
        "squashCommitSet": {
          "$ref": "#/definitions/pfs_v2SquashCommitSetRequest"
        },
        "createBranch": {
          "$ref": "#/definitions/pfs_v2CreateBranchRequest"
        },
        "deleteBranch": {
          "$ref": "#/definitions/pfs_v2DeleteBranchRequest"
        },
        "updateJobState": {
          "$ref": "#/definitions/pps_v2UpdateJobStateRequest"
        },
        "stopJob": {
          "$ref": "#/definitions/pps_v2StopJobRequest"
        },
        "createPipelineV2": {
          "$ref": "#/definitions/pps_v2CreatePipelineTransaction"
        }
      }
    },
    "transaction_v2TransactionResponse": {
      "type": "object",
      "properties": {
        "commit": {
          "$ref": "#/definitions/pfs_v2Commit",
          "description": "Only used for StartCommit - any way we can deterministically provide this before finishing the transaction?",
          "title": "At most, one of these fields should be set (most responses are empty)"
        }
      }
    },
    "versionpb_v2Version": {
      "type": "object",
      "properties": {
        "major": {
          "type": "integer",
          "format": "int64"
        },
        "minor": {
          "type": "integer",
          "format": "int64"
        },
        "micro": {
          "type": "integer",
          "format": "int64"
        },
        "additional": {
          "type": "string"
        },
        "gitCommit": {
          "type": "string"
        },
        "gitTreeModified": {
          "type": "string"
        },
        "buildDate": {
          "type": "string"
        },
        "goVersion": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        }
      }
    },
    "workerCancelRequest": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        },
        "dataFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "workerCancelResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      }
    },
    "workerNextDatumRequest": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "description": "Error indicates that the processing of the current datum errored.\nDatum error semantics with datum batching enabled are similar to datum error\nsemantics without datum batching enabled in that the datum may be retried,\nrecovered, or result with a job failure."
    },
    "workerNextDatumResponse": {
      "type": "object",
      "properties": {
        "env": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Env is a list of environment variables that should be set for the processing\nof the next datum."
    }
  }
}

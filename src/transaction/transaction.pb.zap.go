// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: transaction/transaction.proto

package transaction

import (
	zapcore "go.uber.org/zap/zapcore"
)

func (x *DeleteAllRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *TransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.CreateRepo).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("create_repo", obj)
	} else {
		enc.AddReflected("create_repo", x.CreateRepo)
	}

	if obj, ok := interface{}(x.DeleteRepo).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("delete_repo", obj)
	} else {
		enc.AddReflected("delete_repo", x.DeleteRepo)
	}

	if obj, ok := interface{}(x.StartCommit).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("start_commit", obj)
	} else {
		enc.AddReflected("start_commit", x.StartCommit)
	}

	if obj, ok := interface{}(x.FinishCommit).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("finish_commit", obj)
	} else {
		enc.AddReflected("finish_commit", x.FinishCommit)
	}

	if obj, ok := interface{}(x.SquashCommitSet).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("squash_commit_set", obj)
	} else {
		enc.AddReflected("squash_commit_set", x.SquashCommitSet)
	}

	if obj, ok := interface{}(x.CreateBranch).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("create_branch", obj)
	} else {
		enc.AddReflected("create_branch", x.CreateBranch)
	}

	if obj, ok := interface{}(x.DeleteBranch).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("delete_branch", obj)
	} else {
		enc.AddReflected("delete_branch", x.DeleteBranch)
	}

	if obj, ok := interface{}(x.UpdateJobState).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("update_job_state", obj)
	} else {
		enc.AddReflected("update_job_state", x.UpdateJobState)
	}

	if obj, ok := interface{}(x.CreatePipeline).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("create_pipeline", obj)
	} else {
		enc.AddReflected("create_pipeline", x.CreatePipeline)
	}

	if obj, ok := interface{}(x.StopJob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("stop_job", obj)
	} else {
		enc.AddReflected("stop_job", x.StopJob)
	}

	return nil
}

func (x *TransactionResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Commit).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("commit", obj)
	} else {
		enc.AddReflected("commit", x.Commit)
	}

	return nil
}

func (x *Transaction) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.ID)

	return nil
}

func (x *TransactionInfo) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Transaction).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("transaction", obj)
	} else {
		enc.AddReflected("transaction", x.Transaction)
	}

	requestsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Requests {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("requests", zapcore.ArrayMarshalerFunc(requestsArrMarshaller))

	responsesArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Responses {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("responses", zapcore.ArrayMarshalerFunc(responsesArrMarshaller))

	if obj, ok := interface{}(x.Started).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("started", obj)
	} else {
		enc.AddReflected("started", x.Started)
	}

	enc.AddUint64("version", x.Version)

	return nil
}

func (x *TransactionInfos) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	transaction_infoArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.TransactionInfo {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("transaction_info", zapcore.ArrayMarshalerFunc(transaction_infoArrMarshaller))

	return nil
}

func (x *BatchTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	requestsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Requests {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("requests", zapcore.ArrayMarshalerFunc(requestsArrMarshaller))

	return nil
}

func (x *StartTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *InspectTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Transaction).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("transaction", obj)
	} else {
		enc.AddReflected("transaction", x.Transaction)
	}

	return nil
}

func (x *DeleteTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Transaction).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("transaction", obj)
	} else {
		enc.AddReflected("transaction", x.Transaction)
	}

	return nil
}

func (x *ListTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *FinishTransactionRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Transaction).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("transaction", obj)
	} else {
		enc.AddReflected("transaction", x.Transaction)
	}

	return nil
}

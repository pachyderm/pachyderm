// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transaction/transaction.proto

package transaction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllRequestMultiError, or nil if none found.
func (m *DeleteAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAllRequestMultiError(errors)
	}

	return nil
}

// DeleteAllRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAllRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllRequestMultiError) AllErrors() []error { return m }

// DeleteAllRequestValidationError is the validation error returned by
// DeleteAllRequest.Validate if the designated constraints aren't met.
type DeleteAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllRequestValidationError) ErrorName() string { return "DeleteAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllRequestValidationError{}

// Validate checks the field values on TransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionRequestMultiError, or nil if none found.
func (m *TransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCreateRepo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreateRepo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreateRepo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateRepo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "CreateRepo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteRepo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "DeleteRepo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "DeleteRepo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteRepo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "DeleteRepo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "StartCommit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "StartCommit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "StartCommit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "FinishCommit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "FinishCommit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "FinishCommit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSquashCommitSet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "SquashCommitSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "SquashCommitSet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSquashCommitSet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "SquashCommitSet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreateBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreateBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "CreateBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteBranch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "DeleteBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "DeleteBranch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteBranch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "DeleteBranch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateJobState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "UpdateJobState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "UpdateJobState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateJobState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "UpdateJobState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStopJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "StopJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "StopJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStopJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "StopJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatePipelineV2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreatePipelineV2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionRequestValidationError{
					field:  "CreatePipelineV2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatePipelineV2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionRequestValidationError{
				field:  "CreatePipelineV2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionRequestMultiError(errors)
	}

	return nil
}

// TransactionRequestMultiError is an error wrapping multiple validation errors
// returned by TransactionRequest.ValidateAll() if the designated constraints
// aren't met.
type TransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionRequestMultiError) AllErrors() []error { return m }

// TransactionRequestValidationError is the validation error returned by
// TransactionRequest.Validate if the designated constraints aren't met.
type TransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionRequestValidationError) ErrorName() string {
	return "TransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionRequestValidationError{}

// Validate checks the field values on TransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionResponseMultiError, or nil if none found.
func (m *TransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionResponseValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionResponseValidationError{
					field:  "Commit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionResponseValidationError{
				field:  "Commit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TransactionResponseMultiError(errors)
	}

	return nil
}

// TransactionResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionResponseMultiError) AllErrors() []error { return m }

// TransactionResponseValidationError is the validation error returned by
// TransactionResponse.Validate if the designated constraints aren't met.
type TransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionResponseValidationError) ErrorName() string {
	return "TransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionResponseValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

// Validate checks the field values on TransactionInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionInfoMultiError, or nil if none found.
func (m *TransactionInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionInfoValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionInfoValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionInfoValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionInfoValidationError{
						field:  fmt.Sprintf("Responses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionInfoValidationError{
						field:  fmt.Sprintf("Responses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionInfoValidationError{
					field:  fmt.Sprintf("Responses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetStarted()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "Started",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionInfoValidationError{
					field:  "Started",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStarted()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionInfoValidationError{
				field:  "Started",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return TransactionInfoMultiError(errors)
	}

	return nil
}

// TransactionInfoMultiError is an error wrapping multiple validation errors
// returned by TransactionInfo.ValidateAll() if the designated constraints
// aren't met.
type TransactionInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionInfoMultiError) AllErrors() []error { return m }

// TransactionInfoValidationError is the validation error returned by
// TransactionInfo.Validate if the designated constraints aren't met.
type TransactionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionInfoValidationError) ErrorName() string { return "TransactionInfoValidationError" }

// Error satisfies the builtin error interface
func (e TransactionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionInfoValidationError{}

// Validate checks the field values on TransactionInfos with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransactionInfos) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionInfos with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionInfosMultiError, or nil if none found.
func (m *TransactionInfos) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionInfos) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactionInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionInfosValidationError{
						field:  fmt.Sprintf("TransactionInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionInfosValidationError{
						field:  fmt.Sprintf("TransactionInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionInfosValidationError{
					field:  fmt.Sprintf("TransactionInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TransactionInfosMultiError(errors)
	}

	return nil
}

// TransactionInfosMultiError is an error wrapping multiple validation errors
// returned by TransactionInfos.ValidateAll() if the designated constraints
// aren't met.
type TransactionInfosMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionInfosMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionInfosMultiError) AllErrors() []error { return m }

// TransactionInfosValidationError is the validation error returned by
// TransactionInfos.Validate if the designated constraints aren't met.
type TransactionInfosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionInfosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionInfosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionInfosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionInfosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionInfosValidationError) ErrorName() string { return "TransactionInfosValidationError" }

// Error satisfies the builtin error interface
func (e TransactionInfosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionInfos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionInfosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionInfosValidationError{}

// Validate checks the field values on BatchTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchTransactionRequestMultiError, or nil if none found.
func (m *BatchTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BatchTransactionRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BatchTransactionRequestValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchTransactionRequestValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BatchTransactionRequestMultiError(errors)
	}

	return nil
}

// BatchTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by BatchTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type BatchTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchTransactionRequestMultiError) AllErrors() []error { return m }

// BatchTransactionRequestValidationError is the validation error returned by
// BatchTransactionRequest.Validate if the designated constraints aren't met.
type BatchTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchTransactionRequestValidationError) ErrorName() string {
	return "BatchTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchTransactionRequestValidationError{}

// Validate checks the field values on StartTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartTransactionRequestMultiError, or nil if none found.
func (m *StartTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartTransactionRequestMultiError(errors)
	}

	return nil
}

// StartTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by StartTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type StartTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartTransactionRequestMultiError) AllErrors() []error { return m }

// StartTransactionRequestValidationError is the validation error returned by
// StartTransactionRequest.Validate if the designated constraints aren't met.
type StartTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartTransactionRequestValidationError) ErrorName() string {
	return "StartTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartTransactionRequestValidationError{}

// Validate checks the field values on InspectTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InspectTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InspectTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InspectTransactionRequestMultiError, or nil if none found.
func (m *InspectTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InspectTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTransaction() == nil {
		err := InspectTransactionRequestValidationError{
			field:  "Transaction",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InspectTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InspectTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InspectTransactionRequestValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InspectTransactionRequestMultiError(errors)
	}

	return nil
}

// InspectTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by InspectTransactionRequest.ValidateAll() if the
// designated constraints aren't met.
type InspectTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InspectTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InspectTransactionRequestMultiError) AllErrors() []error { return m }

// InspectTransactionRequestValidationError is the validation error returned by
// InspectTransactionRequest.Validate if the designated constraints aren't met.
type InspectTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InspectTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InspectTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InspectTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InspectTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InspectTransactionRequestValidationError) ErrorName() string {
	return "InspectTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InspectTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInspectTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InspectTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InspectTransactionRequestValidationError{}

// Validate checks the field values on DeleteTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTransactionRequestMultiError, or nil if none found.
func (m *DeleteTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTransaction() == nil {
		err := DeleteTransactionRequestValidationError{
			field:  "Transaction",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTransactionRequestValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTransactionRequestMultiError(errors)
	}

	return nil
}

// DeleteTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransactionRequestMultiError) AllErrors() []error { return m }

// DeleteTransactionRequestValidationError is the validation error returned by
// DeleteTransactionRequest.Validate if the designated constraints aren't met.
type DeleteTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransactionRequestValidationError) ErrorName() string {
	return "DeleteTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransactionRequestValidationError{}

// Validate checks the field values on ListTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransactionRequestMultiError, or nil if none found.
func (m *ListTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTransactionRequestMultiError(errors)
	}

	return nil
}

// ListTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransactionRequestMultiError) AllErrors() []error { return m }

// ListTransactionRequestValidationError is the validation error returned by
// ListTransactionRequest.Validate if the designated constraints aren't met.
type ListTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransactionRequestValidationError) ErrorName() string {
	return "ListTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransactionRequestValidationError{}

// Validate checks the field values on FinishTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishTransactionRequestMultiError, or nil if none found.
func (m *FinishTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTransaction() == nil {
		err := FinishTransactionRequestValidationError{
			field:  "Transaction",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinishTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinishTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinishTransactionRequestValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FinishTransactionRequestMultiError(errors)
	}

	return nil
}

// FinishTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by FinishTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type FinishTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishTransactionRequestMultiError) AllErrors() []error { return m }

// FinishTransactionRequestValidationError is the validation error returned by
// FinishTransactionRequest.Validate if the designated constraints aren't met.
type FinishTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishTransactionRequestValidationError) ErrorName() string {
	return "FinishTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinishTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishTransactionRequestValidationError{}

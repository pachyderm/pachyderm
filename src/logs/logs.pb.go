// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: logs/logs.proto

package logs

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	pps "github.com/pachyderm/pachyderm/v2/src/pps"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_DEBUG LogLevel = 0
	LogLevel_LOG_LEVEL_INFO  LogLevel = 1
	LogLevel_LOG_LEVEL_ERROR LogLevel = 2
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_DEBUG",
		1: "LOG_LEVEL_INFO",
		2: "LOG_LEVEL_ERROR",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_DEBUG": 0,
		"LOG_LEVEL_INFO":  1,
		"LOG_LEVEL_ERROR": 2,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_logs_logs_proto_enumTypes[0].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_logs_logs_proto_enumTypes[0]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{0}
}

type LogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to QueryType:
	//
	//	*LogQuery_User
	//	*LogQuery_Admin
	QueryType isLogQuery_QueryType `protobuf_oneof:"query_type"`
}

func (x *LogQuery) Reset() {
	*x = LogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogQuery) ProtoMessage() {}

func (x *LogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogQuery.ProtoReflect.Descriptor instead.
func (*LogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{0}
}

func (m *LogQuery) GetQueryType() isLogQuery_QueryType {
	if m != nil {
		return m.QueryType
	}
	return nil
}

func (x *LogQuery) GetUser() *UserLogQuery {
	if x, ok := x.GetQueryType().(*LogQuery_User); ok {
		return x.User
	}
	return nil
}

func (x *LogQuery) GetAdmin() *AdminLogQuery {
	if x, ok := x.GetQueryType().(*LogQuery_Admin); ok {
		return x.Admin
	}
	return nil
}

type isLogQuery_QueryType interface {
	isLogQuery_QueryType()
}

type LogQuery_User struct {
	User *UserLogQuery `protobuf:"bytes,1,opt,name=user,proto3,oneof"`
}

type LogQuery_Admin struct {
	Admin *AdminLogQuery `protobuf:"bytes,2,opt,name=admin,proto3,oneof"`
}

func (*LogQuery_User) isLogQuery_QueryType() {}

func (*LogQuery_Admin) isLogQuery_QueryType() {}

type AdminLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AdminType:
	//
	//	*AdminLogQuery_Logql
	//	*AdminLogQuery_Pod
	//	*AdminLogQuery_PodContainer
	//	*AdminLogQuery_App
	//	*AdminLogQuery_Master
	//	*AdminLogQuery_Storage
	//	*AdminLogQuery_User
	AdminType isAdminLogQuery_AdminType `protobuf_oneof:"admin_type"`
}

func (x *AdminLogQuery) Reset() {
	*x = AdminLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminLogQuery) ProtoMessage() {}

func (x *AdminLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminLogQuery.ProtoReflect.Descriptor instead.
func (*AdminLogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{1}
}

func (m *AdminLogQuery) GetAdminType() isAdminLogQuery_AdminType {
	if m != nil {
		return m.AdminType
	}
	return nil
}

func (x *AdminLogQuery) GetLogql() string {
	if x, ok := x.GetAdminType().(*AdminLogQuery_Logql); ok {
		return x.Logql
	}
	return ""
}

func (x *AdminLogQuery) GetPod() string {
	if x, ok := x.GetAdminType().(*AdminLogQuery_Pod); ok {
		return x.Pod
	}
	return ""
}

func (x *AdminLogQuery) GetPodContainer() *PodContainer {
	if x, ok := x.GetAdminType().(*AdminLogQuery_PodContainer); ok {
		return x.PodContainer
	}
	return nil
}

func (x *AdminLogQuery) GetApp() string {
	if x, ok := x.GetAdminType().(*AdminLogQuery_App); ok {
		return x.App
	}
	return ""
}

func (x *AdminLogQuery) GetMaster() *PipelineLogQuery {
	if x, ok := x.GetAdminType().(*AdminLogQuery_Master); ok {
		return x.Master
	}
	return nil
}

func (x *AdminLogQuery) GetStorage() *PipelineLogQuery {
	if x, ok := x.GetAdminType().(*AdminLogQuery_Storage); ok {
		return x.Storage
	}
	return nil
}

func (x *AdminLogQuery) GetUser() *UserLogQuery {
	if x, ok := x.GetAdminType().(*AdminLogQuery_User); ok {
		return x.User
	}
	return nil
}

type isAdminLogQuery_AdminType interface {
	isAdminLogQuery_AdminType()
}

type AdminLogQuery_Logql struct {
	// Arbitrary LogQL query
	Logql string `protobuf:"bytes,1,opt,name=logql,proto3,oneof"`
}

type AdminLogQuery_Pod struct {
	// A pod's logs (all containers)
	Pod string `protobuf:"bytes,2,opt,name=pod,proto3,oneof"`
}

type AdminLogQuery_PodContainer struct {
	// One container
	PodContainer *PodContainer `protobuf:"bytes,3,opt,name=pod_container,json=podContainer,proto3,oneof"`
}

type AdminLogQuery_App struct {
	// One "app" (logql -> {app=X})
	App string `protobuf:"bytes,4,opt,name=app,proto3,oneof"`
}

type AdminLogQuery_Master struct {
	// All master worker lines from a pipeline
	Master *PipelineLogQuery `protobuf:"bytes,5,opt,name=master,proto3,oneof"`
}

type AdminLogQuery_Storage struct {
	// All storage container lines from a pipeline
	Storage *PipelineLogQuery `protobuf:"bytes,6,opt,name=storage,proto3,oneof"`
}

type AdminLogQuery_User struct {
	// All worker lines from a pipeline/job
	User *UserLogQuery `protobuf:"bytes,7,opt,name=user,proto3,oneof"`
}

func (*AdminLogQuery_Logql) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_Pod) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_PodContainer) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_App) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_Master) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_Storage) isAdminLogQuery_AdminType() {}

func (*AdminLogQuery_User) isAdminLogQuery_AdminType() {}

type PodContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pod       string `protobuf:"bytes,1,opt,name=pod,proto3" json:"pod,omitempty"`
	Container string `protobuf:"bytes,2,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *PodContainer) Reset() {
	*x = PodContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodContainer) ProtoMessage() {}

func (x *PodContainer) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodContainer.ProtoReflect.Descriptor instead.
func (*PodContainer) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{2}
}

func (x *PodContainer) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *PodContainer) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

// Only returns "user" logs
type UserLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserType:
	//
	//	*UserLogQuery_Project
	//	*UserLogQuery_Pipeline
	//	*UserLogQuery_Datum
	//	*UserLogQuery_Job
	//	*UserLogQuery_PipelineJob
	//	*UserLogQuery_JobDatum
	UserType isUserLogQuery_UserType `protobuf_oneof:"user_type"`
}

func (x *UserLogQuery) Reset() {
	*x = UserLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLogQuery) ProtoMessage() {}

func (x *UserLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLogQuery.ProtoReflect.Descriptor instead.
func (*UserLogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{3}
}

func (m *UserLogQuery) GetUserType() isUserLogQuery_UserType {
	if m != nil {
		return m.UserType
	}
	return nil
}

func (x *UserLogQuery) GetProject() string {
	if x, ok := x.GetUserType().(*UserLogQuery_Project); ok {
		return x.Project
	}
	return ""
}

func (x *UserLogQuery) GetPipeline() *PipelineLogQuery {
	if x, ok := x.GetUserType().(*UserLogQuery_Pipeline); ok {
		return x.Pipeline
	}
	return nil
}

func (x *UserLogQuery) GetDatum() string {
	if x, ok := x.GetUserType().(*UserLogQuery_Datum); ok {
		return x.Datum
	}
	return ""
}

func (x *UserLogQuery) GetJob() string {
	if x, ok := x.GetUserType().(*UserLogQuery_Job); ok {
		return x.Job
	}
	return ""
}

func (x *UserLogQuery) GetPipelineJob() *PipelineJobLogQuery {
	if x, ok := x.GetUserType().(*UserLogQuery_PipelineJob); ok {
		return x.PipelineJob
	}
	return nil
}

func (x *UserLogQuery) GetJobDatum() *JobDatumLogQuery {
	if x, ok := x.GetUserType().(*UserLogQuery_JobDatum); ok {
		return x.JobDatum
	}
	return nil
}

type isUserLogQuery_UserType interface {
	isUserLogQuery_UserType()
}

type UserLogQuery_Project struct {
	// All pipelines in the project
	Project string `protobuf:"bytes,1,opt,name=project,proto3,oneof"`
}

type UserLogQuery_Pipeline struct {
	// One pipeline in a project
	Pipeline *PipelineLogQuery `protobuf:"bytes,2,opt,name=pipeline,proto3,oneof"`
}

type UserLogQuery_Datum struct {
	// One datum.
	Datum string `protobuf:"bytes,3,opt,name=datum,proto3,oneof"`
}

type UserLogQuery_Job struct {
	// One job, across pipelines and projects
	Job string `protobuf:"bytes,4,opt,name=job,proto3,oneof"`
}

type UserLogQuery_PipelineJob struct {
	// One job in one pipeline
	PipelineJob *PipelineJobLogQuery `protobuf:"bytes,5,opt,name=pipeline_job,json=pipelineJob,proto3,oneof"`
}

type UserLogQuery_JobDatum struct {
	// One datum in one job
	JobDatum *JobDatumLogQuery `protobuf:"bytes,6,opt,name=job_datum,json=jobDatum,proto3,oneof"`
}

func (*UserLogQuery_Project) isUserLogQuery_UserType() {}

func (*UserLogQuery_Pipeline) isUserLogQuery_UserType() {}

func (*UserLogQuery_Datum) isUserLogQuery_UserType() {}

func (*UserLogQuery_Job) isUserLogQuery_UserType() {}

func (*UserLogQuery_PipelineJob) isUserLogQuery_UserType() {}

func (*UserLogQuery_JobDatum) isUserLogQuery_UserType() {}

type PipelineLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project  string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Pipeline string `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *PipelineLogQuery) Reset() {
	*x = PipelineLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineLogQuery) ProtoMessage() {}

func (x *PipelineLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineLogQuery.ProtoReflect.Descriptor instead.
func (*PipelineLogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineLogQuery) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PipelineLogQuery) GetPipeline() string {
	if x != nil {
		return x.Pipeline
	}
	return ""
}

type PipelineJobLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *PipelineLogQuery `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Job      string            `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *PipelineJobLogQuery) Reset() {
	*x = PipelineJobLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineJobLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineJobLogQuery) ProtoMessage() {}

func (x *PipelineJobLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineJobLogQuery.ProtoReflect.Descriptor instead.
func (*PipelineJobLogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineJobLogQuery) GetPipeline() *PipelineLogQuery {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *PipelineJobLogQuery) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

type JobDatumLogQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job   string `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Datum string `protobuf:"bytes,2,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *JobDatumLogQuery) Reset() {
	*x = JobDatumLogQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobDatumLogQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobDatumLogQuery) ProtoMessage() {}

func (x *JobDatumLogQuery) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobDatumLogQuery.ProtoReflect.Descriptor instead.
func (*JobDatumLogQuery) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{6}
}

func (x *JobDatumLogQuery) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *JobDatumLogQuery) GetDatum() string {
	if x != nil {
		return x.Datum
	}
	return ""
}

type LogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRangeLogFilter `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Limit     uint64              `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Regex     *RegexLogFilter     `protobuf:"bytes,3,opt,name=regex,proto3" json:"regex,omitempty"`
	// Minimum log level to return; worker will always run at level debug, but setting INFO here restores original behavior
	Level LogLevel `protobuf:"varint,4,opt,name=level,proto3,enum=logs.LogLevel" json:"level,omitempty"`
}

func (x *LogFilter) Reset() {
	*x = LogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFilter) ProtoMessage() {}

func (x *LogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFilter.ProtoReflect.Descriptor instead.
func (*LogFilter) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{7}
}

func (x *LogFilter) GetTimeRange() *TimeRangeLogFilter {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *LogFilter) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LogFilter) GetRegex() *RegexLogFilter {
	if x != nil {
		return x.Regex
	}
	return nil
}

func (x *LogFilter) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_DEBUG
}

type TimeRangeLogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be null
	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Can be null
	Until *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=until,proto3" json:"until,omitempty"`
	// Offset from which to return results
	Offset uint64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TimeRangeLogFilter) Reset() {
	*x = TimeRangeLogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRangeLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRangeLogFilter) ProtoMessage() {}

func (x *TimeRangeLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRangeLogFilter.ProtoReflect.Descriptor instead.
func (*TimeRangeLogFilter) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{8}
}

func (x *TimeRangeLogFilter) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TimeRangeLogFilter) GetUntil() *timestamppb.Timestamp {
	if x != nil {
		return x.Until
	}
	return nil
}

func (x *TimeRangeLogFilter) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RegexLogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Negate  bool   `protobuf:"varint,2,opt,name=negate,proto3" json:"negate,omitempty"`
}

func (x *RegexLogFilter) Reset() {
	*x = RegexLogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegexLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegexLogFilter) ProtoMessage() {}

func (x *RegexLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegexLogFilter.ProtoReflect.Descriptor instead.
func (*RegexLogFilter) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{9}
}

func (x *RegexLogFilter) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *RegexLogFilter) GetNegate() bool {
	if x != nil {
		return x.Negate
	}
	return false
}

type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          *LogQuery  `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Filter         *LogFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Tail           bool       `protobuf:"varint,3,opt,name=tail,proto3" json:"tail,omitempty"`
	WantPagingHint bool       `protobuf:"varint,4,opt,name=want_paging_hint,json=wantPagingHint,proto3" json:"want_paging_hint,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{10}
}

func (x *GetLogsRequest) GetQuery() *LogQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetLogsRequest) GetFilter() *LogFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetLogsRequest) GetTail() bool {
	if x != nil {
		return x.Tail
	}
	return false
}

func (x *GetLogsRequest) GetWantPagingHint() bool {
	if x != nil {
		return x.WantPagingHint
	}
	return false
}

type GetLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//
	//	*GetLogsResponse_PagingHint
	//	*GetLogsResponse_Log
	ResponseType isGetLogsResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *GetLogsResponse) Reset() {
	*x = GetLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsResponse) ProtoMessage() {}

func (x *GetLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsResponse.ProtoReflect.Descriptor instead.
func (*GetLogsResponse) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{11}
}

func (m *GetLogsResponse) GetResponseType() isGetLogsResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *GetLogsResponse) GetPagingHint() *PagingHint {
	if x, ok := x.GetResponseType().(*GetLogsResponse_PagingHint); ok {
		return x.PagingHint
	}
	return nil
}

func (x *GetLogsResponse) GetLog() *LogMessage {
	if x, ok := x.GetResponseType().(*GetLogsResponse_Log); ok {
		return x.Log
	}
	return nil
}

type isGetLogsResponse_ResponseType interface {
	isGetLogsResponse_ResponseType()
}

type GetLogsResponse_PagingHint struct {
	PagingHint *PagingHint `protobuf:"bytes,1,opt,name=paging_hint,json=pagingHint,proto3,oneof"`
}

type GetLogsResponse_Log struct {
	Log *LogMessage `protobuf:"bytes,2,opt,name=log,proto3,oneof"`
}

func (*GetLogsResponse_PagingHint) isGetLogsResponse_ResponseType() {}

func (*GetLogsResponse_Log) isGetLogsResponse_ResponseType() {}

type PagingHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Older *GetLogsRequest `protobuf:"bytes,1,opt,name=older,proto3" json:"older,omitempty"`
	Newer *GetLogsRequest `protobuf:"bytes,2,opt,name=newer,proto3" json:"newer,omitempty"`
}

func (x *PagingHint) Reset() {
	*x = PagingHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingHint) ProtoMessage() {}

func (x *PagingHint) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingHint.ProtoReflect.Descriptor instead.
func (*PagingHint) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{12}
}

func (x *PagingHint) GetOlder() *GetLogsRequest {
	if x != nil {
		return x.Older
	}
	return nil
}

func (x *PagingHint) GetNewer() *GetLogsRequest {
	if x != nil {
		return x.Newer
	}
	return nil
}

type VerbatimLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line      []byte                 `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *VerbatimLogMessage) Reset() {
	*x = VerbatimLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerbatimLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerbatimLogMessage) ProtoMessage() {}

func (x *VerbatimLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerbatimLogMessage.ProtoReflect.Descriptor instead.
func (*VerbatimLogMessage) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{13}
}

func (x *VerbatimLogMessage) GetLine() []byte {
	if x != nil {
		return x.Line
	}
	return nil
}

func (x *VerbatimLogMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The verbatim line from Loki
	Verbatim *VerbatimLogMessage `protobuf:"bytes,1,opt,name=verbatim,proto3" json:"verbatim,omitempty"`
	// A raw JSON parse of the entire line
	Object *structpb.Struct `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// If a parseable timestamp was found in `fields`
	NativeTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=native_timestamp,json=nativeTimestamp,proto3" json:"native_timestamp,omitempty"`
	// For code that wants to filter on pipeline/job/etc
	PpsLogMessage *pps.LogMessage `protobuf:"bytes,4,opt,name=pps_log_message,json=ppsLogMessage,proto3" json:"pps_log_message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logs_logs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_logs_logs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_logs_logs_proto_rawDescGZIP(), []int{14}
}

func (x *LogMessage) GetVerbatim() *VerbatimLogMessage {
	if x != nil {
		return x.Verbatim
	}
	return nil
}

func (x *LogMessage) GetObject() *structpb.Struct {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *LogMessage) GetNativeTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.NativeTimestamp
	}
	return nil
}

func (x *LogMessage) GetPpsLogMessage() *pps.LogMessage {
	if x != nil {
		return x.PpsLogMessage
	}
	return nil
}

var File_logs_logs_proto protoreflect.FileDescriptor

var file_logs_logs_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x70, 0x73, 0x2f, 0x70, 0x70, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x71,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x71, 0x6c,
	0x12, 0x12, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x6f, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f,
	0x67, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x3e, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x22, 0x90, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x03,
	0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6a, 0x6f, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x62,
	0x12, 0x35, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6a,
	0x6f, 0x62, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x5b,
	0x0a, 0x13, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x3a, 0x0a, 0x10, 0x4a,
	0x6f, 0x62, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0xac, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x30, 0x0a,
	0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x6e,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x6e, 0x65, 0x77, 0x65, 0x72,
	0x22, 0x62, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x62, 0x61, 0x74, 0x69, 0x6d, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x62, 0x61, 0x74, 0x69, 0x6d, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x70, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d,
	0x70, 0x70, 0x73, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x48, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x32, 0x41, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x3a,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x14, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65,
	0x72, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x76, 0x32, 0x2f,
	0x73, 0x72, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logs_logs_proto_rawDescOnce sync.Once
	file_logs_logs_proto_rawDescData = file_logs_logs_proto_rawDesc
)

func file_logs_logs_proto_rawDescGZIP() []byte {
	file_logs_logs_proto_rawDescOnce.Do(func() {
		file_logs_logs_proto_rawDescData = protoimpl.X.CompressGZIP(file_logs_logs_proto_rawDescData)
	})
	return file_logs_logs_proto_rawDescData
}

var file_logs_logs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_logs_logs_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_logs_logs_proto_goTypes = []interface{}{
	(LogLevel)(0),                 // 0: logs.LogLevel
	(*LogQuery)(nil),              // 1: logs.LogQuery
	(*AdminLogQuery)(nil),         // 2: logs.AdminLogQuery
	(*PodContainer)(nil),          // 3: logs.PodContainer
	(*UserLogQuery)(nil),          // 4: logs.UserLogQuery
	(*PipelineLogQuery)(nil),      // 5: logs.PipelineLogQuery
	(*PipelineJobLogQuery)(nil),   // 6: logs.PipelineJobLogQuery
	(*JobDatumLogQuery)(nil),      // 7: logs.JobDatumLogQuery
	(*LogFilter)(nil),             // 8: logs.LogFilter
	(*TimeRangeLogFilter)(nil),    // 9: logs.TimeRangeLogFilter
	(*RegexLogFilter)(nil),        // 10: logs.RegexLogFilter
	(*GetLogsRequest)(nil),        // 11: logs.GetLogsRequest
	(*GetLogsResponse)(nil),       // 12: logs.GetLogsResponse
	(*PagingHint)(nil),            // 13: logs.PagingHint
	(*VerbatimLogMessage)(nil),    // 14: logs.VerbatimLogMessage
	(*LogMessage)(nil),            // 15: logs.LogMessage
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 17: google.protobuf.Struct
	(*pps.LogMessage)(nil),        // 18: pps_v2.LogMessage
}
var file_logs_logs_proto_depIdxs = []int32{
	4,  // 0: logs.LogQuery.user:type_name -> logs.UserLogQuery
	2,  // 1: logs.LogQuery.admin:type_name -> logs.AdminLogQuery
	3,  // 2: logs.AdminLogQuery.pod_container:type_name -> logs.PodContainer
	5,  // 3: logs.AdminLogQuery.master:type_name -> logs.PipelineLogQuery
	5,  // 4: logs.AdminLogQuery.storage:type_name -> logs.PipelineLogQuery
	4,  // 5: logs.AdminLogQuery.user:type_name -> logs.UserLogQuery
	5,  // 6: logs.UserLogQuery.pipeline:type_name -> logs.PipelineLogQuery
	6,  // 7: logs.UserLogQuery.pipeline_job:type_name -> logs.PipelineJobLogQuery
	7,  // 8: logs.UserLogQuery.job_datum:type_name -> logs.JobDatumLogQuery
	5,  // 9: logs.PipelineJobLogQuery.pipeline:type_name -> logs.PipelineLogQuery
	9,  // 10: logs.LogFilter.time_range:type_name -> logs.TimeRangeLogFilter
	10, // 11: logs.LogFilter.regex:type_name -> logs.RegexLogFilter
	0,  // 12: logs.LogFilter.level:type_name -> logs.LogLevel
	16, // 13: logs.TimeRangeLogFilter.from:type_name -> google.protobuf.Timestamp
	16, // 14: logs.TimeRangeLogFilter.until:type_name -> google.protobuf.Timestamp
	1,  // 15: logs.GetLogsRequest.query:type_name -> logs.LogQuery
	8,  // 16: logs.GetLogsRequest.filter:type_name -> logs.LogFilter
	13, // 17: logs.GetLogsResponse.paging_hint:type_name -> logs.PagingHint
	15, // 18: logs.GetLogsResponse.log:type_name -> logs.LogMessage
	11, // 19: logs.PagingHint.older:type_name -> logs.GetLogsRequest
	11, // 20: logs.PagingHint.newer:type_name -> logs.GetLogsRequest
	16, // 21: logs.VerbatimLogMessage.timestamp:type_name -> google.protobuf.Timestamp
	14, // 22: logs.LogMessage.verbatim:type_name -> logs.VerbatimLogMessage
	17, // 23: logs.LogMessage.object:type_name -> google.protobuf.Struct
	16, // 24: logs.LogMessage.native_timestamp:type_name -> google.protobuf.Timestamp
	18, // 25: logs.LogMessage.pps_log_message:type_name -> pps_v2.LogMessage
	11, // 26: logs.API.GetLogs:input_type -> logs.GetLogsRequest
	12, // 27: logs.API.GetLogs:output_type -> logs.GetLogsResponse
	27, // [27:28] is the sub-list for method output_type
	26, // [26:27] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_logs_logs_proto_init() }
func file_logs_logs_proto_init() {
	if File_logs_logs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logs_logs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineJobLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobDatumLogQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRangeLogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegexLogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerbatimLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logs_logs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_logs_logs_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*LogQuery_User)(nil),
		(*LogQuery_Admin)(nil),
	}
	file_logs_logs_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AdminLogQuery_Logql)(nil),
		(*AdminLogQuery_Pod)(nil),
		(*AdminLogQuery_PodContainer)(nil),
		(*AdminLogQuery_App)(nil),
		(*AdminLogQuery_Master)(nil),
		(*AdminLogQuery_Storage)(nil),
		(*AdminLogQuery_User)(nil),
	}
	file_logs_logs_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UserLogQuery_Project)(nil),
		(*UserLogQuery_Pipeline)(nil),
		(*UserLogQuery_Datum)(nil),
		(*UserLogQuery_Job)(nil),
		(*UserLogQuery_PipelineJob)(nil),
		(*UserLogQuery_JobDatum)(nil),
	}
	file_logs_logs_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetLogsResponse_PagingHint)(nil),
		(*GetLogsResponse_Log)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logs_logs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_logs_logs_proto_goTypes,
		DependencyIndexes: file_logs_logs_proto_depIdxs,
		EnumInfos:         file_logs_logs_proto_enumTypes,
		MessageInfos:      file_logs_logs_proto_msgTypes,
	}.Build()
	File_logs_logs_proto = out.File
	file_logs_logs_proto_rawDesc = nil
	file_logs_logs_proto_goTypes = nil
	file_logs_logs_proto_depIdxs = nil
}

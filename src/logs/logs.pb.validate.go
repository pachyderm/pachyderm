// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logs/logs.proto

package logs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LogQuery with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogQueryMultiError, or nil
// if none found.
func (m *LogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *LogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.QueryType.(type) {
	case *LogQuery_User:
		if v == nil {
			err := LogQueryValidationError{
				field:  "QueryType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogQueryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogQueryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogQueryValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *LogQuery_Admin:
		if v == nil {
			err := LogQueryValidationError{
				field:  "QueryType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAdmin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LogQueryValidationError{
						field:  "Admin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LogQueryValidationError{
						field:  "Admin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LogQueryValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return LogQueryMultiError(errors)
	}

	return nil
}

// LogQueryMultiError is an error wrapping multiple validation errors returned
// by LogQuery.ValidateAll() if the designated constraints aren't met.
type LogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogQueryMultiError) AllErrors() []error { return m }

// LogQueryValidationError is the validation error returned by
// LogQuery.Validate if the designated constraints aren't met.
type LogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogQueryValidationError) ErrorName() string { return "LogQueryValidationError" }

// Error satisfies the builtin error interface
func (e LogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogQueryValidationError{}

// Validate checks the field values on AdminLogQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminLogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminLogQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminLogQueryMultiError, or
// nil if none found.
func (m *AdminLogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminLogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.AdminType.(type) {
	case *AdminLogQuery_Logql:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Logql
	case *AdminLogQuery_Pod:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Pod
	case *AdminLogQuery_PodContainer:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPodContainer()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "PodContainer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "PodContainer",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPodContainer()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLogQueryValidationError{
					field:  "PodContainer",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AdminLogQuery_App:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for App
	case *AdminLogQuery_Master:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetMaster()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "Master",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "Master",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMaster()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLogQueryValidationError{
					field:  "Master",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AdminLogQuery_Storage:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStorage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "Storage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStorage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLogQueryValidationError{
					field:  "Storage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AdminLogQuery_User:
		if v == nil {
			err := AdminLogQueryValidationError{
				field:  "AdminType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AdminLogQueryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AdminLogQueryValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AdminLogQueryMultiError(errors)
	}

	return nil
}

// AdminLogQueryMultiError is an error wrapping multiple validation errors
// returned by AdminLogQuery.ValidateAll() if the designated constraints
// aren't met.
type AdminLogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminLogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminLogQueryMultiError) AllErrors() []error { return m }

// AdminLogQueryValidationError is the validation error returned by
// AdminLogQuery.Validate if the designated constraints aren't met.
type AdminLogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminLogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminLogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminLogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminLogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminLogQueryValidationError) ErrorName() string { return "AdminLogQueryValidationError" }

// Error satisfies the builtin error interface
func (e AdminLogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminLogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminLogQueryValidationError{}

// Validate checks the field values on PodContainer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PodContainer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodContainer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PodContainerMultiError, or
// nil if none found.
func (m *PodContainer) ValidateAll() error {
	return m.validate(true)
}

func (m *PodContainer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pod

	// no validation rules for Container

	if len(errors) > 0 {
		return PodContainerMultiError(errors)
	}

	return nil
}

// PodContainerMultiError is an error wrapping multiple validation errors
// returned by PodContainer.ValidateAll() if the designated constraints aren't met.
type PodContainerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodContainerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodContainerMultiError) AllErrors() []error { return m }

// PodContainerValidationError is the validation error returned by
// PodContainer.Validate if the designated constraints aren't met.
type PodContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodContainerValidationError) ErrorName() string { return "PodContainerValidationError" }

// Error satisfies the builtin error interface
func (e PodContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodContainerValidationError{}

// Validate checks the field values on UserLogQuery with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserLogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLogQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserLogQueryMultiError, or
// nil if none found.
func (m *UserLogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.UserType.(type) {
	case *UserLogQuery_Project:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Project
	case *UserLogQuery_Pipeline:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPipeline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "Pipeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "Pipeline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserLogQueryValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserLogQuery_Datum:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Datum
	case *UserLogQuery_Job:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Job
	case *UserLogQuery_PipelineJob:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPipelineJob()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "PipelineJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "PipelineJob",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPipelineJob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserLogQueryValidationError{
					field:  "PipelineJob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserLogQuery_JobDatum:
		if v == nil {
			err := UserLogQueryValidationError{
				field:  "UserType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetJobDatum()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "JobDatum",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserLogQueryValidationError{
						field:  "JobDatum",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobDatum()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserLogQueryValidationError{
					field:  "JobDatum",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UserLogQueryMultiError(errors)
	}

	return nil
}

// UserLogQueryMultiError is an error wrapping multiple validation errors
// returned by UserLogQuery.ValidateAll() if the designated constraints aren't met.
type UserLogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLogQueryMultiError) AllErrors() []error { return m }

// UserLogQueryValidationError is the validation error returned by
// UserLogQuery.Validate if the designated constraints aren't met.
type UserLogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLogQueryValidationError) ErrorName() string { return "UserLogQueryValidationError" }

// Error satisfies the builtin error interface
func (e UserLogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLogQueryValidationError{}

// Validate checks the field values on PipelineLogQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineLogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineLogQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineLogQueryMultiError, or nil if none found.
func (m *PipelineLogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineLogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Pipeline

	if len(errors) > 0 {
		return PipelineLogQueryMultiError(errors)
	}

	return nil
}

// PipelineLogQueryMultiError is an error wrapping multiple validation errors
// returned by PipelineLogQuery.ValidateAll() if the designated constraints
// aren't met.
type PipelineLogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineLogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineLogQueryMultiError) AllErrors() []error { return m }

// PipelineLogQueryValidationError is the validation error returned by
// PipelineLogQuery.Validate if the designated constraints aren't met.
type PipelineLogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineLogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineLogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineLogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineLogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineLogQueryValidationError) ErrorName() string { return "PipelineLogQueryValidationError" }

// Error satisfies the builtin error interface
func (e PipelineLogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineLogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineLogQueryValidationError{}

// Validate checks the field values on PipelineJobLogQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineJobLogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineJobLogQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineJobLogQueryMultiError, or nil if none found.
func (m *PipelineJobLogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineJobLogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineJobLogQueryValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineJobLogQueryValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineJobLogQueryValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Job

	if len(errors) > 0 {
		return PipelineJobLogQueryMultiError(errors)
	}

	return nil
}

// PipelineJobLogQueryMultiError is an error wrapping multiple validation
// errors returned by PipelineJobLogQuery.ValidateAll() if the designated
// constraints aren't met.
type PipelineJobLogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineJobLogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineJobLogQueryMultiError) AllErrors() []error { return m }

// PipelineJobLogQueryValidationError is the validation error returned by
// PipelineJobLogQuery.Validate if the designated constraints aren't met.
type PipelineJobLogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineJobLogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineJobLogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineJobLogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineJobLogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineJobLogQueryValidationError) ErrorName() string {
	return "PipelineJobLogQueryValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineJobLogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineJobLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineJobLogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineJobLogQueryValidationError{}

// Validate checks the field values on JobDatumLogQuery with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JobDatumLogQuery) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobDatumLogQuery with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobDatumLogQueryMultiError, or nil if none found.
func (m *JobDatumLogQuery) ValidateAll() error {
	return m.validate(true)
}

func (m *JobDatumLogQuery) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Job

	// no validation rules for Datum

	if len(errors) > 0 {
		return JobDatumLogQueryMultiError(errors)
	}

	return nil
}

// JobDatumLogQueryMultiError is an error wrapping multiple validation errors
// returned by JobDatumLogQuery.ValidateAll() if the designated constraints
// aren't met.
type JobDatumLogQueryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobDatumLogQueryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobDatumLogQueryMultiError) AllErrors() []error { return m }

// JobDatumLogQueryValidationError is the validation error returned by
// JobDatumLogQuery.Validate if the designated constraints aren't met.
type JobDatumLogQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobDatumLogQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobDatumLogQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobDatumLogQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobDatumLogQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobDatumLogQueryValidationError) ErrorName() string { return "JobDatumLogQueryValidationError" }

// Error satisfies the builtin error interface
func (e JobDatumLogQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobDatumLogQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobDatumLogQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobDatumLogQueryValidationError{}

// Validate checks the field values on LogFilter with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogFilterMultiError, or nil
// if none found.
func (m *LogFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *LogFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogFilterValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogFilterValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogFilterValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	if all {
		switch v := interface{}(m.GetRegex()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogFilterValidationError{
					field:  "Regex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogFilterValidationError{
					field:  "Regex",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegex()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogFilterValidationError{
				field:  "Regex",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Level

	if len(errors) > 0 {
		return LogFilterMultiError(errors)
	}

	return nil
}

// LogFilterMultiError is an error wrapping multiple validation errors returned
// by LogFilter.ValidateAll() if the designated constraints aren't met.
type LogFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogFilterMultiError) AllErrors() []error { return m }

// LogFilterValidationError is the validation error returned by
// LogFilter.Validate if the designated constraints aren't met.
type LogFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogFilterValidationError) ErrorName() string { return "LogFilterValidationError" }

// Error satisfies the builtin error interface
func (e LogFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogFilterValidationError{}

// Validate checks the field values on TimeRangeLogFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeRangeLogFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeRangeLogFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeRangeLogFilterMultiError, or nil if none found.
func (m *TimeRangeLogFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeRangeLogFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeLogFilterValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeLogFilterValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeLogFilterValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUntil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeLogFilterValidationError{
					field:  "Until",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeLogFilterValidationError{
					field:  "Until",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUntil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeLogFilterValidationError{
				field:  "Until",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return TimeRangeLogFilterMultiError(errors)
	}

	return nil
}

// TimeRangeLogFilterMultiError is an error wrapping multiple validation errors
// returned by TimeRangeLogFilter.ValidateAll() if the designated constraints
// aren't met.
type TimeRangeLogFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeRangeLogFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeRangeLogFilterMultiError) AllErrors() []error { return m }

// TimeRangeLogFilterValidationError is the validation error returned by
// TimeRangeLogFilter.Validate if the designated constraints aren't met.
type TimeRangeLogFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeLogFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeLogFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeLogFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeLogFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeLogFilterValidationError) ErrorName() string {
	return "TimeRangeLogFilterValidationError"
}

// Error satisfies the builtin error interface
func (e TimeRangeLogFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRangeLogFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeLogFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeLogFilterValidationError{}

// Validate checks the field values on RegexLogFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegexLogFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegexLogFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegexLogFilterMultiError,
// or nil if none found.
func (m *RegexLogFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *RegexLogFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pattern

	// no validation rules for Negate

	if len(errors) > 0 {
		return RegexLogFilterMultiError(errors)
	}

	return nil
}

// RegexLogFilterMultiError is an error wrapping multiple validation errors
// returned by RegexLogFilter.ValidateAll() if the designated constraints
// aren't met.
type RegexLogFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegexLogFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegexLogFilterMultiError) AllErrors() []error { return m }

// RegexLogFilterValidationError is the validation error returned by
// RegexLogFilter.Validate if the designated constraints aren't met.
type RegexLogFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegexLogFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegexLogFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegexLogFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegexLogFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegexLogFilterValidationError) ErrorName() string { return "RegexLogFilterValidationError" }

// Error satisfies the builtin error interface
func (e RegexLogFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegexLogFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegexLogFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegexLogFilterValidationError{}

// Validate checks the field values on GetLogsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetLogsRequestMultiError,
// or nil if none found.
func (m *GetLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuery()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLogsRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLogsRequestValidationError{
					field:  "Query",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLogsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLogsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLogsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLogsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tail

	// no validation rules for WantPagingHint

	if len(errors) > 0 {
		return GetLogsRequestMultiError(errors)
	}

	return nil
}

// GetLogsRequestMultiError is an error wrapping multiple validation errors
// returned by GetLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogsRequestMultiError) AllErrors() []error { return m }

// GetLogsRequestValidationError is the validation error returned by
// GetLogsRequest.Validate if the designated constraints aren't met.
type GetLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogsRequestValidationError) ErrorName() string { return "GetLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogsRequestValidationError{}

// Validate checks the field values on GetLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLogsResponseMultiError, or nil if none found.
func (m *GetLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.ResponseType.(type) {
	case *GetLogsResponse_PagingHint:
		if v == nil {
			err := GetLogsResponseValidationError{
				field:  "ResponseType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPagingHint()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  "PagingHint",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  "PagingHint",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPagingHint()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogsResponseValidationError{
					field:  "PagingHint",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *GetLogsResponse_Log:
		if v == nil {
			err := GetLogsResponseValidationError{
				field:  "ResponseType",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLog()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  "Log",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetLogsResponseValidationError{
						field:  "Log",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetLogsResponseValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetLogsResponseMultiError(errors)
	}

	return nil
}

// GetLogsResponseMultiError is an error wrapping multiple validation errors
// returned by GetLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLogsResponseMultiError) AllErrors() []error { return m }

// GetLogsResponseValidationError is the validation error returned by
// GetLogsResponse.Validate if the designated constraints aren't met.
type GetLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogsResponseValidationError) ErrorName() string { return "GetLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogsResponseValidationError{}

// Validate checks the field values on PagingHint with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PagingHint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PagingHint with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PagingHintMultiError, or
// nil if none found.
func (m *PagingHint) ValidateAll() error {
	return m.validate(true)
}

func (m *PagingHint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOlder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagingHintValidationError{
					field:  "Older",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagingHintValidationError{
					field:  "Older",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOlder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagingHintValidationError{
				field:  "Older",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNewer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PagingHintValidationError{
					field:  "Newer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PagingHintValidationError{
					field:  "Newer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PagingHintValidationError{
				field:  "Newer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PagingHintMultiError(errors)
	}

	return nil
}

// PagingHintMultiError is an error wrapping multiple validation errors
// returned by PagingHint.ValidateAll() if the designated constraints aren't met.
type PagingHintMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingHintMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingHintMultiError) AllErrors() []error { return m }

// PagingHintValidationError is the validation error returned by
// PagingHint.Validate if the designated constraints aren't met.
type PagingHintValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingHintValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingHintValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingHintValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingHintValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingHintValidationError) ErrorName() string { return "PagingHintValidationError" }

// Error satisfies the builtin error interface
func (e PagingHintValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPagingHint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingHintValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingHintValidationError{}

// Validate checks the field values on VerbatimLogMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerbatimLogMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerbatimLogMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerbatimLogMessageMultiError, or nil if none found.
func (m *VerbatimLogMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *VerbatimLogMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Line

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerbatimLogMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerbatimLogMessageValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerbatimLogMessageValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerbatimLogMessageMultiError(errors)
	}

	return nil
}

// VerbatimLogMessageMultiError is an error wrapping multiple validation errors
// returned by VerbatimLogMessage.ValidateAll() if the designated constraints
// aren't met.
type VerbatimLogMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerbatimLogMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerbatimLogMessageMultiError) AllErrors() []error { return m }

// VerbatimLogMessageValidationError is the validation error returned by
// VerbatimLogMessage.Validate if the designated constraints aren't met.
type VerbatimLogMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerbatimLogMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerbatimLogMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerbatimLogMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerbatimLogMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerbatimLogMessageValidationError) ErrorName() string {
	return "VerbatimLogMessageValidationError"
}

// Error satisfies the builtin error interface
func (e VerbatimLogMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerbatimLogMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerbatimLogMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerbatimLogMessageValidationError{}

// Validate checks the field values on LogMessage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogMessageMultiError, or
// nil if none found.
func (m *LogMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *LogMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVerbatim()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "Verbatim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "Verbatim",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVerbatim()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMessageValidationError{
				field:  "Verbatim",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "Object",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMessageValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNativeTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "NativeTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "NativeTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNativeTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMessageValidationError{
				field:  "NativeTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPpsLogMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "PpsLogMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogMessageValidationError{
					field:  "PpsLogMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPpsLogMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogMessageValidationError{
				field:  "PpsLogMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogMessageMultiError(errors)
	}

	return nil
}

// LogMessageMultiError is an error wrapping multiple validation errors
// returned by LogMessage.ValidateAll() if the designated constraints aren't met.
type LogMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMessageMultiError) AllErrors() []error { return m }

// LogMessageValidationError is the validation error returned by
// LogMessage.Validate if the designated constraints aren't met.
type LogMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogMessageValidationError) ErrorName() string { return "LogMessageValidationError" }

// Error satisfies the builtin error interface
func (e LogMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogMessageValidationError{}

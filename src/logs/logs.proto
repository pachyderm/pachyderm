syntax = "proto3";

package logs;
option go_package = "github.com/pachyderm/pachyderm/v2/src/logs";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

import "pps/pps.proto";

// LogQuery names a source of logs.
message LogQuery {
  oneof query_type {
    // A user query; covering day-to-day Pachyderm use cases.
    UserLogQuery user = 1;
    // A more broad log query that requires special permissions; useful for debugging Pachyderm
    // itself.
    AdminLogQuery admin = 2;
  }
}

message AdminLogQuery {
  oneof admin_type {
    // Arbitrary LogQL query.
    string logql = 1;
    // A pod's logs (all containers).
    string pod = 2;
    // One container.
    PodContainer pod_container = 3;
    // One "app" (logql -> {app=X}).
    string app = 4;
    // All master worker lines from a pipeline.
    PipelineLogQuery master = 5;
    // All storage container lines from a pipeline.
    PipelineLogQuery storage = 6;
    // All worker lines from a pipeline/job.
    UserLogQuery user = 7;
  }
}

// PodContainer identifies a container running in a Pod.
message PodContainer {
  // The full name of the pod.
  string pod = 1;
  // The name of the container.
  string container = 2;
}

// LogLevel selects a log level. Pachyderm services only have DEBUG, INFO, and ERROR.
enum LogLevel {
  // Use default log level filtering.
  LOG_LEVEL_UNSET = 0;
  // Include DEBUG, INFO, and ERROR logs.
  LOG_LEVEL_DEBUG = 1;
  // Include INFO and ERROR logs.
  LOG_LEVEL_INFO = 2;
  // Include only ERROR logs.
  LOG_LEVEL_ERROR = 3;
}

// A UserLogQuery selects logs that Pachyderm users need to see during normal Pachyderm operations.
message UserLogQuery {
  oneof user_type {
    // All pipelines in the project.
    string project = 1;
    // One pipeline in a project.
    PipelineLogQuery pipeline = 2;
    // One datum, by hex-encoded ID.
    string datum = 3;
    // One job by hex-encoded ID, across pipelines and projects.
    string job = 4;
    // One job in one pipeline.
    PipelineJobLogQuery pipeline_job = 5;
    // One datum in one job.
    JobDatumLogQuery job_datum = 6;
    // One datum in one pipeline.
    PipelineDatumLogQuery pipeline_datum = 7;
  }
}

// PipelineLogQuery selects all logs from all runs of a named pipeline.
message PipelineLogQuery {
  // The project the pipeline is in.
  string project = 1;
  // The name of the pipeline.
  string pipeline = 2;
}

// PipelineJobLogQuery selects all logs from a job that a named pipeline performed.
message PipelineJobLogQuery {
  // The pipeline.
  PipelineLogQuery pipeline = 1;
  // The hex-encoded ID of the job.
  string job = 2;
}

// JobDatumLogQuery returns logs from the processing of one datum that was part of the job.
message JobDatumLogQuery {
  // The hex-encoded ID of the job.
  string job = 1;
  // The hex-encoded ID of the datum.
  string datum = 2;
}

// PipelineDatumLogQuery returns logs from one datum in one pipeline.
message PipelineDatumLogQuery {
  // The pipeline.
  PipelineLogQuery pipeline = 1;
  // The hex-encoded ID of the datum.
  string datum = 2;
}

// A LogFilter selects which log lines are returned.
message LogFilter {
  // If set, only return logs in the provided time range.
  TimeRangeLogFilter time_range = 1;
  // If set, return at maximum this number of logs.
  uint64 limit = 2;
  // If set, only return logs that match this regular expression.
  RegexLogFilter regex = 3;
  // If set, only return logs that are greater than or equal to this log level.  (DEBUG returns
  // DEBUG, INFO, ERROR, INFO returns INFO and ERROR, etc.).
  LogLevel level = 4;
  // If true, only return logs from user code, excluding matched log messages only related to
  // internal Pachyderm operations.
  bool user_logs_only = 5;
}

// A TimeRangeLogFilter selects logs within a time range.  Either or both timestamps can be null.
// If from is after until, logs will be returns in reverse order.  (The first log you see will
// always be from the "from" time.)
message TimeRangeLogFilter {
  // Where in time to start returning logs from; includes logs with this exact timestamp.  If null,
  // starts at the beginning of time.
  google.protobuf.Timestamp from = 1;
  // Where in time to stop returning logs from; includes logs with this exact timestamp.  If null,
  // ends at the end of time.
  google.protobuf.Timestamp until = 2;
  // Offset from which to return results, in the case of multiple entries from the same nanosecond.
  uint64 offset = 3;
}

message RegexLogFilter {
  string pattern = 1;
  bool negate = 2;
}

message GetLogsRequest {
  LogQuery query = 1;
  LogFilter filter = 2;
  bool tail = 3;
  bool want_paging_hint = 4;
}

message GetLogsResponse {
  oneof response_type {
    PagingHint paging_hint = 1;
    LogMessage log = 2;
  }
}

message PagingHint {
  GetLogsRequest older = 1;
  GetLogsRequest newer = 2;
}

message VerbatimLogMessage {
  bytes line = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message LogMessage {
  // The verbatim line from Loki
  VerbatimLogMessage verbatim = 1;
  // A raw JSON parse of the entire line
  google.protobuf.Struct object = 2;
  // If a parseable timestamp was found in `fields`
  google.protobuf.Timestamp native_timestamp = 3;
  // For code that wants to filter on pipeline/job/etc
  pps_v2.LogMessage pps_log_message = 4;
}


service API {
  rpc GetLogs(GetLogsRequest) returns (stream GetLogsResponse) {}
}

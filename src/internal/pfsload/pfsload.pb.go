// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/pfsload/pfsload.proto

package pfsload

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pfs "github.com/pachyderm/pachyderm/v2/src/pfs"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommitSpec struct {
	Count                int64               `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Modifications        []*ModificationSpec `protobuf:"bytes,2,rep,name=modifications,proto3" json:"modifications,omitempty"`
	FileSources          []*FileSourceSpec   `protobuf:"bytes,3,rep,name=file_sources,json=fileSources,proto3" json:"file_sources,omitempty"`
	Validator            *ValidatorSpec      `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CommitSpec) Reset()         { *m = CommitSpec{} }
func (m *CommitSpec) String() string { return proto.CompactTextString(m) }
func (*CommitSpec) ProtoMessage()    {}
func (*CommitSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{0}
}
func (m *CommitSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitSpec.Merge(m, src)
}
func (m *CommitSpec) XXX_Size() int {
	return m.Size()
}
func (m *CommitSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CommitSpec proto.InternalMessageInfo

func (m *CommitSpec) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CommitSpec) GetModifications() []*ModificationSpec {
	if m != nil {
		return m.Modifications
	}
	return nil
}

func (m *CommitSpec) GetFileSources() []*FileSourceSpec {
	if m != nil {
		return m.FileSources
	}
	return nil
}

func (m *CommitSpec) GetValidator() *ValidatorSpec {
	if m != nil {
		return m.Validator
	}
	return nil
}

type ModificationSpec struct {
	Count                int64        `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	PutFile              *PutFileSpec `protobuf:"bytes,2,opt,name=put_file,json=putFile,proto3" json:"put_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ModificationSpec) Reset()         { *m = ModificationSpec{} }
func (m *ModificationSpec) String() string { return proto.CompactTextString(m) }
func (*ModificationSpec) ProtoMessage()    {}
func (*ModificationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{1}
}
func (m *ModificationSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModificationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModificationSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModificationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModificationSpec.Merge(m, src)
}
func (m *ModificationSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModificationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModificationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModificationSpec proto.InternalMessageInfo

func (m *ModificationSpec) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ModificationSpec) GetPutFile() *PutFileSpec {
	if m != nil {
		return m.PutFile
	}
	return nil
}

type PutFileSpec struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutFileSpec) Reset()         { *m = PutFileSpec{} }
func (m *PutFileSpec) String() string { return proto.CompactTextString(m) }
func (*PutFileSpec) ProtoMessage()    {}
func (*PutFileSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{2}
}
func (m *PutFileSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutFileSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutFileSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutFileSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutFileSpec.Merge(m, src)
}
func (m *PutFileSpec) XXX_Size() int {
	return m.Size()
}
func (m *PutFileSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PutFileSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PutFileSpec proto.InternalMessageInfo

func (m *PutFileSpec) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PutFileSpec) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type PutFileTask struct {
	Count                int64           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	FileSource           *FileSourceSpec `protobuf:"bytes,2,opt,name=file_source,json=fileSource,proto3" json:"file_source,omitempty"`
	Seed                 int64           `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	AuthToken            string          `protobuf:"bytes,4,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PutFileTask) Reset()         { *m = PutFileTask{} }
func (m *PutFileTask) String() string { return proto.CompactTextString(m) }
func (*PutFileTask) ProtoMessage()    {}
func (*PutFileTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{3}
}
func (m *PutFileTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutFileTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutFileTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutFileTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutFileTask.Merge(m, src)
}
func (m *PutFileTask) XXX_Size() int {
	return m.Size()
}
func (m *PutFileTask) XXX_DiscardUnknown() {
	xxx_messageInfo_PutFileTask.DiscardUnknown(m)
}

var xxx_messageInfo_PutFileTask proto.InternalMessageInfo

func (m *PutFileTask) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PutFileTask) GetFileSource() *FileSourceSpec {
	if m != nil {
		return m.FileSource
	}
	return nil
}

func (m *PutFileTask) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *PutFileTask) GetAuthToken() string {
	if m != nil {
		return m.AuthToken
	}
	return ""
}

type PutFileTaskResult struct {
	FileSetId            string   `protobuf:"bytes,1,opt,name=file_set_id,json=fileSetId,proto3" json:"file_set_id,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutFileTaskResult) Reset()         { *m = PutFileTaskResult{} }
func (m *PutFileTaskResult) String() string { return proto.CompactTextString(m) }
func (*PutFileTaskResult) ProtoMessage()    {}
func (*PutFileTaskResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{4}
}
func (m *PutFileTaskResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutFileTaskResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutFileTaskResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutFileTaskResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutFileTaskResult.Merge(m, src)
}
func (m *PutFileTaskResult) XXX_Size() int {
	return m.Size()
}
func (m *PutFileTaskResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PutFileTaskResult.DiscardUnknown(m)
}

var xxx_messageInfo_PutFileTaskResult proto.InternalMessageInfo

func (m *PutFileTaskResult) GetFileSetId() string {
	if m != nil {
		return m.FileSetId
	}
	return ""
}

func (m *PutFileTaskResult) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type FileSourceSpec struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Random               *RandomFileSourceSpec `protobuf:"bytes,2,opt,name=random,proto3" json:"random,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FileSourceSpec) Reset()         { *m = FileSourceSpec{} }
func (m *FileSourceSpec) String() string { return proto.CompactTextString(m) }
func (*FileSourceSpec) ProtoMessage()    {}
func (*FileSourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{5}
}
func (m *FileSourceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileSourceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileSourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSourceSpec.Merge(m, src)
}
func (m *FileSourceSpec) XXX_Size() int {
	return m.Size()
}
func (m *FileSourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FileSourceSpec proto.InternalMessageInfo

func (m *FileSourceSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileSourceSpec) GetRandom() *RandomFileSourceSpec {
	if m != nil {
		return m.Random
	}
	return nil
}

type RandomFileSourceSpec struct {
	Directory            *RandomDirectorySpec `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	Sizes                []*SizeSpec          `protobuf:"bytes,2,rep,name=sizes,proto3" json:"sizes,omitempty"`
	IncrementPath        bool                 `protobuf:"varint,3,opt,name=increment_path,json=incrementPath,proto3" json:"increment_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RandomFileSourceSpec) Reset()         { *m = RandomFileSourceSpec{} }
func (m *RandomFileSourceSpec) String() string { return proto.CompactTextString(m) }
func (*RandomFileSourceSpec) ProtoMessage()    {}
func (*RandomFileSourceSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{6}
}
func (m *RandomFileSourceSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandomFileSourceSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandomFileSourceSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandomFileSourceSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomFileSourceSpec.Merge(m, src)
}
func (m *RandomFileSourceSpec) XXX_Size() int {
	return m.Size()
}
func (m *RandomFileSourceSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomFileSourceSpec.DiscardUnknown(m)
}

var xxx_messageInfo_RandomFileSourceSpec proto.InternalMessageInfo

func (m *RandomFileSourceSpec) GetDirectory() *RandomDirectorySpec {
	if m != nil {
		return m.Directory
	}
	return nil
}

func (m *RandomFileSourceSpec) GetSizes() []*SizeSpec {
	if m != nil {
		return m.Sizes
	}
	return nil
}

func (m *RandomFileSourceSpec) GetIncrementPath() bool {
	if m != nil {
		return m.IncrementPath
	}
	return false
}

type RandomDirectorySpec struct {
	Depth                *SizeSpec `protobuf:"bytes,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Run                  int64     `protobuf:"varint,2,opt,name=run,proto3" json:"run,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RandomDirectorySpec) Reset()         { *m = RandomDirectorySpec{} }
func (m *RandomDirectorySpec) String() string { return proto.CompactTextString(m) }
func (*RandomDirectorySpec) ProtoMessage()    {}
func (*RandomDirectorySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{7}
}
func (m *RandomDirectorySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RandomDirectorySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RandomDirectorySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RandomDirectorySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RandomDirectorySpec.Merge(m, src)
}
func (m *RandomDirectorySpec) XXX_Size() int {
	return m.Size()
}
func (m *RandomDirectorySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_RandomDirectorySpec.DiscardUnknown(m)
}

var xxx_messageInfo_RandomDirectorySpec proto.InternalMessageInfo

func (m *RandomDirectorySpec) GetDepth() *SizeSpec {
	if m != nil {
		return m.Depth
	}
	return nil
}

func (m *RandomDirectorySpec) GetRun() int64 {
	if m != nil {
		return m.Run
	}
	return 0
}

type SizeSpec struct {
	MinSize              int64    `protobuf:"varint,1,opt,name=min_size,json=min,proto3" json:"min_size,omitempty"`
	MaxSize              int64    `protobuf:"varint,2,opt,name=max_size,json=max,proto3" json:"max_size,omitempty"`
	Prob                 int64    `protobuf:"varint,3,opt,name=prob,proto3" json:"prob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SizeSpec) Reset()         { *m = SizeSpec{} }
func (m *SizeSpec) String() string { return proto.CompactTextString(m) }
func (*SizeSpec) ProtoMessage()    {}
func (*SizeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{8}
}
func (m *SizeSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SizeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SizeSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SizeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SizeSpec.Merge(m, src)
}
func (m *SizeSpec) XXX_Size() int {
	return m.Size()
}
func (m *SizeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SizeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SizeSpec proto.InternalMessageInfo

func (m *SizeSpec) GetMinSize() int64 {
	if m != nil {
		return m.MinSize
	}
	return 0
}

func (m *SizeSpec) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *SizeSpec) GetProb() int64 {
	if m != nil {
		return m.Prob
	}
	return 0
}

type ValidatorSpec struct {
	Frequency            *FrequencySpec `protobuf:"bytes,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ValidatorSpec) Reset()         { *m = ValidatorSpec{} }
func (m *ValidatorSpec) String() string { return proto.CompactTextString(m) }
func (*ValidatorSpec) ProtoMessage()    {}
func (*ValidatorSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{9}
}
func (m *ValidatorSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSpec.Merge(m, src)
}
func (m *ValidatorSpec) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSpec proto.InternalMessageInfo

func (m *ValidatorSpec) GetFrequency() *FrequencySpec {
	if m != nil {
		return m.Frequency
	}
	return nil
}

type FrequencySpec struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Prob                 int64    `protobuf:"varint,2,opt,name=prob,proto3" json:"prob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrequencySpec) Reset()         { *m = FrequencySpec{} }
func (m *FrequencySpec) String() string { return proto.CompactTextString(m) }
func (*FrequencySpec) ProtoMessage()    {}
func (*FrequencySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{10}
}
func (m *FrequencySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrequencySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrequencySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrequencySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrequencySpec.Merge(m, src)
}
func (m *FrequencySpec) XXX_Size() int {
	return m.Size()
}
func (m *FrequencySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FrequencySpec.DiscardUnknown(m)
}

var xxx_messageInfo_FrequencySpec proto.InternalMessageInfo

func (m *FrequencySpec) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FrequencySpec) GetProb() int64 {
	if m != nil {
		return m.Prob
	}
	return 0
}

type State struct {
	Commits              []*State_Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{11}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetCommits() []*State_Commit {
	if m != nil {
		return m.Commits
	}
	return nil
}

type State_Commit struct {
	Commit               *pfs.Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Hash                 []byte      `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *State_Commit) Reset()         { *m = State_Commit{} }
func (m *State_Commit) String() string { return proto.CompactTextString(m) }
func (*State_Commit) ProtoMessage()    {}
func (*State_Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_09daff94cb257f39, []int{11, 0}
}
func (m *State_Commit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State_Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State_Commit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State_Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State_Commit.Merge(m, src)
}
func (m *State_Commit) XXX_Size() int {
	return m.Size()
}
func (m *State_Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_State_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_State_Commit proto.InternalMessageInfo

func (m *State_Commit) GetCommit() *pfs.Commit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *State_Commit) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*CommitSpec)(nil), "pfsload.CommitSpec")
	proto.RegisterType((*ModificationSpec)(nil), "pfsload.ModificationSpec")
	proto.RegisterType((*PutFileSpec)(nil), "pfsload.PutFileSpec")
	proto.RegisterType((*PutFileTask)(nil), "pfsload.PutFileTask")
	proto.RegisterType((*PutFileTaskResult)(nil), "pfsload.PutFileTaskResult")
	proto.RegisterType((*FileSourceSpec)(nil), "pfsload.FileSourceSpec")
	proto.RegisterType((*RandomFileSourceSpec)(nil), "pfsload.RandomFileSourceSpec")
	proto.RegisterType((*RandomDirectorySpec)(nil), "pfsload.RandomDirectorySpec")
	proto.RegisterType((*SizeSpec)(nil), "pfsload.SizeSpec")
	proto.RegisterType((*ValidatorSpec)(nil), "pfsload.ValidatorSpec")
	proto.RegisterType((*FrequencySpec)(nil), "pfsload.FrequencySpec")
	proto.RegisterType((*State)(nil), "pfsload.State")
	proto.RegisterType((*State_Commit)(nil), "pfsload.State.Commit")
}

func init() { proto.RegisterFile("internal/pfsload/pfsload.proto", fileDescriptor_09daff94cb257f39) }

var fileDescriptor_09daff94cb257f39 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x56, 0x96, 0xad, 0x6b, 0x4e, 0xd7, 0x69, 0x33, 0xdb, 0x08, 0x13, 0xab, 0xa6, 0x48, 0xc0,
	0xae, 0x5a, 0xa9, 0xfc, 0x08, 0xc6, 0x05, 0x12, 0x8c, 0x21, 0x24, 0x90, 0xa6, 0x74, 0x42, 0x02,
	0x2e, 0x22, 0x2f, 0x71, 0x89, 0xb5, 0xc6, 0x0e, 0xb6, 0x33, 0x6d, 0xbb, 0xe0, 0x19, 0x78, 0x06,
	0x9e, 0x86, 0x4b, 0x6e, 0xb8, 0x47, 0x7d, 0x12, 0x64, 0x27, 0x4e, 0x7f, 0xd4, 0x5e, 0xe5, 0xf8,
	0x9c, 0xef, 0x3b, 0xe7, 0xf3, 0xa7, 0x13, 0x43, 0x87, 0x32, 0x45, 0x04, 0xc3, 0xa3, 0x5e, 0x3e,
	0x94, 0x23, 0x8e, 0x13, 0xfb, 0xed, 0xe6, 0x82, 0x2b, 0x8e, 0xd6, 0xab, 0xe3, 0x7e, 0x3b, 0x1f,
	0x4a, 0x5d, 0x2b, 0xf3, 0xc1, 0x5f, 0x07, 0xe0, 0x0d, 0xcf, 0x32, 0xaa, 0x06, 0x39, 0x89, 0xd1,
	0x0e, 0xac, 0xc5, 0xbc, 0x60, 0xca, 0x77, 0x0e, 0x9d, 0x23, 0x37, 0x2c, 0x0f, 0xe8, 0x15, 0xb4,
	0x33, 0x9e, 0xd0, 0x21, 0x8d, 0xb1, 0xa2, 0x9c, 0x49, 0x7f, 0xe5, 0xd0, 0x3d, 0x6a, 0xf5, 0xef,
	0x75, 0xed, 0x8c, 0x8f, 0x53, 0x55, 0xdd, 0x27, 0x9c, 0xc5, 0xa3, 0x63, 0xd8, 0x18, 0xd2, 0x11,
	0x89, 0x24, 0x2f, 0x44, 0x4c, 0xa4, 0xef, 0x1a, 0xfe, 0xdd, 0x9a, 0x7f, 0x4a, 0x47, 0x64, 0x60,
	0x6a, 0x86, 0xdd, 0x1a, 0xd6, 0x67, 0x89, 0x9e, 0x80, 0x77, 0x85, 0x47, 0x34, 0xc1, 0x8a, 0x0b,
	0x7f, 0xf5, 0xd0, 0x39, 0x6a, 0xf5, 0xf7, 0x6a, 0xe2, 0x27, 0x5b, 0x31, 0xbc, 0x09, 0x30, 0xf8,
	0x0c, 0x5b, 0xf3, 0xa2, 0x96, 0x5c, 0xae, 0x07, 0xcd, 0xbc, 0x50, 0x91, 0x1e, 0xe9, 0xaf, 0x98,
	0xf6, 0x3b, 0x75, 0xfb, 0xb3, 0x42, 0x19, 0x69, 0xba, 0xf9, 0x7a, 0x5e, 0x1e, 0x82, 0x97, 0xd0,
	0x9a, 0xca, 0x2f, 0xe9, 0xba, 0x07, 0x8d, 0xf2, 0xb2, 0xa6, 0xa7, 0x17, 0x56, 0xa7, 0xe0, 0xa7,
	0x53, 0xb3, 0xcf, 0xb1, 0xbc, 0x5c, 0xc2, 0x7e, 0x0e, 0xad, 0x29, 0xbf, 0x2a, 0x59, 0x4b, 0xed,
	0x82, 0x89, 0x5d, 0x08, 0xc1, 0xaa, 0x24, 0x24, 0xf1, 0x5d, 0xd3, 0xce, 0xc4, 0xe8, 0x00, 0x00,
	0x17, 0x2a, 0x8d, 0x14, 0xbf, 0x24, 0xcc, 0x58, 0xe8, 0x85, 0x9e, 0xce, 0x9c, 0xeb, 0x44, 0xf0,
	0x0e, 0xb6, 0xa7, 0x14, 0x85, 0x44, 0x16, 0x23, 0x85, 0x3a, 0x56, 0x01, 0x51, 0x11, 0x4d, 0x8c,
	0x3a, 0x2f, 0xf4, 0xcc, 0x20, 0xa2, 0xde, 0x27, 0x7a, 0x4e, 0x8a, 0x65, 0x6a, 0xa4, 0x6d, 0x84,
	0x26, 0x0e, 0xbe, 0xc2, 0xe6, 0xac, 0x32, 0x8d, 0x62, 0x38, 0x23, 0x15, 0xdd, 0xc4, 0xe8, 0x29,
	0x34, 0x04, 0x66, 0x09, 0xcf, 0xaa, 0x6b, 0x1d, 0xd4, 0xd7, 0x0a, 0x4d, 0x7a, 0xee, 0x72, 0x15,
	0x38, 0xf8, 0xe5, 0xc0, 0xce, 0x22, 0x00, 0x3a, 0x06, 0x2f, 0xa1, 0x82, 0xc4, 0x8a, 0x8b, 0x1b,
	0x33, 0xa8, 0xd5, 0xbf, 0x3f, 0xd7, 0xf2, 0xc4, 0xd6, 0xcb, 0x2d, 0xa9, 0xe1, 0xe8, 0x11, 0xac,
	0x49, 0x7a, 0x4b, 0xec, 0x42, 0x6f, 0xd7, 0xbc, 0x01, 0xbd, 0x2d, 0xc7, 0x97, 0x75, 0xf4, 0x00,
	0x36, 0x29, 0x8b, 0x05, 0xc9, 0x08, 0x53, 0x51, 0x8e, 0x55, 0x6a, 0x0c, 0x6e, 0x86, 0xed, 0x3a,
	0x7b, 0x86, 0x55, 0x1a, 0x9c, 0xc1, 0x9d, 0x05, 0x13, 0xf5, 0x98, 0x84, 0xe4, 0x2a, 0xad, 0xe4,
	0x2d, 0x1a, 0x63, 0xea, 0x68, 0x0b, 0x5c, 0x51, 0x30, 0x63, 0x8c, 0x1b, 0xea, 0x30, 0xf8, 0x00,
	0x4d, 0x0b, 0x42, 0xbb, 0xd0, 0xcc, 0x28, 0x8b, 0xb4, 0xa2, 0x6a, 0x5d, 0xdc, 0x8c, 0x32, 0x93,
	0xc6, 0xd7, 0x65, 0xba, 0x62, 0x66, 0xf8, 0x5a, 0x7b, 0x9f, 0x0b, 0x7e, 0x61, 0x37, 0x41, 0xc7,
	0xc1, 0x5b, 0x68, 0xcf, 0xfc, 0x31, 0xfa, 0xe7, 0x1a, 0x0a, 0xf2, 0xbd, 0x20, 0x2c, 0xb6, 0xe6,
	0x4d, 0x7e, 0xae, 0x53, 0x5b, 0x29, 0x6d, 0xab, 0x81, 0xc1, 0x0b, 0x68, 0xcf, 0xd4, 0x96, 0x6c,
	0xb1, 0x55, 0xb0, 0x32, 0xa5, 0xe0, 0x07, 0xac, 0x0d, 0x14, 0x56, 0x04, 0xf5, 0x60, 0x3d, 0x36,
	0xef, 0x8e, 0xf4, 0x1d, 0x63, 0xfe, 0xee, 0xc4, 0x15, 0x0d, 0xe8, 0x96, 0xaf, 0x52, 0x68, 0x51,
	0xfb, 0x27, 0xd0, 0x28, 0x53, 0xe8, 0x21, 0x34, 0xca, 0x64, 0xa5, 0x78, 0x53, 0x33, 0xa3, 0xab,
	0xbe, 0xa5, 0x54, 0xd5, 0x45, 0x3b, 0xfa, 0xfa, 0xe4, 0xf7, 0xb8, 0xe3, 0xfc, 0x19, 0x77, 0x9c,
	0x7f, 0xe3, 0x8e, 0xf3, 0xe5, 0xd9, 0x37, 0xaa, 0xd2, 0xe2, 0xa2, 0x1b, 0xf3, 0xac, 0x97, 0xe3,
	0x38, 0xbd, 0x49, 0x88, 0x98, 0x8e, 0xae, 0xfa, 0x3d, 0x29, 0xe2, 0xde, 0xfc, 0xdb, 0x7a, 0xd1,
	0x30, 0x8f, 0xe7, 0xe3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x16, 0x95, 0x40, 0x76, 0x05,
	0x00, 0x00,
}

func (m *CommitSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.FileSources) > 0 {
		for iNdEx := len(m.FileSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FileSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfsload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Modifications) > 0 {
		for iNdEx := len(m.Modifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Modifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfsload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ModificationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModificationSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModificationSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PutFile != nil {
		{
			size, err := m.PutFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutFileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutFileSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutFileSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutFileTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutFileTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutFileTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthToken) > 0 {
		i -= len(m.AuthToken)
		copy(dAtA[i:], m.AuthToken)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.AuthToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.Seed != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x18
	}
	if m.FileSource != nil {
		{
			size, err := m.FileSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutFileTaskResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutFileTaskResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutFileTaskResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileSetId) > 0 {
		i -= len(m.FileSetId)
		copy(dAtA[i:], m.FileSetId)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.FileSetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileSourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSourceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSourceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Random != nil {
		{
			size, err := m.Random.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RandomFileSourceSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomFileSourceSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandomFileSourceSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IncrementPath {
		i--
		if m.IncrementPath {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sizes) > 0 {
		for iNdEx := len(m.Sizes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sizes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfsload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Directory != nil {
		{
			size, err := m.Directory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RandomDirectorySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandomDirectorySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RandomDirectorySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Run != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Run))
		i--
		dAtA[i] = 0x10
	}
	if m.Depth != nil {
		{
			size, err := m.Depth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SizeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SizeSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SizeSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Prob != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Prob))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxSize != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.MaxSize))
		i--
		dAtA[i] = 0x10
	}
	if m.MinSize != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.MinSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Frequency != nil {
		{
			size, err := m.Frequency.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FrequencySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrequencySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrequencySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Prob != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Prob))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintPfsload(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commits) > 0 {
		for iNdEx := len(m.Commits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPfsload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *State_Commit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State_Commit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State_Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintPfsload(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Commit != nil {
		{
			size, err := m.Commit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPfsload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPfsload(dAtA []byte, offset int, v uint64) int {
	offset -= sovPfsload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommitSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPfsload(uint64(m.Count))
	}
	if len(m.Modifications) > 0 {
		for _, e := range m.Modifications {
			l = e.Size()
			n += 1 + l + sovPfsload(uint64(l))
		}
	}
	if len(m.FileSources) > 0 {
		for _, e := range m.FileSources {
			l = e.Size()
			n += 1 + l + sovPfsload(uint64(l))
		}
	}
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModificationSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPfsload(uint64(m.Count))
	}
	if m.PutFile != nil {
		l = m.PutFile.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutFileSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPfsload(uint64(m.Count))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutFileTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPfsload(uint64(m.Count))
	}
	if m.FileSource != nil {
		l = m.FileSource.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.Seed != 0 {
		n += 1 + sovPfsload(uint64(m.Seed))
	}
	l = len(m.AuthToken)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutFileTaskResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileSetId)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileSourceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.Random != nil {
		l = m.Random.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RandomFileSourceSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Directory != nil {
		l = m.Directory.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if len(m.Sizes) > 0 {
		for _, e := range m.Sizes {
			l = e.Size()
			n += 1 + l + sovPfsload(uint64(l))
		}
	}
	if m.IncrementPath {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RandomDirectorySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Depth != nil {
		l = m.Depth.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.Run != 0 {
		n += 1 + sovPfsload(uint64(m.Run))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SizeSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinSize != 0 {
		n += 1 + sovPfsload(uint64(m.MinSize))
	}
	if m.MaxSize != 0 {
		n += 1 + sovPfsload(uint64(m.MaxSize))
	}
	if m.Prob != 0 {
		n += 1 + sovPfsload(uint64(m.Prob))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidatorSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frequency != nil {
		l = m.Frequency.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrequencySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPfsload(uint64(m.Count))
	}
	if m.Prob != 0 {
		n += 1 + sovPfsload(uint64(m.Prob))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commits) > 0 {
		for _, e := range m.Commits {
			l = e.Size()
			n += 1 + l + sovPfsload(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *State_Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commit != nil {
		l = m.Commit.Size()
		n += 1 + l + sovPfsload(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovPfsload(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPfsload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPfsload(x uint64) (n int) {
	return sovPfsload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommitSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modifications = append(m.Modifications, &ModificationSpec{})
			if err := m.Modifications[len(m.Modifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSources = append(m.FileSources, &FileSourceSpec{})
			if err := m.FileSources[len(m.FileSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &ValidatorSpec{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModificationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModificationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModificationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutFile == nil {
				m.PutFile = &PutFileSpec{}
			}
			if err := m.PutFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutFileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutFileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutFileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutFileTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutFileTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutFileTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileSource == nil {
				m.FileSource = &FileSourceSpec{}
			}
			if err := m.FileSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutFileTaskResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutFileTaskResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutFileTaskResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Random == nil {
				m.Random = &RandomFileSourceSpec{}
			}
			if err := m.Random.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomFileSourceSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomFileSourceSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomFileSourceSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Directory == nil {
				m.Directory = &RandomDirectorySpec{}
			}
			if err := m.Directory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sizes = append(m.Sizes, &SizeSpec{})
			if err := m.Sizes[len(m.Sizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementPath", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncrementPath = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandomDirectorySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandomDirectorySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandomDirectorySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Depth == nil {
				m.Depth = &SizeSpec{}
			}
			if err := m.Depth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			m.Run = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Run |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SizeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SizeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SizeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSize", wireType)
			}
			m.MinSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSize", wireType)
			}
			m.MaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prob", wireType)
			}
			m.Prob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prob |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frequency == nil {
				m.Frequency = &FrequencySpec{}
			}
			if err := m.Frequency.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrequencySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrequencySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrequencySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prob", wireType)
			}
			m.Prob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prob |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits, &State_Commit{})
			if err := m.Commits[len(m.Commits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State_Commit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commit == nil {
				m.Commit = &pfs.Commit{}
			}
			if err := m.Commit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPfsload
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPfsload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPfsload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPfsload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPfsload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPfsload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPfsload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPfsload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPfsload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPfsload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPfsload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPfsload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPfsload = fmt.Errorf("proto: unexpected end of group")
)

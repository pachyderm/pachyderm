// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/config/config.proto

package config

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetV1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "V1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "V1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetV1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "V1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetV2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "V2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigValidationError{
					field:  "V2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetV2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigValidationError{
				field:  "V2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on ConfigV1 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigV1MultiError, or nil
// if none found.
func (m *ConfigV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PachdAddress

	// no validation rules for ServerCas

	// no validation rules for SessionToken

	// no validation rules for ActiveTransaction

	if len(errors) > 0 {
		return ConfigV1MultiError(errors)
	}

	return nil
}

// ConfigV1MultiError is an error wrapping multiple validation errors returned
// by ConfigV1.ValidateAll() if the designated constraints aren't met.
type ConfigV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigV1MultiError) AllErrors() []error { return m }

// ConfigV1ValidationError is the validation error returned by
// ConfigV1.Validate if the designated constraints aren't met.
type ConfigV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigV1ValidationError) ErrorName() string { return "ConfigV1ValidationError" }

// Error satisfies the builtin error interface
func (e ConfigV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigV1ValidationError{}

// Validate checks the field values on ConfigV2 with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigV2) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigV2 with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigV2MultiError, or nil
// if none found.
func (m *ConfigV2) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigV2) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActiveContext

	// no validation rules for ActiveEnterpriseContext

	{
		sorted_keys := make([]string, len(m.GetContexts()))
		i := 0
		for key := range m.GetContexts() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetContexts()[key]
			_ = val

			// no validation rules for Contexts[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConfigV2ValidationError{
							field:  fmt.Sprintf("Contexts[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConfigV2ValidationError{
							field:  fmt.Sprintf("Contexts[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConfigV2ValidationError{
						field:  fmt.Sprintf("Contexts[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Metrics

	// no validation rules for MaxShellCompletions

	if len(errors) > 0 {
		return ConfigV2MultiError(errors)
	}

	return nil
}

// ConfigV2MultiError is an error wrapping multiple validation errors returned
// by ConfigV2.ValidateAll() if the designated constraints aren't met.
type ConfigV2MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigV2MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigV2MultiError) AllErrors() []error { return m }

// ConfigV2ValidationError is the validation error returned by
// ConfigV2.Validate if the designated constraints aren't met.
type ConfigV2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigV2ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigV2ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigV2ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigV2ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigV2ValidationError) ErrorName() string { return "ConfigV2ValidationError" }

// Error satisfies the builtin error interface
func (e ConfigV2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigV2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigV2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigV2ValidationError{}

// Validate checks the field values on Context with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Context) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Context with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ContextMultiError, or nil if none found.
func (m *Context) ValidateAll() error {
	return m.validate(true)
}

func (m *Context) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for PachdAddress

	// no validation rules for ServerCas

	// no validation rules for SessionToken

	// no validation rules for ActiveTransaction

	// no validation rules for ClusterName

	// no validation rules for AuthInfo

	// no validation rules for Namespace

	// no validation rules for PortForwarders

	// no validation rules for ClusterDeploymentId

	// no validation rules for EnterpriseServer

	// no validation rules for Project

	if len(errors) > 0 {
		return ContextMultiError(errors)
	}

	return nil
}

// ContextMultiError is an error wrapping multiple validation errors returned
// by Context.ValidateAll() if the designated constraints aren't met.
type ContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextMultiError) AllErrors() []error { return m }

// ContextValidationError is the validation error returned by Context.Validate
// if the designated constraints aren't met.
type ContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextValidationError) ErrorName() string { return "ContextValidationError" }

// Error satisfies the builtin error interface
func (e ContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextValidationError{}

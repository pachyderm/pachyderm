load("@rules_go//go:def.bzl", "go_library", "go_test")

LINUX_LIBRARIES = [
    "//private/apt:libpq.so.5",
    "//private/apt:libldap-2.5.so.0",
    "//private/apt:liblber-2.5.so.0",
    "//private/apt:libsasl2.so.2",
]

LINUX_VARS = {
    "pgdump": "$(rlocationpath //tools/postgres/pg_dump)",
    "psql": "$(rlocationpath //tools/postgres/psql)",
    "libpq": "$(rlocationpath //private/apt:libpq.so.5)",
    "libldap": "$(rlocationpath //private/apt:libldap-2.5.so.0)",
    "liblber": "$(rlocationpath //private/apt:liblber-2.5.so.0)",
    "libsasl": "$(rlocationpath //private/apt:libsasl2.so.2)",
}

MAC_LIBRARIES = [
    "@com_enterprisedb_get_postgresql_macos//:lib/libpq.5.dylib",
    "@com_enterprisedb_get_postgresql_macos//:lib/libpq.dylib",
]

MAC_VARS = {
    "pgdump": "$(rlocationpath //tools/postgres/pg_dump)",
    "psql": "$(rlocationpath //tools/postgres/psql)",
    "libpq": "$(rlocationpath @com_enterprisedb_get_postgresql_macos//:lib/libpq.5.dylib)",
}

go_library(
    name = "snapshot",
    srcs = [
        "api_server.go",
        "recovery.go",
    ],
    data = [
        "//tools/postgres/pg_dump",
        "//tools/postgres/psql",
    ] + select({
        "@platforms//os:linux": LINUX_LIBRARIES,
        "@platforms//os:macos": MAC_LIBRARIES,
    }),
    importpath = "github.com/pachyderm/pachyderm/v2/src/internal/snapshot",
    visibility = ["//src:__subpackages__"],
    x_defs = select({
        "@platforms//os:linux": LINUX_VARS,
        "@platforms//os:macos": MAC_VARS,
    }),
    deps = [
        "//src/internal/bazel",
        "//src/internal/clusterstate",
        "//src/internal/dbutil",
        "//src/internal/errors",
        "//src/internal/log",
        "//src/internal/migrations",
        "//src/internal/pachsql",
        "//src/internal/pctx",
        "//src/internal/pgjsontypes",
        "//src/internal/snapshotdb",
        "//src/internal/storage/fileset",
        "//src/snapshot",
        "//src/version",
        "@com_github_icholy_replace//:replace",
        "@com_github_jmoiron_sqlx//:sqlx",
        "@com_github_klauspost_compress//zstd",
        "@com_github_satori_go_uuid//:go_uuid",
        "@io_etcd_go_etcd_client_v3//:client",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_x_mod//semver",
        "@org_golang_x_text//transform",
        "@org_uber_go_zap//:zap",
        "@rules_go//go/runfiles:go_default_library",
    ],
)

go_test(
    name = "snapshot_test",
    srcs = [
        "recovery_test.go",
        "server_internal_test.go",
    ],
    embed = [":snapshot"],
    deps = [
        "//src/internal/clusterstate",
        "//src/internal/dbutil",
        "//src/internal/dockertestenv",
        "//src/internal/errors",
        "//src/internal/grpcutil",
        "//src/internal/pachd",
        "//src/internal/pachsql",
        "//src/internal/pctx",
        "//src/internal/require",
        "//src/internal/storage/chunk",
        "//src/internal/storage/fileset",
        "//src/internal/storage/kv",
        "//src/internal/storage/track",
        "//src/snapshot",
        "//src/version",
        "@com_github_google_go_cmp//cmp",
        "@com_github_klauspost_compress//zstd",
        "@com_github_satori_go_uuid//:go_uuid",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//testing/protocmp",
    ],
)

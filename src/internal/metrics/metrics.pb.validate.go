// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/metrics/metrics.proto

package metrics

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metrics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metrics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metrics with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetricsMultiError, or nil if none found.
func (m *Metrics) ValidateAll() error {
	return m.validate(true)
}

func (m *Metrics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClusterId

	// no validation rules for PodId

	// no validation rules for Nodes

	// no validation rules for Version

	// no validation rules for Repos

	// no validation rules for Commits

	// no validation rules for Files

	// no validation rules for Bytes

	// no validation rules for Jobs

	// no validation rules for Pipelines

	// no validation rules for ArchivedCommits

	// no validation rules for CancelledCommits

	// no validation rules for ActivationCode

	// no validation rules for MaxBranches

	// no validation rules for PpsSpout

	// no validation rules for PpsSpoutService

	// no validation rules for CfgEgress

	// no validation rules for CfgStandby

	// no validation rules for CfgS3Gateway

	// no validation rules for CfgServices

	// no validation rules for CfgErrcmd

	// no validation rules for CfgTfjob

	// no validation rules for InputGroup

	// no validation rules for InputJoin

	// no validation rules for InputCross

	// no validation rules for InputUnion

	// no validation rules for InputCron

	// no validation rules for InputGit

	// no validation rules for InputPfs

	// no validation rules for InputCommit

	// no validation rules for InputJoinOn

	// no validation rules for InputOuterJoin

	// no validation rules for InputLazy

	// no validation rules for InputEmptyFiles

	// no validation rules for InputS3

	// no validation rules for InputTrigger

	// no validation rules for ResourceCpuReq

	// no validation rules for ResourceCpuReqMax

	// no validation rules for ResourceMemReq

	// no validation rules for ResourceGpuReq

	// no validation rules for ResourceGpuReqMax

	// no validation rules for ResourceDiskReq

	// no validation rules for ResourceCpuLimit

	// no validation rules for ResourceCpuLimitMax

	// no validation rules for ResourceMemLimit

	// no validation rules for ResourceGpuLimit

	// no validation rules for ResourceGpuLimitMax

	// no validation rules for ResourceDiskLimit

	// no validation rules for MaxParallelism

	// no validation rules for MinParallelism

	// no validation rules for NumParallelism

	// no validation rules for EnterpriseFailures

	// no validation rules for PipelineWithAlerts

	if len(errors) > 0 {
		return MetricsMultiError(errors)
	}

	return nil
}

// MetricsMultiError is an error wrapping multiple validation errors returned
// by Metrics.ValidateAll() if the designated constraints aren't met.
type MetricsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsMultiError) AllErrors() []error { return m }

// MetricsValidationError is the validation error returned by Metrics.Validate
// if the designated constraints aren't met.
type MetricsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsValidationError) ErrorName() string { return "MetricsValidationError" }

// Error satisfies the builtin error interface
func (e MetricsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetrics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsValidationError{}

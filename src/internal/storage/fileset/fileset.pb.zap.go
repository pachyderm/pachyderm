// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: internal/storage/fileset/fileset.proto

package fileset

import (
	zapcore "go.uber.org/zap/zapcore"
)

func (x *Metadata) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.GetPrimitive()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("primitive", obj)
	} else {
		enc.AddReflected("primitive", x.GetPrimitive())
	}
	if obj, ok := interface{}(x.GetComposite()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("composite", obj)
	} else {
		enc.AddReflected("composite", x.GetComposite())
	}
	return nil
}

func (x *Composite) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	layersArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Layers {
			enc.AppendString(v)
		}
		return nil
	}
	enc.AddArray("layers", zapcore.ArrayMarshalerFunc(layersArrMarshaller))
	return nil
}

func (x *Primitive) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Deletive).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("deletive", obj)
	} else {
		enc.AddReflected("deletive", x.Deletive)
	}
	if obj, ok := interface{}(x.Additive).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("additive", obj)
	} else {
		enc.AddReflected("additive", x.Additive)
	}
	enc.AddInt64("size_bytes", x.SizeBytes)
	return nil
}

func (x *TestCacheValue) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("file_set_id", x.FileSetId)
	return nil
}

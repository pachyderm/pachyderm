// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: internal/storage/fileset/index/index.proto

package index

import (
	zapcore "go.uber.org/zap/zapcore"
)

func (x *Index) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("path", x.Path)
	if obj, ok := interface{}(x.Range).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("range", obj)
	} else {
		enc.AddReflected("range", x.Range)
	}
	if obj, ok := interface{}(x.File).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("file", obj)
	} else {
		enc.AddReflected("file", x.File)
	}
	enc.AddInt64("num_files", x.NumFiles)
	enc.AddInt64("size_bytes", x.SizeBytes)
	return nil
}

func (x *Range) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("offset", x.Offset)
	enc.AddString("last_path", x.LastPath)
	if obj, ok := interface{}(x.ChunkRef).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("chunk_ref", obj)
	} else {
		enc.AddReflected("chunk_ref", x.ChunkRef)
	}
	return nil
}

func (x *File) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("datum", x.Datum)
	data_refsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.DataRefs {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("data_refs", zapcore.ArrayMarshalerFunc(data_refsArrMarshaller))
	return nil
}

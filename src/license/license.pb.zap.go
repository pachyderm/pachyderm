// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: license/license.proto

package license

import (
	protoextensions "github.com/pachyderm/pachyderm/v2/src/protoextensions"
	zapcore "go.uber.org/zap/zapcore"
)

func (x *ActivateRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	protoextensions.AddHalfString(enc, "activation_code", x.ActivationCode)
	protoextensions.AddTimestamp(enc, "expires", x.Expires)
	return nil
}

func (x *ActivateResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddObject("info", x.Info)
	return nil
}

func (x *GetActivationCodeRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *GetActivationCodeResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("state", x.State.String())
	enc.AddObject("info", x.Info)
	protoextensions.AddHalfString(enc, "activation_code", x.ActivationCode)
	return nil
}

func (x *DeactivateRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *DeactivateResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *AddClusterRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	enc.AddString("address", x.Address)
	protoextensions.AddHalfString(enc, "secret", x.Secret)
	enc.AddString("user_address", x.UserAddress)
	enc.AddString("cluster_deployment_id", x.ClusterDeploymentId)
	enc.AddBool("enterprise_server", x.EnterpriseServer)
	return nil
}

func (x *AddClusterResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	protoextensions.AddHalfString(enc, "secret", x.Secret)
	return nil
}

func (x *DeleteClusterRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	return nil
}

func (x *DeleteClusterResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ClusterStatus) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	enc.AddString("address", x.Address)
	enc.AddString("version", x.Version)
	enc.AddBool("auth_enabled", x.AuthEnabled)
	enc.AddString("client_id", x.ClientId)
	protoextensions.AddTimestamp(enc, "last_heartbeat", x.LastHeartbeat)
	protoextensions.AddTimestamp(enc, "created_at", x.CreatedAt)
	return nil
}

func (x *UpdateClusterRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	enc.AddString("address", x.Address)
	enc.AddString("user_address", x.UserAddress)
	enc.AddString("cluster_deployment_id", x.ClusterDeploymentId)
	enc.AddString("secret", x.Secret)
	return nil
}

func (x *UpdateClusterResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ListClustersRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ListClustersResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	clustersArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Clusters {
			enc.AppendObject(v)
		}
		return nil
	}
	enc.AddArray("clusters", zapcore.ArrayMarshalerFunc(clustersArrMarshaller))
	return nil
}

func (x *DeleteAllRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *DeleteAllResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *HeartbeatRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	protoextensions.AddHalfString(enc, "secret", x.Secret)
	enc.AddString("version", x.Version)
	enc.AddBool("auth_enabled", x.AuthEnabled)
	enc.AddString("client_id", x.ClientId)
	return nil
}

func (x *HeartbeatResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddObject("license", x.License)
	return nil
}

func (x *UserClusterInfo) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("id", x.Id)
	enc.AddString("cluster_deployment_id", x.ClusterDeploymentId)
	enc.AddString("address", x.Address)
	enc.AddBool("enterprise_server", x.EnterpriseServer)
	return nil
}

func (x *ListUserClustersRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ListUserClustersResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	clustersArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Clusters {
			enc.AppendObject(v)
		}
		return nil
	}
	enc.AddArray("clusters", zapcore.ArrayMarshalerFunc(clustersArrMarshaller))
	return nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: worker/worker.proto

package worker

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CancelRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelRequestMultiError, or
// nil if none found.
func (m *CancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	if len(errors) > 0 {
		return CancelRequestMultiError(errors)
	}

	return nil
}

// CancelRequestMultiError is an error wrapping multiple validation errors
// returned by CancelRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelRequestMultiError) AllErrors() []error { return m }

// CancelRequestValidationError is the validation error returned by
// CancelRequest.Validate if the designated constraints aren't met.
type CancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelRequestValidationError) ErrorName() string { return "CancelRequestValidationError" }

// Error satisfies the builtin error interface
func (e CancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelRequestValidationError{}

// Validate checks the field values on CancelResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelResponseMultiError,
// or nil if none found.
func (m *CancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return CancelResponseMultiError(errors)
	}

	return nil
}

// CancelResponseMultiError is an error wrapping multiple validation errors
// returned by CancelResponse.ValidateAll() if the designated constraints
// aren't met.
type CancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelResponseMultiError) AllErrors() []error { return m }

// CancelResponseValidationError is the validation error returned by
// CancelResponse.Validate if the designated constraints aren't met.
type CancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelResponseValidationError) ErrorName() string { return "CancelResponseValidationError" }

// Error satisfies the builtin error interface
func (e CancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelResponseValidationError{}

// Validate checks the field values on NextDatumRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextDatumRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextDatumRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextDatumRequestMultiError, or nil if none found.
func (m *NextDatumRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NextDatumRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Error

	if len(errors) > 0 {
		return NextDatumRequestMultiError(errors)
	}

	return nil
}

// NextDatumRequestMultiError is an error wrapping multiple validation errors
// returned by NextDatumRequest.ValidateAll() if the designated constraints
// aren't met.
type NextDatumRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextDatumRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextDatumRequestMultiError) AllErrors() []error { return m }

// NextDatumRequestValidationError is the validation error returned by
// NextDatumRequest.Validate if the designated constraints aren't met.
type NextDatumRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextDatumRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextDatumRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextDatumRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextDatumRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextDatumRequestValidationError) ErrorName() string { return "NextDatumRequestValidationError" }

// Error satisfies the builtin error interface
func (e NextDatumRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextDatumRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextDatumRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextDatumRequestValidationError{}

// Validate checks the field values on NextDatumResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NextDatumResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NextDatumResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NextDatumResponseMultiError, or nil if none found.
func (m *NextDatumResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NextDatumResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NextDatumResponseMultiError(errors)
	}

	return nil
}

// NextDatumResponseMultiError is an error wrapping multiple validation errors
// returned by NextDatumResponse.ValidateAll() if the designated constraints
// aren't met.
type NextDatumResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NextDatumResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NextDatumResponseMultiError) AllErrors() []error { return m }

// NextDatumResponseValidationError is the validation error returned by
// NextDatumResponse.Validate if the designated constraints aren't met.
type NextDatumResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NextDatumResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NextDatumResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NextDatumResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NextDatumResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NextDatumResponseValidationError) ErrorName() string {
	return "NextDatumResponseValidationError"
}

// Error satisfies the builtin error interface
func (e NextDatumResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNextDatumResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NextDatumResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NextDatumResponseValidationError{}

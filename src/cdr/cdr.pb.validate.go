// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cdr/cdr.proto

package cdr

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Ref with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ref) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ref with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RefMultiError, or nil if none found.
func (m *Ref) ValidateAll() error {
	return m.validate(true)
}

func (m *Ref) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Body.(type) {
	case *Ref_Http:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetHttp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Http",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_ContentHash:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContentHash()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "ContentHash",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "ContentHash",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContentHash()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "ContentHash",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_SizeLimits:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSizeLimits()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "SizeLimits",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "SizeLimits",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSizeLimits()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "SizeLimits",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_Cipher:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCipher()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Cipher",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Cipher",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCipher()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "Cipher",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_Compress:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetCompress()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Compress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Compress",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompress()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "Compress",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_Slice:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSlice()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Slice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Slice",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSlice()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "Slice",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Ref_Concat:
		if v == nil {
			err := RefValidationError{
				field:  "Body",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConcat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Concat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefValidationError{
						field:  "Concat",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConcat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefValidationError{
					field:  "Concat",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RefMultiError(errors)
	}

	return nil
}

// RefMultiError is an error wrapping multiple validation errors returned by
// Ref.ValidateAll() if the designated constraints aren't met.
type RefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefMultiError) AllErrors() []error { return m }

// RefValidationError is the validation error returned by Ref.Validate if the
// designated constraints aren't met.
type RefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefValidationError) ErrorName() string { return "RefValidationError" }

// Error satisfies the builtin error interface
func (e RefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefValidationError{}

// Validate checks the field values on HTTP with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTP with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HTTPMultiError, or nil if none found.
func (m *HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Headers

	if len(errors) > 0 {
		return HTTPMultiError(errors)
	}

	return nil
}

// HTTPMultiError is an error wrapping multiple validation errors returned by
// HTTP.ValidateAll() if the designated constraints aren't met.
type HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPMultiError) AllErrors() []error { return m }

// HTTPValidationError is the validation error returned by HTTP.Validate if the
// designated constraints aren't met.
type HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPValidationError) ErrorName() string { return "HTTPValidationError" }

// Error satisfies the builtin error interface
func (e HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPValidationError{}

// Validate checks the field values on ContentHash with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContentHash) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContentHash with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContentHashMultiError, or
// nil if none found.
func (m *ContentHash) ValidateAll() error {
	return m.validate(true)
}

func (m *ContentHash) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContentHashValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContentHashValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContentHashValidationError{
				field:  "Inner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Algo

	// no validation rules for Hash

	if len(errors) > 0 {
		return ContentHashMultiError(errors)
	}

	return nil
}

// ContentHashMultiError is an error wrapping multiple validation errors
// returned by ContentHash.ValidateAll() if the designated constraints aren't met.
type ContentHashMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContentHashMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContentHashMultiError) AllErrors() []error { return m }

// ContentHashValidationError is the validation error returned by
// ContentHash.Validate if the designated constraints aren't met.
type ContentHashValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContentHashValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContentHashValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContentHashValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContentHashValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContentHashValidationError) ErrorName() string { return "ContentHashValidationError" }

// Error satisfies the builtin error interface
func (e ContentHashValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContentHash.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContentHashValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContentHashValidationError{}

// Validate checks the field values on SizeLimits with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SizeLimits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SizeLimits with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SizeLimitsMultiError, or
// nil if none found.
func (m *SizeLimits) ValidateAll() error {
	return m.validate(true)
}

func (m *SizeLimits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SizeLimitsValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SizeLimitsValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SizeLimitsValidationError{
				field:  "Inner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return SizeLimitsMultiError(errors)
	}

	return nil
}

// SizeLimitsMultiError is an error wrapping multiple validation errors
// returned by SizeLimits.ValidateAll() if the designated constraints aren't met.
type SizeLimitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SizeLimitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SizeLimitsMultiError) AllErrors() []error { return m }

// SizeLimitsValidationError is the validation error returned by
// SizeLimits.Validate if the designated constraints aren't met.
type SizeLimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SizeLimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SizeLimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SizeLimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SizeLimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SizeLimitsValidationError) ErrorName() string { return "SizeLimitsValidationError" }

// Error satisfies the builtin error interface
func (e SizeLimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSizeLimits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SizeLimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SizeLimitsValidationError{}

// Validate checks the field values on Cipher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Cipher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cipher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CipherMultiError, or nil if none found.
func (m *Cipher) ValidateAll() error {
	return m.validate(true)
}

func (m *Cipher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CipherValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CipherValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CipherValidationError{
				field:  "Inner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Algo

	// no validation rules for Key

	// no validation rules for Nonce

	if len(errors) > 0 {
		return CipherMultiError(errors)
	}

	return nil
}

// CipherMultiError is an error wrapping multiple validation errors returned by
// Cipher.ValidateAll() if the designated constraints aren't met.
type CipherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CipherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CipherMultiError) AllErrors() []error { return m }

// CipherValidationError is the validation error returned by Cipher.Validate if
// the designated constraints aren't met.
type CipherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CipherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CipherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CipherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CipherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CipherValidationError) ErrorName() string { return "CipherValidationError" }

// Error satisfies the builtin error interface
func (e CipherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCipher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CipherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CipherValidationError{}

// Validate checks the field values on Compress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Compress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Compress with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CompressMultiError, or nil
// if none found.
func (m *Compress) ValidateAll() error {
	return m.validate(true)
}

func (m *Compress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CompressValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CompressValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompressValidationError{
				field:  "Inner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Algo

	if len(errors) > 0 {
		return CompressMultiError(errors)
	}

	return nil
}

// CompressMultiError is an error wrapping multiple validation errors returned
// by Compress.ValidateAll() if the designated constraints aren't met.
type CompressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompressMultiError) AllErrors() []error { return m }

// CompressValidationError is the validation error returned by
// Compress.Validate if the designated constraints aren't met.
type CompressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressValidationError) ErrorName() string { return "CompressValidationError" }

// Error satisfies the builtin error interface
func (e CompressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressValidationError{}

// Validate checks the field values on Slice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Slice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Slice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SliceMultiError, or nil if none found.
func (m *Slice) ValidateAll() error {
	return m.validate(true)
}

func (m *Slice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SliceValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SliceValidationError{
					field:  "Inner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SliceValidationError{
				field:  "Inner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Start

	// no validation rules for End

	if len(errors) > 0 {
		return SliceMultiError(errors)
	}

	return nil
}

// SliceMultiError is an error wrapping multiple validation errors returned by
// Slice.ValidateAll() if the designated constraints aren't met.
type SliceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SliceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SliceMultiError) AllErrors() []error { return m }

// SliceValidationError is the validation error returned by Slice.Validate if
// the designated constraints aren't met.
type SliceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SliceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SliceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SliceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SliceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SliceValidationError) ErrorName() string { return "SliceValidationError" }

// Error satisfies the builtin error interface
func (e SliceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SliceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SliceValidationError{}

// Validate checks the field values on Concat with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Concat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Concat with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConcatMultiError, or nil if none found.
func (m *Concat) ValidateAll() error {
	return m.validate(true)
}

func (m *Concat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRefs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConcatValidationError{
						field:  fmt.Sprintf("Refs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConcatValidationError{
						field:  fmt.Sprintf("Refs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConcatValidationError{
					field:  fmt.Sprintf("Refs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConcatMultiError(errors)
	}

	return nil
}

// ConcatMultiError is an error wrapping multiple validation errors returned by
// Concat.ValidateAll() if the designated constraints aren't met.
type ConcatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcatMultiError) AllErrors() []error { return m }

// ConcatValidationError is the validation error returned by Concat.Validate if
// the designated constraints aren't met.
type ConcatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcatValidationError) ErrorName() string { return "ConcatValidationError" }

// Error satisfies the builtin error interface
func (e ConcatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcatValidationError{}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: pps/pps.proto

package pps

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/chrusty/protoc-gen-jsonschema"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	pfs "github.com/pachyderm/pachyderm/v2/src/pfs"
	task "github.com/pachyderm/pachyderm/v2/src/task"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobState int32

const (
	JobState_JOB_STATE_UNKNOWN JobState = 0
	JobState_JOB_CREATED       JobState = 1
	JobState_JOB_STARTING      JobState = 2
	JobState_JOB_RUNNING       JobState = 3
	JobState_JOB_FAILURE       JobState = 4
	JobState_JOB_SUCCESS       JobState = 5
	JobState_JOB_KILLED        JobState = 6
	JobState_JOB_EGRESSING     JobState = 7
	JobState_JOB_FINISHING     JobState = 8
	JobState_JOB_UNRUNNABLE    JobState = 9
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "JOB_STATE_UNKNOWN",
		1: "JOB_CREATED",
		2: "JOB_STARTING",
		3: "JOB_RUNNING",
		4: "JOB_FAILURE",
		5: "JOB_SUCCESS",
		6: "JOB_KILLED",
		7: "JOB_EGRESSING",
		8: "JOB_FINISHING",
		9: "JOB_UNRUNNABLE",
	}
	JobState_value = map[string]int32{
		"JOB_STATE_UNKNOWN": 0,
		"JOB_CREATED":       1,
		"JOB_STARTING":      2,
		"JOB_RUNNING":       3,
		"JOB_FAILURE":       4,
		"JOB_SUCCESS":       5,
		"JOB_KILLED":        6,
		"JOB_EGRESSING":     7,
		"JOB_FINISHING":     8,
		"JOB_UNRUNNABLE":    9,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{0}
}

type DatumState int32

const (
	DatumState_UNKNOWN   DatumState = 0 // or not part of a job
	DatumState_FAILED    DatumState = 1
	DatumState_SUCCESS   DatumState = 2
	DatumState_SKIPPED   DatumState = 3
	DatumState_STARTING  DatumState = 4
	DatumState_RECOVERED DatumState = 5
)

// Enum value maps for DatumState.
var (
	DatumState_name = map[int32]string{
		0: "UNKNOWN",
		1: "FAILED",
		2: "SUCCESS",
		3: "SKIPPED",
		4: "STARTING",
		5: "RECOVERED",
	}
	DatumState_value = map[string]int32{
		"UNKNOWN":   0,
		"FAILED":    1,
		"SUCCESS":   2,
		"SKIPPED":   3,
		"STARTING":  4,
		"RECOVERED": 5,
	}
)

func (x DatumState) Enum() *DatumState {
	p := new(DatumState)
	*p = x
	return p
}

func (x DatumState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatumState) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[1].Descriptor()
}

func (DatumState) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[1]
}

func (x DatumState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatumState.Descriptor instead.
func (DatumState) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{1}
}

type WorkerState int32

const (
	WorkerState_WORKER_STATE_UNKNOWN WorkerState = 0
	WorkerState_POD_RUNNING          WorkerState = 1
	WorkerState_POD_SUCCESS          WorkerState = 2
	WorkerState_POD_FAILED           WorkerState = 3
)

// Enum value maps for WorkerState.
var (
	WorkerState_name = map[int32]string{
		0: "WORKER_STATE_UNKNOWN",
		1: "POD_RUNNING",
		2: "POD_SUCCESS",
		3: "POD_FAILED",
	}
	WorkerState_value = map[string]int32{
		"WORKER_STATE_UNKNOWN": 0,
		"POD_RUNNING":          1,
		"POD_SUCCESS":          2,
		"POD_FAILED":           3,
	}
)

func (x WorkerState) Enum() *WorkerState {
	p := new(WorkerState)
	*p = x
	return p
}

func (x WorkerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerState) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[2].Descriptor()
}

func (WorkerState) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[2]
}

func (x WorkerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerState.Descriptor instead.
func (WorkerState) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{2}
}

type PipelineState int32

const (
	PipelineState_PIPELINE_STATE_UNKNOWN PipelineState = 0
	// There is a PipelineInfo + spec commit, but no RC
	// This happens when a pipeline has been created but not yet picked up by a
	// PPS server.
	PipelineState_PIPELINE_STARTING PipelineState = 1
	// A pipeline has a spec commit and a service + RC
	// This is the normal state of a pipeline.
	PipelineState_PIPELINE_RUNNING PipelineState = 2
	// Equivalent to STARTING (there is a PipelineInfo + commit, but no RC)
	// After some error caused runPipeline to exit, but before the pipeline is
	// re-run. This is when the exponential backoff is in effect.
	PipelineState_PIPELINE_RESTARTING PipelineState = 3
	// The pipeline has encountered unrecoverable errors and is no longer being
	// retried. It won't leave this state until the pipeline is updated.
	PipelineState_PIPELINE_FAILURE PipelineState = 4
	// The pipeline has been explicitly paused by the user (the pipeline spec's
	// Stopped field should be true if the pipeline is in this state)
	PipelineState_PIPELINE_PAUSED PipelineState = 5
	// The pipeline is fully functional, but there are no commits to process.
	PipelineState_PIPELINE_STANDBY PipelineState = 6
	// The pipeline's workers are crashing, or failing to come up, this may
	// resolve itself, the pipeline may make progress while in this state if the
	// problem is only being experienced by some workers.
	PipelineState_PIPELINE_CRASHING PipelineState = 7
)

// Enum value maps for PipelineState.
var (
	PipelineState_name = map[int32]string{
		0: "PIPELINE_STATE_UNKNOWN",
		1: "PIPELINE_STARTING",
		2: "PIPELINE_RUNNING",
		3: "PIPELINE_RESTARTING",
		4: "PIPELINE_FAILURE",
		5: "PIPELINE_PAUSED",
		6: "PIPELINE_STANDBY",
		7: "PIPELINE_CRASHING",
	}
	PipelineState_value = map[string]int32{
		"PIPELINE_STATE_UNKNOWN": 0,
		"PIPELINE_STARTING":      1,
		"PIPELINE_RUNNING":       2,
		"PIPELINE_RESTARTING":    3,
		"PIPELINE_FAILURE":       4,
		"PIPELINE_PAUSED":        5,
		"PIPELINE_STANDBY":       6,
		"PIPELINE_CRASHING":      7,
	}
)

func (x PipelineState) Enum() *PipelineState {
	p := new(PipelineState)
	*p = x
	return p
}

func (x PipelineState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineState) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[3].Descriptor()
}

func (PipelineState) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[3]
}

func (x PipelineState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineState.Descriptor instead.
func (PipelineState) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{3}
}

// TolerationOperator relates a Toleration's key to its value.
type TolerationOperator int32

const (
	TolerationOperator_EMPTY  TolerationOperator = 0 // K8s doesn't have this, but it's possible to represent something similar.
	TolerationOperator_EXISTS TolerationOperator = 1 // "Exists"
	TolerationOperator_EQUAL  TolerationOperator = 2 // "Equal"
)

// Enum value maps for TolerationOperator.
var (
	TolerationOperator_name = map[int32]string{
		0: "EMPTY",
		1: "EXISTS",
		2: "EQUAL",
	}
	TolerationOperator_value = map[string]int32{
		"EMPTY":  0,
		"EXISTS": 1,
		"EQUAL":  2,
	}
)

func (x TolerationOperator) Enum() *TolerationOperator {
	p := new(TolerationOperator)
	*p = x
	return p
}

func (x TolerationOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TolerationOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[4].Descriptor()
}

func (TolerationOperator) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[4]
}

func (x TolerationOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TolerationOperator.Descriptor instead.
func (TolerationOperator) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{4}
}

// TaintEffect is an effect that can be matched by a toleration.
type TaintEffect int32

const (
	TaintEffect_ALL_EFFECTS        TaintEffect = 0 // Empty matches all effects.
	TaintEffect_NO_SCHEDULE        TaintEffect = 1 // "NoSchedule"
	TaintEffect_PREFER_NO_SCHEDULE TaintEffect = 2 // "PreferNoSchedule"
	TaintEffect_NO_EXECUTE         TaintEffect = 3 // "NoExecute"
)

// Enum value maps for TaintEffect.
var (
	TaintEffect_name = map[int32]string{
		0: "ALL_EFFECTS",
		1: "NO_SCHEDULE",
		2: "PREFER_NO_SCHEDULE",
		3: "NO_EXECUTE",
	}
	TaintEffect_value = map[string]int32{
		"ALL_EFFECTS":        0,
		"NO_SCHEDULE":        1,
		"PREFER_NO_SCHEDULE": 2,
		"NO_EXECUTE":         3,
	}
)

func (x TaintEffect) Enum() *TaintEffect {
	p := new(TaintEffect)
	*p = x
	return p
}

func (x TaintEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaintEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[5].Descriptor()
}

func (TaintEffect) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[5]
}

func (x TaintEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaintEffect.Descriptor instead.
func (TaintEffect) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{5}
}

// The pipeline type is stored here so that we can internally know the type of
// the pipeline without loading the spec from PFS.
type PipelineInfo_PipelineType int32

const (
	PipelineInfo_PIPELINT_TYPE_UNKNOWN   PipelineInfo_PipelineType = 0
	PipelineInfo_PIPELINE_TYPE_TRANSFORM PipelineInfo_PipelineType = 1
	PipelineInfo_PIPELINE_TYPE_SPOUT     PipelineInfo_PipelineType = 2
	PipelineInfo_PIPELINE_TYPE_SERVICE   PipelineInfo_PipelineType = 3
)

// Enum value maps for PipelineInfo_PipelineType.
var (
	PipelineInfo_PipelineType_name = map[int32]string{
		0: "PIPELINT_TYPE_UNKNOWN",
		1: "PIPELINE_TYPE_TRANSFORM",
		2: "PIPELINE_TYPE_SPOUT",
		3: "PIPELINE_TYPE_SERVICE",
	}
	PipelineInfo_PipelineType_value = map[string]int32{
		"PIPELINT_TYPE_UNKNOWN":   0,
		"PIPELINE_TYPE_TRANSFORM": 1,
		"PIPELINE_TYPE_SPOUT":     2,
		"PIPELINE_TYPE_SERVICE":   3,
	}
)

func (x PipelineInfo_PipelineType) Enum() *PipelineInfo_PipelineType {
	p := new(PipelineInfo_PipelineType)
	*p = x
	return p
}

func (x PipelineInfo_PipelineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineInfo_PipelineType) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[6].Descriptor()
}

func (PipelineInfo_PipelineType) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[6]
}

func (x PipelineInfo_PipelineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineInfo_PipelineType.Descriptor instead.
func (PipelineInfo_PipelineType) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{29, 0}
}

type PipelinePage_Ordering int32

const (
	PipelinePage_RECENT PipelinePage_Ordering = 0
)

// Enum value maps for PipelinePage_Ordering.
var (
	PipelinePage_Ordering_name = map[int32]string{
		0: "RECENT",
	}
	PipelinePage_Ordering_value = map[string]int32{
		"RECENT": 0,
	}
)

func (x PipelinePage_Ordering) Enum() *PipelinePage_Ordering {
	p := new(PipelinePage_Ordering)
	*p = x
	return p
}

func (x PipelinePage_Ordering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelinePage_Ordering) Descriptor() protoreflect.EnumDescriptor {
	return file_pps_pps_proto_enumTypes[7].Descriptor()
}

func (PipelinePage_Ordering) Type() protoreflect.EnumType {
	return &file_pps_pps_proto_enumTypes[7]
}

func (x PipelinePage_Ordering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelinePage_Ordering.Descriptor instead.
func (PipelinePage_Ordering) EnumDescriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{56, 0}
}

type SecretMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name must be the name of the secret in kubernetes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key of the secret to load into env_var, this field only has meaning if EnvVar != "".
	Key       string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	EnvVar    string `protobuf:"bytes,4,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
}

func (x *SecretMount) Reset() {
	*x = SecretMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretMount) ProtoMessage() {}

func (x *SecretMount) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretMount.ProtoReflect.Descriptor instead.
func (*SecretMount) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{0}
}

func (x *SecretMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SecretMount) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SecretMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *SecretMount) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

type Transform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image            string            `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Cmd              []string          `protobuf:"bytes,2,rep,name=cmd,proto3" json:"cmd,omitempty"`
	ErrCmd           []string          `protobuf:"bytes,3,rep,name=err_cmd,json=errCmd,proto3" json:"err_cmd,omitempty"`
	Env              map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets          []*SecretMount    `protobuf:"bytes,5,rep,name=secrets,proto3" json:"secrets,omitempty"`
	ImagePullSecrets []string          `protobuf:"bytes,6,rep,name=image_pull_secrets,json=imagePullSecrets,proto3" json:"image_pull_secrets,omitempty"`
	Stdin            []string          `protobuf:"bytes,7,rep,name=stdin,proto3" json:"stdin,omitempty"`
	ErrStdin         []string          `protobuf:"bytes,8,rep,name=err_stdin,json=errStdin,proto3" json:"err_stdin,omitempty"`
	AcceptReturnCode []int64           `protobuf:"varint,9,rep,packed,name=accept_return_code,json=acceptReturnCode,proto3" json:"accept_return_code,omitempty"`
	Debug            bool              `protobuf:"varint,10,opt,name=debug,proto3" json:"debug,omitempty"`
	User             string            `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	WorkingDir       string            `protobuf:"bytes,12,opt,name=working_dir,json=workingDir,proto3" json:"working_dir,omitempty"`
	Dockerfile       string            `protobuf:"bytes,13,opt,name=dockerfile,proto3" json:"dockerfile,omitempty"`
	MemoryVolume     bool              `protobuf:"varint,14,opt,name=memory_volume,json=memoryVolume,proto3" json:"memory_volume,omitempty"`
	DatumBatching    bool              `protobuf:"varint,15,opt,name=datum_batching,json=datumBatching,proto3" json:"datum_batching,omitempty"`
}

func (x *Transform) Reset() {
	*x = Transform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transform) ProtoMessage() {}

func (x *Transform) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transform.ProtoReflect.Descriptor instead.
func (*Transform) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{1}
}

func (x *Transform) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Transform) GetCmd() []string {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *Transform) GetErrCmd() []string {
	if x != nil {
		return x.ErrCmd
	}
	return nil
}

func (x *Transform) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Transform) GetSecrets() []*SecretMount {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Transform) GetImagePullSecrets() []string {
	if x != nil {
		return x.ImagePullSecrets
	}
	return nil
}

func (x *Transform) GetStdin() []string {
	if x != nil {
		return x.Stdin
	}
	return nil
}

func (x *Transform) GetErrStdin() []string {
	if x != nil {
		return x.ErrStdin
	}
	return nil
}

func (x *Transform) GetAcceptReturnCode() []int64 {
	if x != nil {
		return x.AcceptReturnCode
	}
	return nil
}

func (x *Transform) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Transform) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Transform) GetWorkingDir() string {
	if x != nil {
		return x.WorkingDir
	}
	return ""
}

func (x *Transform) GetDockerfile() string {
	if x != nil {
		return x.Dockerfile
	}
	return ""
}

func (x *Transform) GetMemoryVolume() bool {
	if x != nil {
		return x.MemoryVolume
	}
	return false
}

func (x *Transform) GetDatumBatching() bool {
	if x != nil {
		return x.DatumBatching
	}
	return false
}

type TFJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tf_job  is a serialized Kubeflow TFJob spec. Pachyderm sends this directly
	// to a kubernetes cluster on which kubeflow has been installed, instead of
	// creating a pipeline ReplicationController as it normally would.
	TfJob string `protobuf:"bytes,1,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
}

func (x *TFJob) Reset() {
	*x = TFJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFJob) ProtoMessage() {}

func (x *TFJob) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFJob.ProtoReflect.Descriptor instead.
func (*TFJob) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{2}
}

func (x *TFJob) GetTfJob() string {
	if x != nil {
		return x.TfJob
	}
	return ""
}

type Egress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	URL string `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	// Types that are assignable to Target:
	//
	//	*Egress_ObjectStorage
	//	*Egress_SqlDatabase
	Target isEgress_Target `protobuf_oneof:"target"`
}

func (x *Egress) Reset() {
	*x = Egress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Egress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Egress) ProtoMessage() {}

func (x *Egress) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Egress.ProtoReflect.Descriptor instead.
func (*Egress) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{3}
}

func (x *Egress) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (m *Egress) GetTarget() isEgress_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *Egress) GetObjectStorage() *pfs.ObjectStorageEgress {
	if x, ok := x.GetTarget().(*Egress_ObjectStorage); ok {
		return x.ObjectStorage
	}
	return nil
}

func (x *Egress) GetSqlDatabase() *pfs.SQLDatabaseEgress {
	if x, ok := x.GetTarget().(*Egress_SqlDatabase); ok {
		return x.SqlDatabase
	}
	return nil
}

type isEgress_Target interface {
	isEgress_Target()
}

type Egress_ObjectStorage struct {
	ObjectStorage *pfs.ObjectStorageEgress `protobuf:"bytes,2,opt,name=object_storage,json=objectStorage,proto3,oneof"`
}

type Egress_SqlDatabase struct {
	SqlDatabase *pfs.SQLDatabaseEgress `protobuf:"bytes,3,opt,name=sql_database,json=sqlDatabase,proto3,oneof"`
}

func (*Egress_ObjectStorage) isEgress_Target() {}

func (*Egress_SqlDatabase) isEgress_Target() {}

type Determined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspaces []string `protobuf:"bytes,1,rep,name=workspaces,proto3" json:"workspaces,omitempty"`
}

func (x *Determined) Reset() {
	*x = Determined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Determined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Determined) ProtoMessage() {}

func (x *Determined) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Determined.ProtoReflect.Descriptor instead.
func (*Determined) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{4}
}

func (x *Determined) GetWorkspaces() []string {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Id       string    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) autogeneratedString() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{5}
}

func (x *Job) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotations map[string]string `protobuf:"bytes,1,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{6}
}

func (x *Metadata) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalPort int32  `protobuf:"varint,1,opt,name=internal_port,json=internalPort,proto3" json:"internal_port,omitempty"`
	ExternalPort int32  `protobuf:"varint,2,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
	Ip           string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Type         string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{7}
}

func (x *Service) GetInternalPort() int32 {
	if x != nil {
		return x.InternalPort
	}
	return 0
}

func (x *Service) GetExternalPort() int32 {
	if x != nil {
		return x.ExternalPort
	}
	return 0
}

func (x *Service) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Service) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Spout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service *Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *Spout) Reset() {
	*x = Spout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spout) ProtoMessage() {}

func (x *Spout) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spout.ProtoReflect.Descriptor instead.
func (*Spout) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{8}
}

func (x *Spout) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

type PFSInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project   string `protobuf:"bytes,14,opt,name=project,proto3" json:"project,omitempty"`
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Repo      string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	RepoType  string `protobuf:"bytes,13,opt,name=repo_type,json=repoType,proto3" json:"repo_type,omitempty"`
	Branch    string `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit    string `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Glob      string `protobuf:"bytes,5,opt,name=glob,proto3" json:"glob,omitempty"`
	JoinOn    string `protobuf:"bytes,6,opt,name=join_on,json=joinOn,proto3" json:"join_on,omitempty"`
	OuterJoin bool   `protobuf:"varint,7,opt,name=outer_join,json=outerJoin,proto3" json:"outer_join,omitempty"`
	GroupBy   string `protobuf:"bytes,8,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	Lazy      bool   `protobuf:"varint,9,opt,name=lazy,proto3" json:"lazy,omitempty"`
	// EmptyFiles, if true, will cause files from this PFS input to be
	// presented as empty files. This is useful in shuffle pipelines where you
	// want to read the names of files and reorganize them using symlinks.
	EmptyFiles bool `protobuf:"varint,10,opt,name=empty_files,json=emptyFiles,proto3" json:"empty_files,omitempty"`
	// S3, if true, will cause the worker to NOT download or link files from this
	// input into the /pfs_v2 directory. Instead, an instance of our S3 gateway
	// service will run on each of the sidecars, and data can be retrieved from
	// this input by querying
	// http://<pipeline>-s3.<namespace>/<job id>.<input>/my/file
	S3 bool `protobuf:"varint,11,opt,name=s3,proto3" json:"s3,omitempty"`
	// Trigger defines when this input is processed by the pipeline, if it's nil
	// the input is processed anytime something is committed to the input branch.
	Trigger   *pfs.Trigger `protobuf:"bytes,12,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Reference bool         `protobuf:"varint,16,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *PFSInput) Reset() {
	*x = PFSInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PFSInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PFSInput) ProtoMessage() {}

func (x *PFSInput) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PFSInput.ProtoReflect.Descriptor instead.
func (*PFSInput) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{9}
}

func (x *PFSInput) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PFSInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PFSInput) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *PFSInput) GetRepoType() string {
	if x != nil {
		return x.RepoType
	}
	return ""
}

func (x *PFSInput) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *PFSInput) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *PFSInput) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *PFSInput) GetJoinOn() string {
	if x != nil {
		return x.JoinOn
	}
	return ""
}

func (x *PFSInput) GetOuterJoin() bool {
	if x != nil {
		return x.OuterJoin
	}
	return false
}

func (x *PFSInput) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

func (x *PFSInput) GetLazy() bool {
	if x != nil {
		return x.Lazy
	}
	return false
}

func (x *PFSInput) GetEmptyFiles() bool {
	if x != nil {
		return x.EmptyFiles
	}
	return false
}

func (x *PFSInput) GetS3() bool {
	if x != nil {
		return x.S3
	}
	return false
}

func (x *PFSInput) GetTrigger() *pfs.Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *PFSInput) GetReference() bool {
	if x != nil {
		return x.Reference
	}
	return false
}

type CronInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Project string `protobuf:"bytes,7,opt,name=project,proto3" json:"project,omitempty"`
	Repo    string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Spec    string `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Overwrite, if true, will expose a single datum that gets overwritten each
	// tick. If false, it will create a new datum for each tick.
	Overwrite bool                   `protobuf:"varint,5,opt,name=overwrite,proto3" json:"overwrite,omitempty"`
	Start     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *CronInput) Reset() {
	*x = CronInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronInput) ProtoMessage() {}

func (x *CronInput) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronInput.ProtoReflect.Descriptor instead.
func (*CronInput) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{10}
}

func (x *CronInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronInput) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CronInput) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CronInput) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *CronInput) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *CronInput) GetOverwrite() bool {
	if x != nil {
		return x.Overwrite
	}
	return false
}

func (x *CronInput) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

type Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pfs   *PFSInput  `protobuf:"bytes,1,opt,name=pfs,proto3" json:"pfs,omitempty"`
	Join  []*Input   `protobuf:"bytes,2,rep,name=join,proto3" json:"join,omitempty"`
	Group []*Input   `protobuf:"bytes,3,rep,name=group,proto3" json:"group,omitempty"`
	Cross []*Input   `protobuf:"bytes,4,rep,name=cross,proto3" json:"cross,omitempty"`
	Union []*Input   `protobuf:"bytes,5,rep,name=union,proto3" json:"union,omitempty"`
	Cron  *CronInput `protobuf:"bytes,6,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *Input) Reset() {
	*x = Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Input) ProtoMessage() {}

func (x *Input) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Input.ProtoReflect.Descriptor instead.
func (*Input) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{11}
}

func (x *Input) GetPfs() *PFSInput {
	if x != nil {
		return x.Pfs
	}
	return nil
}

func (x *Input) GetJoin() []*Input {
	if x != nil {
		return x.Join
	}
	return nil
}

func (x *Input) GetGroup() []*Input {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Input) GetCross() []*Input {
	if x != nil {
		return x.Cross
	}
	return nil
}

func (x *Input) GetUnion() []*Input {
	if x != nil {
		return x.Union
	}
	return nil
}

func (x *Input) GetCron() *CronInput {
	if x != nil {
		return x.Cron
	}
	return nil
}

type JobInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Commit *pfs.Commit `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Glob   string      `protobuf:"bytes,3,opt,name=glob,proto3" json:"glob,omitempty"`
	Lazy   bool        `protobuf:"varint,4,opt,name=lazy,proto3" json:"lazy,omitempty"`
}

func (x *JobInput) Reset() {
	*x = JobInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInput) ProtoMessage() {}

func (x *JobInput) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInput.ProtoReflect.Descriptor instead.
func (*JobInput) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{12}
}

func (x *JobInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobInput) GetCommit() *pfs.Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *JobInput) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

func (x *JobInput) GetLazy() bool {
	if x != nil {
		return x.Lazy
	}
	return false
}

type ParallelismSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starts the pipeline/job with a 'constant' workers, unless 'constant' is
	// zero. If 'constant' is zero (which is the zero value of ParallelismSpec),
	// then Pachyderm will choose the number of workers that is started,
	// (currently it chooses the number of workers in the cluster)
	Constant uint64 `protobuf:"varint,1,opt,name=constant,proto3" json:"constant,omitempty"`
}

func (x *ParallelismSpec) Reset() {
	*x = ParallelismSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParallelismSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParallelismSpec) ProtoMessage() {}

func (x *ParallelismSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParallelismSpec.ProtoReflect.Descriptor instead.
func (*ParallelismSpec) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{13}
}

func (x *ParallelismSpec) GetConstant() uint64 {
	if x != nil {
		return x.Constant
	}
	return 0
}

type InputFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This file's absolute path within its pfs repo.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// This file's hash
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *InputFile) Reset() {
	*x = InputFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputFile) ProtoMessage() {}

func (x *InputFile) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputFile.ProtoReflect.Descriptor instead.
func (*InputFile) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{14}
}

func (x *InputFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InputFile) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type Datum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID is the hash computed from all the files
	Job *Job   `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Id  string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Datum) Reset() {
	*x = Datum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Datum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datum) ProtoMessage() {}

func (x *Datum) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datum.ProtoReflect.Descriptor instead.
func (*Datum) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{15}
}

func (x *Datum) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Datum) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DatumInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum    *Datum          `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
	State    DatumState      `protobuf:"varint,2,opt,name=state,proto3,enum=pps_v2.DatumState" json:"state,omitempty"`
	Stats    *ProcessStats   `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	PfsState *pfs.File       `protobuf:"bytes,4,opt,name=pfs_state,json=pfsState,proto3" json:"pfs_state,omitempty"`
	Data     []*pfs.FileInfo `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	ImageId  string          `protobuf:"bytes,6,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (x *DatumInfo) Reset() {
	*x = DatumInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumInfo) ProtoMessage() {}

func (x *DatumInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumInfo.ProtoReflect.Descriptor instead.
func (*DatumInfo) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{16}
}

func (x *DatumInfo) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *DatumInfo) GetState() DatumState {
	if x != nil {
		return x.State
	}
	return DatumState_UNKNOWN
}

func (x *DatumInfo) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *DatumInfo) GetPfsState() *pfs.File {
	if x != nil {
		return x.PfsState
	}
	return nil
}

func (x *DatumInfo) GetData() []*pfs.FileInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DatumInfo) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

type Aggregate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Mean                  float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	Stddev                float64 `protobuf:"fixed64,3,opt,name=stddev,proto3" json:"stddev,omitempty"`
	FifthPercentile       float64 `protobuf:"fixed64,4,opt,name=fifth_percentile,json=fifthPercentile,proto3" json:"fifth_percentile,omitempty"`
	NinetyFifthPercentile float64 `protobuf:"fixed64,5,opt,name=ninety_fifth_percentile,json=ninetyFifthPercentile,proto3" json:"ninety_fifth_percentile,omitempty"`
}

func (x *Aggregate) Reset() {
	*x = Aggregate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregate) ProtoMessage() {}

func (x *Aggregate) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregate.ProtoReflect.Descriptor instead.
func (*Aggregate) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{17}
}

func (x *Aggregate) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Aggregate) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Aggregate) GetStddev() float64 {
	if x != nil {
		return x.Stddev
	}
	return 0
}

func (x *Aggregate) GetFifthPercentile() float64 {
	if x != nil {
		return x.FifthPercentile
	}
	return 0
}

func (x *Aggregate) GetNinetyFifthPercentile() float64 {
	if x != nil {
		return x.NinetyFifthPercentile
	}
	return 0
}

type ProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTime  *durationpb.Duration `protobuf:"bytes,1,opt,name=download_time,json=downloadTime,proto3" json:"download_time,omitempty"`
	ProcessTime   *durationpb.Duration `protobuf:"bytes,2,opt,name=process_time,json=processTime,proto3" json:"process_time,omitempty"`
	UploadTime    *durationpb.Duration `protobuf:"bytes,3,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	DownloadBytes int64                `protobuf:"varint,4,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	UploadBytes   int64                `protobuf:"varint,5,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
}

func (x *ProcessStats) Reset() {
	*x = ProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStats) ProtoMessage() {}

func (x *ProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStats.ProtoReflect.Descriptor instead.
func (*ProcessStats) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{18}
}

func (x *ProcessStats) GetDownloadTime() *durationpb.Duration {
	if x != nil {
		return x.DownloadTime
	}
	return nil
}

func (x *ProcessStats) GetProcessTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessTime
	}
	return nil
}

func (x *ProcessStats) GetUploadTime() *durationpb.Duration {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *ProcessStats) GetDownloadBytes() int64 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *ProcessStats) GetUploadBytes() int64 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

type AggregateProcessStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadTime  *Aggregate `protobuf:"bytes,1,opt,name=download_time,json=downloadTime,proto3" json:"download_time,omitempty"`
	ProcessTime   *Aggregate `protobuf:"bytes,2,opt,name=process_time,json=processTime,proto3" json:"process_time,omitempty"`
	UploadTime    *Aggregate `protobuf:"bytes,3,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	DownloadBytes *Aggregate `protobuf:"bytes,4,opt,name=download_bytes,json=downloadBytes,proto3" json:"download_bytes,omitempty"`
	UploadBytes   *Aggregate `protobuf:"bytes,5,opt,name=upload_bytes,json=uploadBytes,proto3" json:"upload_bytes,omitempty"`
}

func (x *AggregateProcessStats) Reset() {
	*x = AggregateProcessStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateProcessStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateProcessStats) ProtoMessage() {}

func (x *AggregateProcessStats) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateProcessStats.ProtoReflect.Descriptor instead.
func (*AggregateProcessStats) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{19}
}

func (x *AggregateProcessStats) GetDownloadTime() *Aggregate {
	if x != nil {
		return x.DownloadTime
	}
	return nil
}

func (x *AggregateProcessStats) GetProcessTime() *Aggregate {
	if x != nil {
		return x.ProcessTime
	}
	return nil
}

func (x *AggregateProcessStats) GetUploadTime() *Aggregate {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *AggregateProcessStats) GetDownloadBytes() *Aggregate {
	if x != nil {
		return x.DownloadBytes
	}
	return nil
}

func (x *AggregateProcessStats) GetUploadBytes() *Aggregate {
	if x != nil {
		return x.UploadBytes
	}
	return nil
}

type WorkerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId    string       `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	JobId       string       `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	DatumStatus *DatumStatus `protobuf:"bytes,3,opt,name=datum_status,json=datumStatus,proto3" json:"datum_status,omitempty"`
}

func (x *WorkerStatus) Reset() {
	*x = WorkerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStatus) ProtoMessage() {}

func (x *WorkerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStatus.ProtoReflect.Descriptor instead.
func (*WorkerStatus) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{20}
}

func (x *WorkerStatus) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *WorkerStatus) GetDatumStatus() *DatumStatus {
	if x != nil {
		return x.DatumStatus
	}
	return nil
}

type DatumStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Started is the time processing on the current datum began.
	Started *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=started,proto3" json:"started,omitempty"`
	Data    []*InputFile           `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *DatumStatus) Reset() {
	*x = DatumStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumStatus) ProtoMessage() {}

func (x *DatumStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumStatus.ProtoReflect.Descriptor instead.
func (*DatumStatus) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{21}
}

func (x *DatumStatus) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *DatumStatus) GetData() []*InputFile {
	if x != nil {
		return x.Data
	}
	return nil
}

// ResourceSpec describes the amount of resources that pipeline pods should
// request from kubernetes, for scheduling.
type ResourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of CPUs each worker needs (partial values are allowed, and
	// encouraged)
	Cpu float32 `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// The amount of memory each worker needs (in bytes, with allowed
	// SI suffixes (M, K, G, Mi, Ki, Gi, etc).
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// The spec for GPU resources.
	Gpu *GPUSpec `protobuf:"bytes,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	// The amount of ephemeral storage each worker needs (in bytes, with allowed
	// SI suffixes (M, K, G, Mi, Ki, Gi, etc).
	Disk string `protobuf:"bytes,4,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *ResourceSpec) Reset() {
	*x = ResourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpec) ProtoMessage() {}

func (x *ResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpec.ProtoReflect.Descriptor instead.
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{22}
}

func (x *ResourceSpec) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ResourceSpec) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *ResourceSpec) GetGpu() *GPUSpec {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *ResourceSpec) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

type GPUSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of GPU (nvidia.com/gpu or amd.com/gpu for example).
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The number of GPUs to request.
	Number int64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *GPUSpec) Reset() {
	*x = GPUSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSpec) ProtoMessage() {}

func (x *GPUSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSpec.ProtoReflect.Descriptor instead.
func (*GPUSpec) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{23}
}

func (x *GPUSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GPUSpec) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

type JobSetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobSet *JobSet    `protobuf:"bytes,1,opt,name=job_set,json=jobSet,proto3" json:"job_set,omitempty"`
	Jobs   []*JobInfo `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobSetInfo) Reset() {
	*x = JobSetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetInfo) ProtoMessage() {}

func (x *JobSetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetInfo.ProtoReflect.Descriptor instead.
func (*JobSetInfo) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{24}
}

func (x *JobSetInfo) GetJobSet() *JobSet {
	if x != nil {
		return x.JobSet
	}
	return nil
}

func (x *JobSetInfo) GetJobs() []*JobInfo {
	if x != nil {
		return x.Jobs
	}
	return nil
}

// JobInfo is the data stored in the database regarding a given job.  The
// 'details' field contains more information about the job which is expensive to
// fetch, requiring querying workers or loading the pipeline spec from object
// storage.
type JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job             *Job        `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	PipelineVersion uint64      `protobuf:"varint,2,opt,name=pipeline_version,json=pipelineVersion,proto3" json:"pipeline_version,omitempty"`
	OutputCommit    *pfs.Commit `protobuf:"bytes,3,opt,name=output_commit,json=outputCommit,proto3" json:"output_commit,omitempty"`
	// Job restart count (e.g. due to datum failure)
	Restart uint64 `protobuf:"varint,4,opt,name=restart,proto3" json:"restart,omitempty"`
	// Counts of how many times we processed or skipped a datum
	DataProcessed int64 `protobuf:"varint,5,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataSkipped   int64 `protobuf:"varint,6,opt,name=data_skipped,json=dataSkipped,proto3" json:"data_skipped,omitempty"`
	DataTotal     int64 `protobuf:"varint,7,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	DataFailed    int64 `protobuf:"varint,8,opt,name=data_failed,json=dataFailed,proto3" json:"data_failed,omitempty"`
	DataRecovered int64 `protobuf:"varint,9,opt,name=data_recovered,json=dataRecovered,proto3" json:"data_recovered,omitempty"`
	// Download/process/upload time and download/upload bytes
	Stats     *ProcessStats          `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	State     JobState               `protobuf:"varint,11,opt,name=state,proto3,enum=pps_v2.JobState" json:"state,omitempty"`
	Reason    string                 `protobuf:"bytes,12,opt,name=reason,proto3" json:"reason,omitempty"` // reason explains why the job is in the current state
	Created   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	Started   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	Details   *JobInfo_Details       `protobuf:"bytes,16,opt,name=details,proto3" json:"details,omitempty"`
	AuthToken string                 `protobuf:"bytes,17,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{25}
}

func (x *JobInfo) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobInfo) GetPipelineVersion() uint64 {
	if x != nil {
		return x.PipelineVersion
	}
	return 0
}

func (x *JobInfo) GetOutputCommit() *pfs.Commit {
	if x != nil {
		return x.OutputCommit
	}
	return nil
}

func (x *JobInfo) GetRestart() uint64 {
	if x != nil {
		return x.Restart
	}
	return 0
}

func (x *JobInfo) GetDataProcessed() int64 {
	if x != nil {
		return x.DataProcessed
	}
	return 0
}

func (x *JobInfo) GetDataSkipped() int64 {
	if x != nil {
		return x.DataSkipped
	}
	return 0
}

func (x *JobInfo) GetDataTotal() int64 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *JobInfo) GetDataFailed() int64 {
	if x != nil {
		return x.DataFailed
	}
	return 0
}

func (x *JobInfo) GetDataRecovered() int64 {
	if x != nil {
		return x.DataRecovered
	}
	return 0
}

func (x *JobInfo) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *JobInfo) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STATE_UNKNOWN
}

func (x *JobInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *JobInfo) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *JobInfo) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *JobInfo) GetFinished() *timestamppb.Timestamp {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *JobInfo) GetDetails() *JobInfo_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *JobInfo) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State WorkerState `protobuf:"varint,2,opt,name=state,proto3,enum=pps_v2.WorkerState" json:"state,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{26}
}

func (x *Worker) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Worker) GetState() WorkerState {
	if x != nil {
		return x.State
	}
	return WorkerState_WORKER_STATE_UNKNOWN
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *pfs.Project `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Name    string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) autogeneratedString() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{27}
}

func (x *Pipeline) GetProject() *pfs.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Toleration is a Kubernetes toleration.
type Toleration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the taint key that the toleration applies to.  Empty means match all taint keys.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// operator represents a key's relationship to the value.
	Operator TolerationOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=pps_v2.TolerationOperator" json:"operator,omitempty"`
	// value is the taint value the toleration matches to.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// effect indicates the taint effect to match.  Empty means match all taint effects.
	Effect TaintEffect `protobuf:"varint,4,opt,name=effect,proto3,enum=pps_v2.TaintEffect" json:"effect,omitempty"`
	// toleration_seconds represents the period of time the toleration (which must be of effect
	// NoExecute, otherwise this field is ignored) tolerates the taint.  If not set, tolerate the
	// taint forever.
	TolerationSeconds *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=toleration_seconds,json=tolerationSeconds,proto3" json:"toleration_seconds,omitempty"`
}

func (x *Toleration) Reset() {
	*x = Toleration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Toleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Toleration) ProtoMessage() {}

func (x *Toleration) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Toleration.ProtoReflect.Descriptor instead.
func (*Toleration) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{28}
}

func (x *Toleration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Toleration) GetOperator() TolerationOperator {
	if x != nil {
		return x.Operator
	}
	return TolerationOperator_EMPTY
}

func (x *Toleration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Toleration) GetEffect() TaintEffect {
	if x != nil {
		return x.Effect
	}
	return TaintEffect_ALL_EFFECTS
}

func (x *Toleration) GetTolerationSeconds() *wrapperspb.Int64Value {
	if x != nil {
		return x.TolerationSeconds
	}
	return nil
}

// PipelineInfo is proto for each pipeline that Pachd stores in the
// database. It tracks the state of the pipeline, and points to its metadata in
// PFS (and, by pointing to a PFS commit, de facto tracks the pipeline's
// version).  Any information about the pipeline _not_ stored in the database is
// in the Details object, which requires fetching the spec from PFS or other
// potentially expensive operations.
type PipelineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline   *Pipeline   `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Version    uint64      `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	SpecCommit *pfs.Commit `protobuf:"bytes,3,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"` // The first spec commit for this version of the pipeline
	Stopped    bool        `protobuf:"varint,4,opt,name=stopped,proto3" json:"stopped,omitempty"`
	// state indicates the current state of the pipeline
	State PipelineState `protobuf:"varint,5,opt,name=state,proto3,enum=pps_v2.PipelineState" json:"state,omitempty"`
	// reason includes any error messages associated with a failed pipeline
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
	// last_job_state indicates the state of the most recently created job
	LastJobState JobState `protobuf:"varint,8,opt,name=last_job_state,json=lastJobState,proto3,enum=pps_v2.JobState" json:"last_job_state,omitempty"`
	// parallelism tracks the literal number of workers that this pipeline should
	// run.
	Parallelism       uint64                    `protobuf:"varint,9,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	Type              PipelineInfo_PipelineType `protobuf:"varint,10,opt,name=type,proto3,enum=pps_v2.PipelineInfo_PipelineType" json:"type,omitempty"`
	AuthToken         string                    `protobuf:"bytes,11,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	Details           *PipelineInfo_Details     `protobuf:"bytes,12,opt,name=details,proto3" json:"details,omitempty"`
	UserSpecJson      string                    `protobuf:"bytes,13,opt,name=user_spec_json,json=userSpecJson,proto3" json:"user_spec_json,omitempty"`                // The user-submitted pipeline spec in JSON format.
	EffectiveSpecJson string                    `protobuf:"bytes,14,opt,name=effective_spec_json,json=effectiveSpecJson,proto3" json:"effective_spec_json,omitempty"` // The effective spec used to create the pipeline.  Created by merging the user spec into the cluster defaults.
	Metadata          map[string]string         `protobuf:"bytes,15,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PipelineInfo) Reset() {
	*x = PipelineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInfo) ProtoMessage() {}

func (x *PipelineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInfo.ProtoReflect.Descriptor instead.
func (*PipelineInfo) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{29}
}

func (x *PipelineInfo) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *PipelineInfo) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PipelineInfo) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

func (x *PipelineInfo) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *PipelineInfo) GetState() PipelineState {
	if x != nil {
		return x.State
	}
	return PipelineState_PIPELINE_STATE_UNKNOWN
}

func (x *PipelineInfo) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineInfo) GetLastJobState() JobState {
	if x != nil {
		return x.LastJobState
	}
	return JobState_JOB_STATE_UNKNOWN
}

func (x *PipelineInfo) GetParallelism() uint64 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *PipelineInfo) GetType() PipelineInfo_PipelineType {
	if x != nil {
		return x.Type
	}
	return PipelineInfo_PIPELINT_TYPE_UNKNOWN
}

func (x *PipelineInfo) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *PipelineInfo) GetDetails() *PipelineInfo_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *PipelineInfo) GetUserSpecJson() string {
	if x != nil {
		return x.UserSpecJson
	}
	return ""
}

func (x *PipelineInfo) GetEffectiveSpecJson() string {
	if x != nil {
		return x.EffectiveSpecJson
	}
	return ""
}

func (x *PipelineInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PipelineInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineInfo []*PipelineInfo `protobuf:"bytes,1,rep,name=pipeline_info,json=pipelineInfo,proto3" json:"pipeline_info,omitempty"`
}

func (x *PipelineInfos) Reset() {
	*x = PipelineInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInfos) ProtoMessage() {}

func (x *PipelineInfos) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInfos.ProtoReflect.Descriptor instead.
func (*PipelineInfos) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{30}
}

func (x *PipelineInfos) GetPipelineInfo() []*PipelineInfo {
	if x != nil {
		return x.PipelineInfo
	}
	return nil
}

type JobSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *JobSet) Reset() {
	*x = JobSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSet) ProtoMessage() {}

func (x *JobSet) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSet.ProtoReflect.Descriptor instead.
func (*JobSet) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{31}
}

func (x *JobSet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type InspectJobSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobSet  *JobSet `protobuf:"bytes,1,opt,name=job_set,json=jobSet,proto3" json:"job_set,omitempty"`
	Wait    bool    `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"` // When true, wait until all jobs in the set are finished
	Details bool    `protobuf:"varint,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *InspectJobSetRequest) Reset() {
	*x = InspectJobSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectJobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectJobSetRequest) ProtoMessage() {}

func (x *InspectJobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectJobSetRequest.ProtoReflect.Descriptor instead.
func (*InspectJobSetRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{32}
}

func (x *InspectJobSetRequest) GetJobSet() *JobSet {
	if x != nil {
		return x.JobSet
	}
	return nil
}

func (x *InspectJobSetRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *InspectJobSetRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

type ListJobSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details bool `protobuf:"varint,1,opt,name=details,proto3" json:"details,omitempty"`
	// A list of projects to filter jobs on, nil means don't filter.
	Projects []*pfs.Project `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	// we return job sets created before or after this time based on the reverse flag
	PaginationMarker *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=paginationMarker,proto3" json:"paginationMarker,omitempty"`
	// number of results to return
	Number int64 `protobuf:"varint,4,opt,name=number,proto3" json:"number,omitempty"`
	// if true, return results in reverse order
	Reverse bool `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// A jq program string for additional result filtering
	JqFilter string `protobuf:"bytes,6,opt,name=jqFilter,proto3" json:"jqFilter,omitempty"`
}

func (x *ListJobSetRequest) Reset() {
	*x = ListJobSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobSetRequest) ProtoMessage() {}

func (x *ListJobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobSetRequest.ProtoReflect.Descriptor instead.
func (*ListJobSetRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{33}
}

func (x *ListJobSetRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

func (x *ListJobSetRequest) GetProjects() []*pfs.Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListJobSetRequest) GetPaginationMarker() *timestamppb.Timestamp {
	if x != nil {
		return x.PaginationMarker
	}
	return nil
}

func (x *ListJobSetRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListJobSetRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ListJobSetRequest) GetJqFilter() string {
	if x != nil {
		return x.JqFilter
	}
	return ""
}

type InspectJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Callers should set either Job or OutputCommit, not both.
	Job     *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Wait    bool `protobuf:"varint,2,opt,name=wait,proto3" json:"wait,omitempty"` // wait until state is either FAILURE or SUCCESS
	Details bool `protobuf:"varint,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *InspectJobRequest) Reset() {
	*x = InspectJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectJobRequest) ProtoMessage() {}

func (x *InspectJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectJobRequest.ProtoReflect.Descriptor instead.
func (*InspectJobRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{34}
}

func (x *InspectJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *InspectJobRequest) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *InspectJobRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

type ListJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of projects to filter jobs on, nil means don't filter.
	Projects    []*pfs.Project `protobuf:"bytes,7,rep,name=projects,proto3" json:"projects,omitempty"`
	Pipeline    *Pipeline      `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`                          // nil means all pipelines
	InputCommit []*pfs.Commit  `protobuf:"bytes,2,rep,name=input_commit,json=inputCommit,proto3" json:"input_commit,omitempty"` // nil means all inputs
	// History indicates return jobs from historical versions of pipelines
	// semantics are:
	// 0: Return jobs from the current version of the pipeline or pipelines.
	// 1: Return the above and jobs from the next most recent version
	// 2: etc.
	// -1: Return jobs from all historical versions.
	History int64 `protobuf:"varint,4,opt,name=history,proto3" json:"history,omitempty"`
	// Details indicates whether the result should include all pipeline details in
	// each JobInfo, or limited information including name and status, but
	// excluding information in the pipeline spec. Leaving this "false" can make
	// the call significantly faster in clusters with a large number of pipelines
	// and jobs.
	// Note that if 'input_commit' is set, this field is coerced to "true"
	Details bool `protobuf:"varint,5,opt,name=details,proto3" json:"details,omitempty"`
	// A jq program string for additional result filtering
	JqFilter string `protobuf:"bytes,6,opt,name=jqFilter,proto3" json:"jqFilter,omitempty"`
	// timestamp that is pagination marker
	PaginationMarker *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=paginationMarker,proto3" json:"paginationMarker,omitempty"`
	// number of results to return
	Number int64 `protobuf:"varint,9,opt,name=number,proto3" json:"number,omitempty"`
	// flag to indicated if results should be returned in reverse order
	Reverse bool `protobuf:"varint,10,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *ListJobRequest) Reset() {
	*x = ListJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobRequest) ProtoMessage() {}

func (x *ListJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobRequest.ProtoReflect.Descriptor instead.
func (*ListJobRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{35}
}

func (x *ListJobRequest) GetProjects() []*pfs.Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListJobRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *ListJobRequest) GetInputCommit() []*pfs.Commit {
	if x != nil {
		return x.InputCommit
	}
	return nil
}

func (x *ListJobRequest) GetHistory() int64 {
	if x != nil {
		return x.History
	}
	return 0
}

func (x *ListJobRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

func (x *ListJobRequest) GetJqFilter() string {
	if x != nil {
		return x.JqFilter
	}
	return ""
}

func (x *ListJobRequest) GetPaginationMarker() *timestamppb.Timestamp {
	if x != nil {
		return x.PaginationMarker
	}
	return nil
}

func (x *ListJobRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListJobRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// Streams open jobs until canceled
type SubscribeJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Details  bool      `protobuf:"varint,2,opt,name=details,proto3" json:"details,omitempty"` // Same as ListJobRequest.Details
}

func (x *SubscribeJobRequest) Reset() {
	*x = SubscribeJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeJobRequest) ProtoMessage() {}

func (x *SubscribeJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeJobRequest.ProtoReflect.Descriptor instead.
func (*SubscribeJobRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{36}
}

func (x *SubscribeJobRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *SubscribeJobRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

type DeleteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *DeleteJobRequest) Reset() {
	*x = DeleteJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRequest) ProtoMessage() {}

func (x *DeleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type StopJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job    *Job   `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *StopJobRequest) Reset() {
	*x = StopJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopJobRequest) ProtoMessage() {}

func (x *StopJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopJobRequest.ProtoReflect.Descriptor instead.
func (*StopJobRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{38}
}

func (x *StopJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *StopJobRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UpdateJobStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job           *Job          `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	State         JobState      `protobuf:"varint,2,opt,name=state,proto3,enum=pps_v2.JobState" json:"state,omitempty"`
	Reason        string        `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Restart       uint64        `protobuf:"varint,5,opt,name=restart,proto3" json:"restart,omitempty"`
	DataProcessed int64         `protobuf:"varint,6,opt,name=data_processed,json=dataProcessed,proto3" json:"data_processed,omitempty"`
	DataSkipped   int64         `protobuf:"varint,7,opt,name=data_skipped,json=dataSkipped,proto3" json:"data_skipped,omitempty"`
	DataFailed    int64         `protobuf:"varint,8,opt,name=data_failed,json=dataFailed,proto3" json:"data_failed,omitempty"`
	DataRecovered int64         `protobuf:"varint,9,opt,name=data_recovered,json=dataRecovered,proto3" json:"data_recovered,omitempty"`
	DataTotal     int64         `protobuf:"varint,10,opt,name=data_total,json=dataTotal,proto3" json:"data_total,omitempty"`
	Stats         *ProcessStats `protobuf:"bytes,11,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *UpdateJobStateRequest) Reset() {
	*x = UpdateJobStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobStateRequest) ProtoMessage() {}

func (x *UpdateJobStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobStateRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateJobStateRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *UpdateJobStateRequest) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_JOB_STATE_UNKNOWN
}

func (x *UpdateJobStateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UpdateJobStateRequest) GetRestart() uint64 {
	if x != nil {
		return x.Restart
	}
	return 0
}

func (x *UpdateJobStateRequest) GetDataProcessed() int64 {
	if x != nil {
		return x.DataProcessed
	}
	return 0
}

func (x *UpdateJobStateRequest) GetDataSkipped() int64 {
	if x != nil {
		return x.DataSkipped
	}
	return 0
}

func (x *UpdateJobStateRequest) GetDataFailed() int64 {
	if x != nil {
		return x.DataFailed
	}
	return 0
}

func (x *UpdateJobStateRequest) GetDataRecovered() int64 {
	if x != nil {
		return x.DataRecovered
	}
	return 0
}

func (x *UpdateJobStateRequest) GetDataTotal() int64 {
	if x != nil {
		return x.DataTotal
	}
	return 0
}

func (x *UpdateJobStateRequest) GetStats() *ProcessStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline from which we want to get logs (required if the job in 'job'
	// was created as part of a pipeline. To get logs from a non-orphan job
	// without the pipeline that created it, you need to use ElasticSearch).
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The job from which we want to get logs.
	Job *Job `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	// Names of input files from which we want processing logs. This may contain
	// multiple files, to query pipelines that contain multiple inputs. Each
	// filter may be an absolute path of a file within a pps repo, or it may be
	// a hash for that file (to search for files at specific versions)
	DataFilters []string `protobuf:"bytes,3,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
	Datum       *Datum   `protobuf:"bytes,4,opt,name=datum,proto3" json:"datum,omitempty"`
	// If true get logs from the master process
	Master bool `protobuf:"varint,5,opt,name=master,proto3" json:"master,omitempty"`
	// Continue to follow new logs as they become available.
	Follow bool `protobuf:"varint,6,opt,name=follow,proto3" json:"follow,omitempty"`
	// If nonzero, the number of lines from the end of the logs to return.  Note:
	// tail applies per container, so you will get tail * <number of pods> total
	// lines back.
	Tail int64 `protobuf:"varint,7,opt,name=tail,proto3" json:"tail,omitempty"`
	// UseLokiBackend causes the logs request to go through the loki backend
	// rather than through kubernetes. This behavior can also be achieved by
	// setting the LOKI_LOGGING feature flag.
	UseLokiBackend bool `protobuf:"varint,8,opt,name=use_loki_backend,json=useLokiBackend,proto3" json:"use_loki_backend,omitempty"`
	// Since specifies how far in the past to return logs from. It defaults to 24 hours.
	Since *durationpb.Duration `protobuf:"bytes,9,opt,name=since,proto3" json:"since,omitempty"`
}

func (x *GetLogsRequest) Reset() {
	*x = GetLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogsRequest) ProtoMessage() {}

func (x *GetLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogsRequest.ProtoReflect.Descriptor instead.
func (*GetLogsRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{40}
}

func (x *GetLogsRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *GetLogsRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *GetLogsRequest) GetDataFilters() []string {
	if x != nil {
		return x.DataFilters
	}
	return nil
}

func (x *GetLogsRequest) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

func (x *GetLogsRequest) GetMaster() bool {
	if x != nil {
		return x.Master
	}
	return false
}

func (x *GetLogsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *GetLogsRequest) GetTail() int64 {
	if x != nil {
		return x.Tail
	}
	return 0
}

func (x *GetLogsRequest) GetUseLokiBackend() bool {
	if x != nil {
		return x.UseLokiBackend
	}
	return false
}

func (x *GetLogsRequest) GetSince() *durationpb.Duration {
	if x != nil {
		return x.Since
	}
	return nil
}

// LogMessage is a log line from a PPS worker, annotated with metadata
// indicating when and why the line was logged.
type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job and pipeline for which a PFS file is being processed (if the job
	// is an orphan job, pipeline name and ID will be unset)
	ProjectName  string `protobuf:"bytes,10,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	PipelineName string `protobuf:"bytes,1,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	JobId        string `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	WorkerId     string `protobuf:"bytes,3,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	DatumId      string `protobuf:"bytes,4,opt,name=datum_id,json=datumId,proto3" json:"datum_id,omitempty"`
	Master       bool   `protobuf:"varint,5,opt,name=master,proto3" json:"master,omitempty"`
	// The PFS files being processed (one per pipeline/job input)
	Data []*InputFile `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	// User is true if log message comes from the users code.
	User bool `protobuf:"varint,7,opt,name=user,proto3" json:"user,omitempty"`
	// The message logged, and the time at which it was logged
	Ts      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=ts,proto3" json:"ts,omitempty"`
	Message string                 `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{41}
}

func (x *LogMessage) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *LogMessage) GetPipelineName() string {
	if x != nil {
		return x.PipelineName
	}
	return ""
}

func (x *LogMessage) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *LogMessage) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *LogMessage) GetDatumId() string {
	if x != nil {
		return x.DatumId
	}
	return ""
}

func (x *LogMessage) GetMaster() bool {
	if x != nil {
		return x.Master
	}
	return false
}

func (x *LogMessage) GetData() []*InputFile {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogMessage) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *LogMessage) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RestartDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job         *Job     `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	DataFilters []string `protobuf:"bytes,2,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
}

func (x *RestartDatumRequest) Reset() {
	*x = RestartDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartDatumRequest) ProtoMessage() {}

func (x *RestartDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartDatumRequest.ProtoReflect.Descriptor instead.
func (*RestartDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{42}
}

func (x *RestartDatumRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *RestartDatumRequest) GetDataFilters() []string {
	if x != nil {
		return x.DataFilters
	}
	return nil
}

type InspectDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datum *Datum `protobuf:"bytes,1,opt,name=datum,proto3" json:"datum,omitempty"`
}

func (x *InspectDatumRequest) Reset() {
	*x = InspectDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectDatumRequest) ProtoMessage() {}

func (x *InspectDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectDatumRequest.ProtoReflect.Descriptor instead.
func (*InspectDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{43}
}

func (x *InspectDatumRequest) GetDatum() *Datum {
	if x != nil {
		return x.Datum
	}
	return nil
}

type ListDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Job and Input are two different ways to specify the datums you want.
	// Only one can be set.
	// Job is the job to list datums from.
	Job *Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// Input is the input to list datums from.
	// The datums listed are the ones that would be run if a pipeline was created
	// with the provided input.
	Input  *Input                   `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	Filter *ListDatumRequest_Filter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// datum id to start from. we do not include this datum in the response
	PaginationMarker string `protobuf:"bytes,4,opt,name=paginationMarker,proto3" json:"paginationMarker,omitempty"`
	// Number of datums to return
	Number int64 `protobuf:"varint,5,opt,name=number,proto3" json:"number,omitempty"`
	// If true, return datums in reverse order
	Reverse bool `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *ListDatumRequest) Reset() {
	*x = ListDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatumRequest) ProtoMessage() {}

func (x *ListDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatumRequest.ProtoReflect.Descriptor instead.
func (*ListDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{44}
}

func (x *ListDatumRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *ListDatumRequest) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ListDatumRequest) GetFilter() *ListDatumRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListDatumRequest) GetPaginationMarker() string {
	if x != nil {
		return x.PaginationMarker
	}
	return ""
}

func (x *ListDatumRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListDatumRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type StartCreateDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input is the input to list datums from. The datums listed are the ones
	// that would be run if a pipeline was created with the provided input.
	Input *Input `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Number of datums to return in first batch. If 0, default batch size
	// is returned.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *StartCreateDatumRequest) Reset() {
	*x = StartCreateDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCreateDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCreateDatumRequest) ProtoMessage() {}

func (x *StartCreateDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCreateDatumRequest.ProtoReflect.Descriptor instead.
func (*StartCreateDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{45}
}

func (x *StartCreateDatumRequest) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *StartCreateDatumRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type ContinueCreateDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of datums to return in next batch. If 0, default batch size
	// is returned.
	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *ContinueCreateDatumRequest) Reset() {
	*x = ContinueCreateDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueCreateDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueCreateDatumRequest) ProtoMessage() {}

func (x *ContinueCreateDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueCreateDatumRequest.ProtoReflect.Descriptor instead.
func (*ContinueCreateDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{46}
}

func (x *ContinueCreateDatumRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// Emits a stream of datums as they are created from the given input. Client
// must cancel the stream when it no longer wants to receive datums.
type CreateDatumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use StartCreateDatumRequest for the first request and
	// ContinueCreateDatumRequest for subsequent requests.
	//
	// Types that are assignable to Body:
	//
	//	*CreateDatumRequest_Start
	//	*CreateDatumRequest_Continue
	Body isCreateDatumRequest_Body `protobuf_oneof:"body"`
}

func (x *CreateDatumRequest) Reset() {
	*x = CreateDatumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDatumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDatumRequest) ProtoMessage() {}

func (x *CreateDatumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDatumRequest.ProtoReflect.Descriptor instead.
func (*CreateDatumRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{47}
}

func (m *CreateDatumRequest) GetBody() isCreateDatumRequest_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (x *CreateDatumRequest) GetStart() *StartCreateDatumRequest {
	if x, ok := x.GetBody().(*CreateDatumRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *CreateDatumRequest) GetContinue() *ContinueCreateDatumRequest {
	if x, ok := x.GetBody().(*CreateDatumRequest_Continue); ok {
		return x.Continue
	}
	return nil
}

type isCreateDatumRequest_Body interface {
	isCreateDatumRequest_Body()
}

type CreateDatumRequest_Start struct {
	Start *StartCreateDatumRequest `protobuf:"bytes,1,opt,name=start,proto3,oneof"`
}

type CreateDatumRequest_Continue struct {
	Continue *ContinueCreateDatumRequest `protobuf:"bytes,2,opt,name=continue,proto3,oneof"`
}

func (*CreateDatumRequest_Start) isCreateDatumRequest_Body() {}

func (*CreateDatumRequest_Continue) isCreateDatumRequest_Body() {}

// DatumSetSpec specifies how a pipeline should split its datums into datum sets.
type DatumSetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number, if nonzero, specifies that each datum set should contain `number`
	// datums. Datum sets may contain fewer if the total number of datums don't
	// divide evenly.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// size_bytes, if nonzero, specifies a target size for each datum set.
	// Datum sets may be larger or smaller than size_bytes, but will usually be
	// pretty close to size_bytes in size.
	SizeBytes int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// per_worker, if nonzero, specifies how many datum sets should be created
	// for each worker. It can't be set with number or size_bytes.
	PerWorker int64 `protobuf:"varint,3,opt,name=per_worker,json=perWorker,proto3" json:"per_worker,omitempty"`
}

func (x *DatumSetSpec) Reset() {
	*x = DatumSetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumSetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumSetSpec) ProtoMessage() {}

func (x *DatumSetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumSetSpec.ProtoReflect.Descriptor instead.
func (*DatumSetSpec) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{48}
}

func (x *DatumSetSpec) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DatumSetSpec) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DatumSetSpec) GetPerWorker() int64 {
	if x != nil {
		return x.PerWorker
	}
	return 0
}

type SchedulingSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeSelector      map[string]string `protobuf:"bytes,1,rep,name=node_selector,json=nodeSelector,proto3" json:"node_selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PriorityClassName string            `protobuf:"bytes,2,opt,name=priority_class_name,json=priorityClassName,proto3" json:"priority_class_name,omitempty"`
}

func (x *SchedulingSpec) Reset() {
	*x = SchedulingSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulingSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulingSpec) ProtoMessage() {}

func (x *SchedulingSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulingSpec.ProtoReflect.Descriptor instead.
func (*SchedulingSpec) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{49}
}

func (x *SchedulingSpec) GetNodeSelector() map[string]string {
	if x != nil {
		return x.NodeSelector
	}
	return nil
}

func (x *SchedulingSpec) GetPriorityClassName() string {
	if x != nil {
		return x.PriorityClassName
	}
	return ""
}

type RerunPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Reprocess forces the pipeline to reprocess all datums.
	Reprocess bool `protobuf:"varint,15,opt,name=reprocess,proto3" json:"reprocess,omitempty"`
}

func (x *RerunPipelineRequest) Reset() {
	*x = RerunPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunPipelineRequest) ProtoMessage() {}

func (x *RerunPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunPipelineRequest.ProtoReflect.Descriptor instead.
func (*RerunPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{50}
}

func (x *RerunPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *RerunPipelineRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

type CreatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs
	// when running in a kubernetes cluster on which kubeflow has been installed.
	// Exactly one of 'tf_job' and 'transform' should be set
	TfJob           *TFJob           `protobuf:"bytes,2,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
	Transform       *Transform       `protobuf:"bytes,3,opt,name=transform,proto3" json:"transform,omitempty"`
	ParallelismSpec *ParallelismSpec `protobuf:"bytes,4,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"`
	Egress          *Egress          `protobuf:"bytes,5,opt,name=egress,proto3" json:"egress,omitempty"`
	Update          bool             `protobuf:"varint,6,opt,name=update,proto3" json:"update,omitempty"`
	OutputBranch    string           `protobuf:"bytes,7,opt,name=output_branch,json=outputBranch,proto3" json:"output_branch,omitempty"`
	// s3_out, if set, requires a pipeline's user to write to its output repo
	// via Pachyderm's s3 gateway (if set, workers will serve Pachyderm's s3
	// gateway API at http://<pipeline>-s3.<namespace>/<job id>.out/my/file).
	// In this mode /pfs_v2/out won't be walked or uploaded, and the s3 gateway
	// service in the workers will allow writes to the job's output commit
	S3Out                 bool          `protobuf:"varint,8,opt,name=s3_out,json=s3Out,proto3" json:"s3_out,omitempty"`
	ResourceRequests      *ResourceSpec `protobuf:"bytes,9,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	ResourceLimits        *ResourceSpec `protobuf:"bytes,10,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	SidecarResourceLimits *ResourceSpec `protobuf:"bytes,11,opt,name=sidecar_resource_limits,json=sidecarResourceLimits,proto3" json:"sidecar_resource_limits,omitempty"`
	Input                 *Input        `protobuf:"bytes,12,opt,name=input,proto3" json:"input,omitempty"`
	Description           string        `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	// Reprocess forces the pipeline to reprocess all datums.
	// It only has meaning if Update is true
	Reprocess               bool                 `protobuf:"varint,15,opt,name=reprocess,proto3" json:"reprocess,omitempty"`
	Service                 *Service             `protobuf:"bytes,17,opt,name=service,proto3" json:"service,omitempty"`
	Spout                   *Spout               `protobuf:"bytes,18,opt,name=spout,proto3" json:"spout,omitempty"`
	DatumSetSpec            *DatumSetSpec        `protobuf:"bytes,19,opt,name=datum_set_spec,json=datumSetSpec,proto3" json:"datum_set_spec,omitempty"`
	DatumTimeout            *durationpb.Duration `protobuf:"bytes,20,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`
	JobTimeout              *durationpb.Duration `protobuf:"bytes,21,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`
	Salt                    string               `protobuf:"bytes,22,opt,name=salt,proto3" json:"salt,omitempty"`
	DatumTries              int64                `protobuf:"varint,23,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`
	SchedulingSpec          *SchedulingSpec      `protobuf:"bytes,24,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"`
	PodSpec                 string               `protobuf:"bytes,25,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`    // deprecated, use pod_patch below
	PodPatch                string               `protobuf:"bytes,26,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"` // a json patch will be applied to the pipeline's pod_spec before it's created;
	SpecCommit              *pfs.Commit          `protobuf:"bytes,27,opt,name=spec_commit,json=specCommit,proto3" json:"spec_commit,omitempty"`
	Metadata                *Metadata            `protobuf:"bytes,28,opt,name=metadata,proto3" json:"metadata,omitempty"`
	ReprocessSpec           string               `protobuf:"bytes,29,opt,name=reprocess_spec,json=reprocessSpec,proto3" json:"reprocess_spec,omitempty"`
	Autoscaling             bool                 `protobuf:"varint,30,opt,name=autoscaling,proto3" json:"autoscaling,omitempty"`
	Tolerations             []*Toleration        `protobuf:"bytes,34,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	SidecarResourceRequests *ResourceSpec        `protobuf:"bytes,35,opt,name=sidecar_resource_requests,json=sidecarResourceRequests,proto3" json:"sidecar_resource_requests,omitempty"`
	DryRun                  bool                 `protobuf:"varint,37,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Determined              *Determined          `protobuf:"bytes,38,opt,name=determined,proto3" json:"determined,omitempty"`
	MaximumExpectedUptime   *durationpb.Duration `protobuf:"bytes,39,opt,name=maximum_expected_uptime,json=maximumExpectedUptime,proto3" json:"maximum_expected_uptime,omitempty"`
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{51}
}

func (x *CreatePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreatePipelineRequest) GetTfJob() *TFJob {
	if x != nil {
		return x.TfJob
	}
	return nil
}

func (x *CreatePipelineRequest) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *CreatePipelineRequest) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *CreatePipelineRequest) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CreatePipelineRequest) GetOutputBranch() string {
	if x != nil {
		return x.OutputBranch
	}
	return ""
}

func (x *CreatePipelineRequest) GetS3Out() bool {
	if x != nil {
		return x.S3Out
	}
	return false
}

func (x *CreatePipelineRequest) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *CreatePipelineRequest) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *CreatePipelineRequest) GetSidecarResourceLimits() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceLimits
	}
	return nil
}

func (x *CreatePipelineRequest) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *CreatePipelineRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePipelineRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

func (x *CreatePipelineRequest) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *CreatePipelineRequest) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *CreatePipelineRequest) GetDatumSetSpec() *DatumSetSpec {
	if x != nil {
		return x.DatumSetSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetDatumTimeout() *durationpb.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *CreatePipelineRequest) GetJobTimeout() *durationpb.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *CreatePipelineRequest) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *CreatePipelineRequest) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *CreatePipelineRequest) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *CreatePipelineRequest) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *CreatePipelineRequest) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

func (x *CreatePipelineRequest) GetSpecCommit() *pfs.Commit {
	if x != nil {
		return x.SpecCommit
	}
	return nil
}

func (x *CreatePipelineRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreatePipelineRequest) GetReprocessSpec() string {
	if x != nil {
		return x.ReprocessSpec
	}
	return ""
}

func (x *CreatePipelineRequest) GetAutoscaling() bool {
	if x != nil {
		return x.Autoscaling
	}
	return false
}

func (x *CreatePipelineRequest) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *CreatePipelineRequest) GetSidecarResourceRequests() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceRequests
	}
	return nil
}

func (x *CreatePipelineRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *CreatePipelineRequest) GetDetermined() *Determined {
	if x != nil {
		return x.Determined
	}
	return nil
}

func (x *CreatePipelineRequest) GetMaximumExpectedUptime() *durationpb.Duration {
	if x != nil {
		return x.MaximumExpectedUptime
	}
	return nil
}

type CreatePipelineV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePipelineRequestJson string `protobuf:"bytes,1,opt,name=create_pipeline_request_json,json=createPipelineRequestJson,proto3" json:"create_pipeline_request_json,omitempty"` // a JSON-encoded CreatePipelineRequest
	DryRun                    bool   `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	Update                    bool   `protobuf:"varint,3,opt,name=update,proto3" json:"update,omitempty"`
	Reprocess                 bool   `protobuf:"varint,4,opt,name=reprocess,proto3" json:"reprocess,omitempty"`
}

func (x *CreatePipelineV2Request) Reset() {
	*x = CreatePipelineV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineV2Request) ProtoMessage() {}

func (x *CreatePipelineV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineV2Request.ProtoReflect.Descriptor instead.
func (*CreatePipelineV2Request) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{52}
}

func (x *CreatePipelineV2Request) GetCreatePipelineRequestJson() string {
	if x != nil {
		return x.CreatePipelineRequestJson
	}
	return ""
}

func (x *CreatePipelineV2Request) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *CreatePipelineV2Request) GetUpdate() bool {
	if x != nil {
		return x.Update
	}
	return false
}

func (x *CreatePipelineV2Request) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

type CreatePipelineV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectiveCreatePipelineRequestJson string `protobuf:"bytes,1,opt,name=effective_create_pipeline_request_json,json=effectiveCreatePipelineRequestJson,proto3" json:"effective_create_pipeline_request_json,omitempty"`
}

func (x *CreatePipelineV2Response) Reset() {
	*x = CreatePipelineV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineV2Response) ProtoMessage() {}

func (x *CreatePipelineV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineV2Response.ProtoReflect.Descriptor instead.
func (*CreatePipelineV2Response) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{53}
}

func (x *CreatePipelineV2Response) GetEffectiveCreatePipelineRequestJson() string {
	if x != nil {
		return x.EffectiveCreatePipelineRequestJson
	}
	return ""
}

type InspectPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// When true, return PipelineInfos with the details field, which requires
	// loading the pipeline spec from PFS.
	Details bool `protobuf:"varint,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *InspectPipelineRequest) Reset() {
	*x = InspectPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectPipelineRequest) ProtoMessage() {}

func (x *InspectPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectPipelineRequest.ProtoReflect.Descriptor instead.
func (*InspectPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{54}
}

func (x *InspectPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *InspectPipelineRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

type ListPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-nil, only return info about a single pipeline, this is redundant
	// with InspectPipeline unless history is non-zero.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// History indicates how many historical versions you want returned. Its
	// semantics are:
	// 0: Return the current version of the pipeline or pipelines.
	// 1: Return the above and the next most recent version
	// 2: etc.
	// -1: Return all historical versions.
	History int64 `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
	// Deprecated: Details are always returned.
	//
	// Deprecated: Marked as deprecated in pps/pps.proto.
	Details bool `protobuf:"varint,3,opt,name=details,proto3" json:"details,omitempty"`
	// A jq program string for additional result filtering
	JqFilter string `protobuf:"bytes,4,opt,name=jqFilter,proto3" json:"jqFilter,omitempty"`
	// If non-nil, will return all the pipeline infos at this commit set
	CommitSet *pfs.CommitSet `protobuf:"bytes,5,opt,name=commit_set,json=commitSet,proto3" json:"commit_set,omitempty"`
	// Projects to filter on. Empty list means no filter, so return all pipelines.
	Projects []*pfs.Project `protobuf:"bytes,6,rep,name=projects,proto3" json:"projects,omitempty"`
	// Page indicates which page of a certain size to return. If page is left empty,
	// all of the selected pipelines will be returned.
	Page *PipelinePage `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListPipelineRequest) Reset() {
	*x = ListPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineRequest) ProtoMessage() {}

func (x *ListPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{55}
}

func (x *ListPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *ListPipelineRequest) GetHistory() int64 {
	if x != nil {
		return x.History
	}
	return 0
}

// Deprecated: Marked as deprecated in pps/pps.proto.
func (x *ListPipelineRequest) GetDetails() bool {
	if x != nil {
		return x.Details
	}
	return false
}

func (x *ListPipelineRequest) GetJqFilter() string {
	if x != nil {
		return x.JqFilter
	}
	return ""
}

func (x *ListPipelineRequest) GetCommitSet() *pfs.CommitSet {
	if x != nil {
		return x.CommitSet
	}
	return nil
}

func (x *ListPipelineRequest) GetProjects() []*pfs.Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListPipelineRequest) GetPage() *PipelinePage {
	if x != nil {
		return x.Page
	}
	return nil
}

type PipelinePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order     PipelinePage_Ordering `protobuf:"varint,1,opt,name=order,proto3,enum=pps_v2.PipelinePage_Ordering" json:"order,omitempty"`
	PageSize  int64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageIndex int64                 `protobuf:"varint,3,opt,name=page_index,json=pageIndex,proto3" json:"page_index,omitempty"`
}

func (x *PipelinePage) Reset() {
	*x = PipelinePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePage) ProtoMessage() {}

func (x *PipelinePage) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePage.ProtoReflect.Descriptor instead.
func (*PipelinePage) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{56}
}

func (x *PipelinePage) GetOrder() PipelinePage_Ordering {
	if x != nil {
		return x.Order
	}
	return PipelinePage_RECENT
}

func (x *PipelinePage) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PipelinePage) GetPageIndex() int64 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

// Delete a pipeline.  If the deprecated all member is true, then delete all
// pipelines in the default project.
type DeletePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Deprecated: Marked as deprecated in pps/pps.proto.
	All      bool `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"` // Deprecated.
	Force    bool `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	KeepRepo bool `protobuf:"varint,4,opt,name=keep_repo,json=keepRepo,proto3" json:"keep_repo,omitempty"`
	// If true, an error will be returned if the pipeline doesn't exist.
	MustExist bool `protobuf:"varint,5,opt,name=must_exist,json=mustExist,proto3" json:"must_exist,omitempty"`
}

func (x *DeletePipelineRequest) Reset() {
	*x = DeletePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelineRequest) ProtoMessage() {}

func (x *DeletePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelineRequest.ProtoReflect.Descriptor instead.
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{57}
}

func (x *DeletePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Deprecated: Marked as deprecated in pps/pps.proto.
func (x *DeletePipelineRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DeletePipelineRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeletePipelineRequest) GetKeepRepo() bool {
	if x != nil {
		return x.KeepRepo
	}
	return false
}

func (x *DeletePipelineRequest) GetMustExist() bool {
	if x != nil {
		return x.MustExist
	}
	return false
}

// Delete more than one pipeline.
type DeletePipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All pipelines in each project will be deleted if the caller has
	// permission.
	Projects []*pfs.Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	Force    bool           `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	KeepRepo bool           `protobuf:"varint,3,opt,name=keep_repo,json=keepRepo,proto3" json:"keep_repo,omitempty"`
	// If set, all pipelines in all projects will be deleted if the caller has
	// permission.
	All bool `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
}

func (x *DeletePipelinesRequest) Reset() {
	*x = DeletePipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelinesRequest) ProtoMessage() {}

func (x *DeletePipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelinesRequest.ProtoReflect.Descriptor instead.
func (*DeletePipelinesRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{58}
}

func (x *DeletePipelinesRequest) GetProjects() []*pfs.Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *DeletePipelinesRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeletePipelinesRequest) GetKeepRepo() bool {
	if x != nil {
		return x.KeepRepo
	}
	return false
}

func (x *DeletePipelinesRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type DeletePipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *DeletePipelinesResponse) Reset() {
	*x = DeletePipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelinesResponse) ProtoMessage() {}

func (x *DeletePipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelinesResponse.ProtoReflect.Descriptor instead.
func (*DeletePipelinesResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{59}
}

func (x *DeletePipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type StartPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *StartPipelineRequest) Reset() {
	*x = StartPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPipelineRequest) ProtoMessage() {}

func (x *StartPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPipelineRequest.ProtoReflect.Descriptor instead.
func (*StartPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{60}
}

func (x *StartPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type StopPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// If true, an error will be returned if the pipeline doesn't exist.
	MustExist bool `protobuf:"varint,2,opt,name=must_exist,json=mustExist,proto3" json:"must_exist,omitempty"`
}

func (x *StopPipelineRequest) Reset() {
	*x = StopPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPipelineRequest) ProtoMessage() {}

func (x *StopPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPipelineRequest.ProtoReflect.Descriptor instead.
func (*StopPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{61}
}

func (x *StopPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *StopPipelineRequest) GetMustExist() bool {
	if x != nil {
		return x.MustExist
	}
	return false
}

type RunPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline   *Pipeline     `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Provenance []*pfs.Commit `protobuf:"bytes,2,rep,name=provenance,proto3" json:"provenance,omitempty"`
	JobId      string        `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *RunPipelineRequest) Reset() {
	*x = RunPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineRequest) ProtoMessage() {}

func (x *RunPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineRequest.ProtoReflect.Descriptor instead.
func (*RunPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{62}
}

func (x *RunPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *RunPipelineRequest) GetProvenance() []*pfs.Commit {
	if x != nil {
		return x.Provenance
	}
	return nil
}

func (x *RunPipelineRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

type RunCronRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RunCronRequest) Reset() {
	*x = RunCronRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCronRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCronRequest) ProtoMessage() {}

func (x *RunCronRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCronRequest.ProtoReflect.Descriptor instead.
func (*RunCronRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{63}
}

func (x *RunCronRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Request to check the status of pipelines within a project.
type CheckStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Context:
	//
	//	*CheckStatusRequest_All
	//	*CheckStatusRequest_Project
	Context isCheckStatusRequest_Context `protobuf_oneof:"context"`
}

func (x *CheckStatusRequest) Reset() {
	*x = CheckStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusRequest) ProtoMessage() {}

func (x *CheckStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusRequest.ProtoReflect.Descriptor instead.
func (*CheckStatusRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{64}
}

func (m *CheckStatusRequest) GetContext() isCheckStatusRequest_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *CheckStatusRequest) GetAll() bool {
	if x, ok := x.GetContext().(*CheckStatusRequest_All); ok {
		return x.All
	}
	return false
}

func (x *CheckStatusRequest) GetProject() *pfs.Project {
	if x, ok := x.GetContext().(*CheckStatusRequest_Project); ok {
		return x.Project
	}
	return nil
}

type isCheckStatusRequest_Context interface {
	isCheckStatusRequest_Context()
}

type CheckStatusRequest_All struct {
	// boolean field indicating status of all project pipelines.
	All bool `protobuf:"varint,1,opt,name=all,proto3,oneof"`
}

type CheckStatusRequest_Project struct {
	// project field
	Project *pfs.Project `protobuf:"bytes,2,opt,name=project,proto3,oneof"`
}

func (*CheckStatusRequest_All) isCheckStatusRequest_Context() {}

func (*CheckStatusRequest_Project) isCheckStatusRequest_Context() {}

// Response for check status request. Provides alerts if any.
type CheckStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project field
	Project *pfs.Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// pipeline field
	Pipeline *Pipeline `protobuf:"bytes,2,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// alert indicators
	Alerts []string `protobuf:"bytes,3,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *CheckStatusResponse) Reset() {
	*x = CheckStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusResponse) ProtoMessage() {}

func (x *CheckStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusResponse.ProtoReflect.Descriptor instead.
func (*CheckStatusResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{65}
}

func (x *CheckStatusResponse) GetProject() *pfs.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CheckStatusResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CheckStatusResponse) GetAlerts() []string {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type CreateSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *CreateSecretRequest) Reset() {
	*x = CreateSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSecretRequest) ProtoMessage() {}

func (x *CreateSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSecretRequest.ProtoReflect.Descriptor instead.
func (*CreateSecretRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{66}
}

func (x *CreateSecretRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

type DeleteSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret *Secret `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *DeleteSecretRequest) Reset() {
	*x = DeleteSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretRequest) ProtoMessage() {}

func (x *DeleteSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecretRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteSecretRequest) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

type InspectSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret *Secret `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *InspectSecretRequest) Reset() {
	*x = InspectSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectSecretRequest) ProtoMessage() {}

func (x *InspectSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectSecretRequest.ProtoReflect.Descriptor instead.
func (*InspectSecretRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{68}
}

func (x *InspectSecretRequest) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{69}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SecretInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret            *Secret                `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	Type              string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
}

func (x *SecretInfo) Reset() {
	*x = SecretInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInfo) ProtoMessage() {}

func (x *SecretInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInfo.ProtoReflect.Descriptor instead.
func (*SecretInfo) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{70}
}

func (x *SecretInfo) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *SecretInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SecretInfo) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

type SecretInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretInfo []*SecretInfo `protobuf:"bytes,1,rep,name=secret_info,json=secretInfo,proto3" json:"secret_info,omitempty"`
}

func (x *SecretInfos) Reset() {
	*x = SecretInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInfos) ProtoMessage() {}

func (x *SecretInfos) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInfos.ProtoReflect.Descriptor instead.
func (*SecretInfos) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{71}
}

func (x *SecretInfos) GetSecretInfo() []*SecretInfo {
	if x != nil {
		return x.SecretInfo
	}
	return nil
}

type ActivateAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthRequest) Reset() {
	*x = ActivateAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthRequest) ProtoMessage() {}

func (x *ActivateAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthRequest.ProtoReflect.Descriptor instead.
func (*ActivateAuthRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{72}
}

type ActivateAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActivateAuthResponse) Reset() {
	*x = ActivateAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateAuthResponse) ProtoMessage() {}

func (x *ActivateAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateAuthResponse.ProtoReflect.Descriptor instead.
func (*ActivateAuthResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{73}
}

type RunLoadTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DagSpec     string `protobuf:"bytes,1,opt,name=dag_spec,json=dagSpec,proto3" json:"dag_spec,omitempty"`
	LoadSpec    string `protobuf:"bytes,2,opt,name=load_spec,json=loadSpec,proto3" json:"load_spec,omitempty"`
	Seed        int64  `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	Parallelism int64  `protobuf:"varint,4,opt,name=parallelism,proto3" json:"parallelism,omitempty"`
	PodPatch    string `protobuf:"bytes,5,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"`
	StateId     string `protobuf:"bytes,6,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
}

func (x *RunLoadTestRequest) Reset() {
	*x = RunLoadTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadTestRequest) ProtoMessage() {}

func (x *RunLoadTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadTestRequest.ProtoReflect.Descriptor instead.
func (*RunLoadTestRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{74}
}

func (x *RunLoadTestRequest) GetDagSpec() string {
	if x != nil {
		return x.DagSpec
	}
	return ""
}

func (x *RunLoadTestRequest) GetLoadSpec() string {
	if x != nil {
		return x.LoadSpec
	}
	return ""
}

func (x *RunLoadTestRequest) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *RunLoadTestRequest) GetParallelism() int64 {
	if x != nil {
		return x.Parallelism
	}
	return 0
}

func (x *RunLoadTestRequest) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

func (x *RunLoadTestRequest) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

type RunLoadTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	StateId string `protobuf:"bytes,2,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
}

func (x *RunLoadTestResponse) Reset() {
	*x = RunLoadTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunLoadTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadTestResponse) ProtoMessage() {}

func (x *RunLoadTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadTestResponse.ProtoReflect.Descriptor instead.
func (*RunLoadTestResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{75}
}

func (x *RunLoadTestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RunLoadTestResponse) GetStateId() string {
	if x != nil {
		return x.StateId
	}
	return ""
}

type RenderTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template string            `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Args     map[string]string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RenderTemplateRequest) Reset() {
	*x = RenderTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTemplateRequest) ProtoMessage() {}

func (x *RenderTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTemplateRequest.ProtoReflect.Descriptor instead.
func (*RenderTemplateRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{76}
}

func (x *RenderTemplateRequest) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *RenderTemplateRequest) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RenderTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json  string                   `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
	Specs []*CreatePipelineRequest `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *RenderTemplateResponse) Reset() {
	*x = RenderTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderTemplateResponse) ProtoMessage() {}

func (x *RenderTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderTemplateResponse.ProtoReflect.Descriptor instead.
func (*RenderTemplateResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{77}
}

func (x *RenderTemplateResponse) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *RenderTemplateResponse) GetSpecs() []*CreatePipelineRequest {
	if x != nil {
		return x.Specs
	}
	return nil
}

type LokiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since *durationpb.Duration `protobuf:"bytes,1,opt,name=since,proto3" json:"since,omitempty"`
	Query string               `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *LokiRequest) Reset() {
	*x = LokiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LokiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LokiRequest) ProtoMessage() {}

func (x *LokiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LokiRequest.ProtoReflect.Descriptor instead.
func (*LokiRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{78}
}

func (x *LokiRequest) GetSince() *durationpb.Duration {
	if x != nil {
		return x.Since
	}
	return nil
}

func (x *LokiRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type LokiLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LokiLogMessage) Reset() {
	*x = LokiLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LokiLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LokiLogMessage) ProtoMessage() {}

func (x *LokiLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LokiLogMessage.ProtoReflect.Descriptor instead.
func (*LokiLogMessage) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{79}
}

func (x *LokiLogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ClusterDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CreatePipelineRequest contains the default JSON CreatePipelineRequest into
	// which pipeline specs are merged to form the effective spec used to create a
	// pipeline.
	CreatePipelineRequest *CreatePipelineRequest `protobuf:"bytes,3,opt,name=create_pipeline_request,json=createPipelineRequest,proto3" json:"create_pipeline_request,omitempty"`
}

func (x *ClusterDefaults) Reset() {
	*x = ClusterDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterDefaults) ProtoMessage() {}

func (x *ClusterDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterDefaults.ProtoReflect.Descriptor instead.
func (*ClusterDefaults) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{80}
}

func (x *ClusterDefaults) GetCreatePipelineRequest() *CreatePipelineRequest {
	if x != nil {
		return x.CreatePipelineRequest
	}
	return nil
}

type GetClusterDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClusterDefaultsRequest) Reset() {
	*x = GetClusterDefaultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDefaultsRequest) ProtoMessage() {}

func (x *GetClusterDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDefaultsRequest.ProtoReflect.Descriptor instead.
func (*GetClusterDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{81}
}

type GetClusterDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A JSON-encoded ClusterDefaults message, this is the verbatim input passed
	// to SetClusterDefaults.
	ClusterDefaultsJson string `protobuf:"bytes,2,opt,name=cluster_defaults_json,json=clusterDefaultsJson,proto3" json:"cluster_defaults_json,omitempty"`
}

func (x *GetClusterDefaultsResponse) Reset() {
	*x = GetClusterDefaultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterDefaultsResponse) ProtoMessage() {}

func (x *GetClusterDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterDefaultsResponse.ProtoReflect.Descriptor instead.
func (*GetClusterDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{82}
}

func (x *GetClusterDefaultsResponse) GetClusterDefaultsJson() string {
	if x != nil {
		return x.ClusterDefaultsJson
	}
	return ""
}

type SetClusterDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regenerate bool `protobuf:"varint,2,opt,name=regenerate,proto3" json:"regenerate,omitempty"`
	Reprocess  bool `protobuf:"varint,3,opt,name=reprocess,proto3" json:"reprocess,omitempty"` // must be false if regenerate is false
	DryRun     bool `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// A JSON-encoded ClusterDefaults message, this will be stored verbatim.
	ClusterDefaultsJson string `protobuf:"bytes,5,opt,name=cluster_defaults_json,json=clusterDefaultsJson,proto3" json:"cluster_defaults_json,omitempty"`
}

func (x *SetClusterDefaultsRequest) Reset() {
	*x = SetClusterDefaultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClusterDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClusterDefaultsRequest) ProtoMessage() {}

func (x *SetClusterDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClusterDefaultsRequest.ProtoReflect.Descriptor instead.
func (*SetClusterDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{83}
}

func (x *SetClusterDefaultsRequest) GetRegenerate() bool {
	if x != nil {
		return x.Regenerate
	}
	return false
}

func (x *SetClusterDefaultsRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

func (x *SetClusterDefaultsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SetClusterDefaultsRequest) GetClusterDefaultsJson() string {
	if x != nil {
		return x.ClusterDefaultsJson
	}
	return ""
}

type SetClusterDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedPipelines []*Pipeline `protobuf:"bytes,2,rep,name=affected_pipelines,json=affectedPipelines,proto3" json:"affected_pipelines,omitempty"`
}

func (x *SetClusterDefaultsResponse) Reset() {
	*x = SetClusterDefaultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetClusterDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetClusterDefaultsResponse) ProtoMessage() {}

func (x *SetClusterDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetClusterDefaultsResponse.ProtoReflect.Descriptor instead.
func (*SetClusterDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{84}
}

func (x *SetClusterDefaultsResponse) GetAffectedPipelines() []*Pipeline {
	if x != nil {
		return x.AffectedPipelines
	}
	return nil
}

type CreatePipelineTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePipelineRequest *CreatePipelineRequest `protobuf:"bytes,1,opt,name=create_pipeline_request,json=createPipelineRequest,proto3" json:"create_pipeline_request,omitempty"`
	UserJson              string                 `protobuf:"bytes,2,opt,name=user_json,json=userJson,proto3" json:"user_json,omitempty"`                // the JSON the user originally submitted
	EffectiveJson         string                 `protobuf:"bytes,3,opt,name=effective_json,json=effectiveJson,proto3" json:"effective_json,omitempty"` // the effective spec: the result of merging the user JSON into the cluster defaults
	CreatedBy             string                 `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *CreatePipelineTransaction) Reset() {
	*x = CreatePipelineTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineTransaction) ProtoMessage() {}

func (x *CreatePipelineTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineTransaction.ProtoReflect.Descriptor instead.
func (*CreatePipelineTransaction) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{85}
}

func (x *CreatePipelineTransaction) GetCreatePipelineRequest() *CreatePipelineRequest {
	if x != nil {
		return x.CreatePipelineRequest
	}
	return nil
}

func (x *CreatePipelineTransaction) GetUserJson() string {
	if x != nil {
		return x.UserJson
	}
	return ""
}

func (x *CreatePipelineTransaction) GetEffectiveJson() string {
	if x != nil {
		return x.EffectiveJson
	}
	return ""
}

func (x *CreatePipelineTransaction) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

type ProjectDefaults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatePipelineRequest *CreatePipelineRequest `protobuf:"bytes,1,opt,name=create_pipeline_request,json=createPipelineRequest,proto3" json:"create_pipeline_request,omitempty"`
}

func (x *ProjectDefaults) Reset() {
	*x = ProjectDefaults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectDefaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectDefaults) ProtoMessage() {}

func (x *ProjectDefaults) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectDefaults.ProtoReflect.Descriptor instead.
func (*ProjectDefaults) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{86}
}

func (x *ProjectDefaults) GetCreatePipelineRequest() *CreatePipelineRequest {
	if x != nil {
		return x.CreatePipelineRequest
	}
	return nil
}

type GetProjectDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *pfs.Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectDefaultsRequest) Reset() {
	*x = GetProjectDefaultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultsRequest) ProtoMessage() {}

func (x *GetProjectDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{87}
}

func (x *GetProjectDefaultsRequest) GetProject() *pfs.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type GetProjectDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A JSON-encoded ProjectDefaults message, this is the verbatim input passed
	// to SetProjectDefaults.
	ProjectDefaultsJson string                 `protobuf:"bytes,1,opt,name=project_defaults_json,json=projectDefaultsJson,proto3" json:"project_defaults_json,omitempty"`
	CreatedBy           string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *GetProjectDefaultsResponse) Reset() {
	*x = GetProjectDefaultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectDefaultsResponse) ProtoMessage() {}

func (x *GetProjectDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectDefaultsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{88}
}

func (x *GetProjectDefaultsResponse) GetProjectDefaultsJson() string {
	if x != nil {
		return x.ProjectDefaultsJson
	}
	return ""
}

func (x *GetProjectDefaultsResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetProjectDefaultsResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SetProjectDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project    *pfs.Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Regenerate bool         `protobuf:"varint,2,opt,name=regenerate,proto3" json:"regenerate,omitempty"`
	Reprocess  bool         `protobuf:"varint,3,opt,name=reprocess,proto3" json:"reprocess,omitempty"` // must be false if regenerate is false
	DryRun     bool         `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// A JSON-encoded ProjectDefaults message, this will be stored verbatim.
	ProjectDefaultsJson string `protobuf:"bytes,5,opt,name=project_defaults_json,json=projectDefaultsJson,proto3" json:"project_defaults_json,omitempty"`
}

func (x *SetProjectDefaultsRequest) Reset() {
	*x = SetProjectDefaultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProjectDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProjectDefaultsRequest) ProtoMessage() {}

func (x *SetProjectDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProjectDefaultsRequest.ProtoReflect.Descriptor instead.
func (*SetProjectDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{89}
}

func (x *SetProjectDefaultsRequest) GetProject() *pfs.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *SetProjectDefaultsRequest) GetRegenerate() bool {
	if x != nil {
		return x.Regenerate
	}
	return false
}

func (x *SetProjectDefaultsRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

func (x *SetProjectDefaultsRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *SetProjectDefaultsRequest) GetProjectDefaultsJson() string {
	if x != nil {
		return x.ProjectDefaultsJson
	}
	return ""
}

type SetProjectDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AffectedPipelines []*Pipeline `protobuf:"bytes,1,rep,name=affected_pipelines,json=affectedPipelines,proto3" json:"affected_pipelines,omitempty"`
}

func (x *SetProjectDefaultsResponse) Reset() {
	*x = SetProjectDefaultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProjectDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProjectDefaultsResponse) ProtoMessage() {}

func (x *SetProjectDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProjectDefaultsResponse.ProtoReflect.Descriptor instead.
func (*SetProjectDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{90}
}

func (x *SetProjectDefaultsResponse) GetAffectedPipelines() []*Pipeline {
	if x != nil {
		return x.AffectedPipelines
	}
	return nil
}

type PipelinesSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a PipelinesSummary will be returned for each of the requests projects
	Projects []*pfs.ProjectPicker `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *PipelinesSummaryRequest) Reset() {
	*x = PipelinesSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinesSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinesSummaryRequest) ProtoMessage() {}

func (x *PipelinesSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinesSummaryRequest.ProtoReflect.Descriptor instead.
func (*PipelinesSummaryRequest) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{91}
}

func (x *PipelinesSummaryRequest) GetProjects() []*pfs.ProjectPicker {
	if x != nil {
		return x.Projects
	}
	return nil
}

type PipelinesSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the pipeline summaries for the requested projects
	Summaries []*PipelinesSummary `protobuf:"bytes,1,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *PipelinesSummaryResponse) Reset() {
	*x = PipelinesSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinesSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinesSummaryResponse) ProtoMessage() {}

func (x *PipelinesSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinesSummaryResponse.ProtoReflect.Descriptor instead.
func (*PipelinesSummaryResponse) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{92}
}

func (x *PipelinesSummaryResponse) GetSummaries() []*PipelinesSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type PipelinesSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the project the PipelinesSummary corresponds to
	Project *pfs.Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// count of active pipelines
	ActivePipelines int64 `protobuf:"varint,2,opt,name=active_pipelines,json=activePipelines,proto3" json:"active_pipelines,omitempty"`
	// count of paused pipelines
	PausedPipelines int64 `protobuf:"varint,3,opt,name=paused_pipelines,json=pausedPipelines,proto3" json:"paused_pipelines,omitempty"`
	// count of failed pipelines
	FailedPipelines int64 `protobuf:"varint,4,opt,name=failed_pipelines,json=failedPipelines,proto3" json:"failed_pipelines,omitempty"`
	// count of pipelines with a failed latest job
	UnhealthyPipelines int64 `protobuf:"varint,5,opt,name=unhealthy_pipelines,json=unhealthyPipelines,proto3" json:"unhealthy_pipelines,omitempty"`
}

func (x *PipelinesSummary) Reset() {
	*x = PipelinesSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinesSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinesSummary) ProtoMessage() {}

func (x *PipelinesSummary) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinesSummary.ProtoReflect.Descriptor instead.
func (*PipelinesSummary) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{93}
}

func (x *PipelinesSummary) GetProject() *pfs.Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PipelinesSummary) GetActivePipelines() int64 {
	if x != nil {
		return x.ActivePipelines
	}
	return 0
}

func (x *PipelinesSummary) GetPausedPipelines() int64 {
	if x != nil {
		return x.PausedPipelines
	}
	return 0
}

func (x *PipelinesSummary) GetFailedPipelines() int64 {
	if x != nil {
		return x.FailedPipelines
	}
	return 0
}

func (x *PipelinesSummary) GetUnhealthyPipelines() int64 {
	if x != nil {
		return x.UnhealthyPipelines
	}
	return 0
}

type PipelinePicker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Picker:
	//
	//	*PipelinePicker_Name
	Picker isPipelinePicker_Picker `protobuf_oneof:"picker"`
}

func (x *PipelinePicker) Reset() {
	*x = PipelinePicker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePicker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePicker) ProtoMessage() {}

func (x *PipelinePicker) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePicker.ProtoReflect.Descriptor instead.
func (*PipelinePicker) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{94}
}

func (m *PipelinePicker) GetPicker() isPipelinePicker_Picker {
	if m != nil {
		return m.Picker
	}
	return nil
}

func (x *PipelinePicker) GetName() *PipelinePicker_PipelineName {
	if x, ok := x.GetPicker().(*PipelinePicker_Name); ok {
		return x.Name
	}
	return nil
}

type isPipelinePicker_Picker interface {
	isPipelinePicker_Picker()
}

type PipelinePicker_Name struct {
	Name *PipelinePicker_PipelineName `protobuf:"bytes,1,opt,name=name,proto3,oneof"`
}

func (*PipelinePicker_Name) isPipelinePicker_Picker() {}

type JobInfo_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform               *Transform           `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"`
	ParallelismSpec         *ParallelismSpec     `protobuf:"bytes,2,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"`
	Egress                  *Egress              `protobuf:"bytes,3,opt,name=egress,proto3" json:"egress,omitempty"`
	Service                 *Service             `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Spout                   *Spout               `protobuf:"bytes,5,opt,name=spout,proto3" json:"spout,omitempty"`
	WorkerStatus            []*WorkerStatus      `protobuf:"bytes,6,rep,name=worker_status,json=workerStatus,proto3" json:"worker_status,omitempty"`
	ResourceRequests        *ResourceSpec        `protobuf:"bytes,7,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	ResourceLimits          *ResourceSpec        `protobuf:"bytes,8,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	SidecarResourceLimits   *ResourceSpec        `protobuf:"bytes,9,opt,name=sidecar_resource_limits,json=sidecarResourceLimits,proto3" json:"sidecar_resource_limits,omitempty"`
	Input                   *Input               `protobuf:"bytes,10,opt,name=input,proto3" json:"input,omitempty"`
	Salt                    string               `protobuf:"bytes,11,opt,name=salt,proto3" json:"salt,omitempty"`
	DatumSetSpec            *DatumSetSpec        `protobuf:"bytes,12,opt,name=datum_set_spec,json=datumSetSpec,proto3" json:"datum_set_spec,omitempty"`
	DatumTimeout            *durationpb.Duration `protobuf:"bytes,13,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`
	JobTimeout              *durationpb.Duration `protobuf:"bytes,14,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`
	DatumTries              int64                `protobuf:"varint,15,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`
	SchedulingSpec          *SchedulingSpec      `protobuf:"bytes,16,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"`
	PodSpec                 string               `protobuf:"bytes,17,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`
	PodPatch                string               `protobuf:"bytes,18,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"`
	SidecarResourceRequests *ResourceSpec        `protobuf:"bytes,19,opt,name=sidecar_resource_requests,json=sidecarResourceRequests,proto3" json:"sidecar_resource_requests,omitempty"`
}

func (x *JobInfo_Details) Reset() {
	*x = JobInfo_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobInfo_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo_Details) ProtoMessage() {}

func (x *JobInfo_Details) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo_Details.ProtoReflect.Descriptor instead.
func (*JobInfo_Details) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{25, 0}
}

func (x *JobInfo_Details) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *JobInfo_Details) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *JobInfo_Details) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *JobInfo_Details) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *JobInfo_Details) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *JobInfo_Details) GetWorkerStatus() []*WorkerStatus {
	if x != nil {
		return x.WorkerStatus
	}
	return nil
}

func (x *JobInfo_Details) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *JobInfo_Details) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *JobInfo_Details) GetSidecarResourceLimits() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceLimits
	}
	return nil
}

func (x *JobInfo_Details) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *JobInfo_Details) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *JobInfo_Details) GetDatumSetSpec() *DatumSetSpec {
	if x != nil {
		return x.DatumSetSpec
	}
	return nil
}

func (x *JobInfo_Details) GetDatumTimeout() *durationpb.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *JobInfo_Details) GetJobTimeout() *durationpb.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *JobInfo_Details) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *JobInfo_Details) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *JobInfo_Details) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *JobInfo_Details) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

func (x *JobInfo_Details) GetSidecarResourceRequests() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceRequests
	}
	return nil
}

type PipelineInfo_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transform *Transform `protobuf:"bytes,1,opt,name=transform,proto3" json:"transform,omitempty"`
	// tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs
	// when running in a kubernetes cluster on which kubeflow has been installed.
	// Exactly one of 'tf_job' and 'transform' should be set
	TfJob                   *TFJob                 `protobuf:"bytes,2,opt,name=tf_job,json=tfJob,proto3" json:"tf_job,omitempty"`
	ParallelismSpec         *ParallelismSpec       `protobuf:"bytes,3,opt,name=parallelism_spec,json=parallelismSpec,proto3" json:"parallelism_spec,omitempty"`
	Egress                  *Egress                `protobuf:"bytes,4,opt,name=egress,proto3" json:"egress,omitempty"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy               string                 `protobuf:"bytes,40,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	RecentError             string                 `protobuf:"bytes,6,opt,name=recent_error,json=recentError,proto3" json:"recent_error,omitempty"`
	WorkersRequested        int64                  `protobuf:"varint,7,opt,name=workers_requested,json=workersRequested,proto3" json:"workers_requested,omitempty"`
	WorkersAvailable        int64                  `protobuf:"varint,8,opt,name=workers_available,json=workersAvailable,proto3" json:"workers_available,omitempty"`
	OutputBranch            string                 `protobuf:"bytes,9,opt,name=output_branch,json=outputBranch,proto3" json:"output_branch,omitempty"`
	ResourceRequests        *ResourceSpec          `protobuf:"bytes,10,opt,name=resource_requests,json=resourceRequests,proto3" json:"resource_requests,omitempty"`
	ResourceLimits          *ResourceSpec          `protobuf:"bytes,11,opt,name=resource_limits,json=resourceLimits,proto3" json:"resource_limits,omitempty"`
	SidecarResourceLimits   *ResourceSpec          `protobuf:"bytes,12,opt,name=sidecar_resource_limits,json=sidecarResourceLimits,proto3" json:"sidecar_resource_limits,omitempty"`
	Input                   *Input                 `protobuf:"bytes,13,opt,name=input,proto3" json:"input,omitempty"`
	Description             string                 `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Salt                    string                 `protobuf:"bytes,16,opt,name=salt,proto3" json:"salt,omitempty"`
	Reason                  string                 `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	Service                 *Service               `protobuf:"bytes,19,opt,name=service,proto3" json:"service,omitempty"`
	Spout                   *Spout                 `protobuf:"bytes,20,opt,name=spout,proto3" json:"spout,omitempty"`
	DatumSetSpec            *DatumSetSpec          `protobuf:"bytes,21,opt,name=datum_set_spec,json=datumSetSpec,proto3" json:"datum_set_spec,omitempty"`
	DatumTimeout            *durationpb.Duration   `protobuf:"bytes,22,opt,name=datum_timeout,json=datumTimeout,proto3" json:"datum_timeout,omitempty"`
	JobTimeout              *durationpb.Duration   `protobuf:"bytes,23,opt,name=job_timeout,json=jobTimeout,proto3" json:"job_timeout,omitempty"`
	DatumTries              int64                  `protobuf:"varint,24,opt,name=datum_tries,json=datumTries,proto3" json:"datum_tries,omitempty"`
	SchedulingSpec          *SchedulingSpec        `protobuf:"bytes,25,opt,name=scheduling_spec,json=schedulingSpec,proto3" json:"scheduling_spec,omitempty"`
	PodSpec                 string                 `protobuf:"bytes,26,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`
	PodPatch                string                 `protobuf:"bytes,27,opt,name=pod_patch,json=podPatch,proto3" json:"pod_patch,omitempty"`
	S3Out                   bool                   `protobuf:"varint,28,opt,name=s3_out,json=s3Out,proto3" json:"s3_out,omitempty"`
	Metadata                *Metadata              `protobuf:"bytes,29,opt,name=metadata,proto3" json:"metadata,omitempty"` // Kubernetes metadata
	ReprocessSpec           string                 `protobuf:"bytes,30,opt,name=reprocess_spec,json=reprocessSpec,proto3" json:"reprocess_spec,omitempty"`
	UnclaimedTasks          int64                  `protobuf:"varint,31,opt,name=unclaimed_tasks,json=unclaimedTasks,proto3" json:"unclaimed_tasks,omitempty"`
	WorkerRc                string                 `protobuf:"bytes,32,opt,name=worker_rc,json=workerRc,proto3" json:"worker_rc,omitempty"`
	Autoscaling             bool                   `protobuf:"varint,33,opt,name=autoscaling,proto3" json:"autoscaling,omitempty"`
	Tolerations             []*Toleration          `protobuf:"bytes,34,rep,name=tolerations,proto3" json:"tolerations,omitempty"`
	SidecarResourceRequests *ResourceSpec          `protobuf:"bytes,35,opt,name=sidecar_resource_requests,json=sidecarResourceRequests,proto3" json:"sidecar_resource_requests,omitempty"`
	Determined              *Determined            `protobuf:"bytes,36,opt,name=determined,proto3" json:"determined,omitempty"`
	MaximumExpectedUptime   *durationpb.Duration   `protobuf:"bytes,37,opt,name=maximum_expected_uptime,json=maximumExpectedUptime,proto3" json:"maximum_expected_uptime,omitempty"`
	WorkersStartedAt        *timestamppb.Timestamp `protobuf:"bytes,38,opt,name=workers_started_at,json=workersStartedAt,proto3" json:"workers_started_at,omitempty"`
}

func (x *PipelineInfo_Details) Reset() {
	*x = PipelineInfo_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineInfo_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineInfo_Details) ProtoMessage() {}

func (x *PipelineInfo_Details) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineInfo_Details.ProtoReflect.Descriptor instead.
func (*PipelineInfo_Details) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{29, 0}
}

func (x *PipelineInfo_Details) GetTransform() *Transform {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *PipelineInfo_Details) GetTfJob() *TFJob {
	if x != nil {
		return x.TfJob
	}
	return nil
}

func (x *PipelineInfo_Details) GetParallelismSpec() *ParallelismSpec {
	if x != nil {
		return x.ParallelismSpec
	}
	return nil
}

func (x *PipelineInfo_Details) GetEgress() *Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *PipelineInfo_Details) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PipelineInfo_Details) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PipelineInfo_Details) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PipelineInfo_Details) GetRecentError() string {
	if x != nil {
		return x.RecentError
	}
	return ""
}

func (x *PipelineInfo_Details) GetWorkersRequested() int64 {
	if x != nil {
		return x.WorkersRequested
	}
	return 0
}

func (x *PipelineInfo_Details) GetWorkersAvailable() int64 {
	if x != nil {
		return x.WorkersAvailable
	}
	return 0
}

func (x *PipelineInfo_Details) GetOutputBranch() string {
	if x != nil {
		return x.OutputBranch
	}
	return ""
}

func (x *PipelineInfo_Details) GetResourceRequests() *ResourceSpec {
	if x != nil {
		return x.ResourceRequests
	}
	return nil
}

func (x *PipelineInfo_Details) GetResourceLimits() *ResourceSpec {
	if x != nil {
		return x.ResourceLimits
	}
	return nil
}

func (x *PipelineInfo_Details) GetSidecarResourceLimits() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceLimits
	}
	return nil
}

func (x *PipelineInfo_Details) GetInput() *Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *PipelineInfo_Details) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PipelineInfo_Details) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PipelineInfo_Details) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PipelineInfo_Details) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *PipelineInfo_Details) GetSpout() *Spout {
	if x != nil {
		return x.Spout
	}
	return nil
}

func (x *PipelineInfo_Details) GetDatumSetSpec() *DatumSetSpec {
	if x != nil {
		return x.DatumSetSpec
	}
	return nil
}

func (x *PipelineInfo_Details) GetDatumTimeout() *durationpb.Duration {
	if x != nil {
		return x.DatumTimeout
	}
	return nil
}

func (x *PipelineInfo_Details) GetJobTimeout() *durationpb.Duration {
	if x != nil {
		return x.JobTimeout
	}
	return nil
}

func (x *PipelineInfo_Details) GetDatumTries() int64 {
	if x != nil {
		return x.DatumTries
	}
	return 0
}

func (x *PipelineInfo_Details) GetSchedulingSpec() *SchedulingSpec {
	if x != nil {
		return x.SchedulingSpec
	}
	return nil
}

func (x *PipelineInfo_Details) GetPodSpec() string {
	if x != nil {
		return x.PodSpec
	}
	return ""
}

func (x *PipelineInfo_Details) GetPodPatch() string {
	if x != nil {
		return x.PodPatch
	}
	return ""
}

func (x *PipelineInfo_Details) GetS3Out() bool {
	if x != nil {
		return x.S3Out
	}
	return false
}

func (x *PipelineInfo_Details) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PipelineInfo_Details) GetReprocessSpec() string {
	if x != nil {
		return x.ReprocessSpec
	}
	return ""
}

func (x *PipelineInfo_Details) GetUnclaimedTasks() int64 {
	if x != nil {
		return x.UnclaimedTasks
	}
	return 0
}

func (x *PipelineInfo_Details) GetWorkerRc() string {
	if x != nil {
		return x.WorkerRc
	}
	return ""
}

func (x *PipelineInfo_Details) GetAutoscaling() bool {
	if x != nil {
		return x.Autoscaling
	}
	return false
}

func (x *PipelineInfo_Details) GetTolerations() []*Toleration {
	if x != nil {
		return x.Tolerations
	}
	return nil
}

func (x *PipelineInfo_Details) GetSidecarResourceRequests() *ResourceSpec {
	if x != nil {
		return x.SidecarResourceRequests
	}
	return nil
}

func (x *PipelineInfo_Details) GetDetermined() *Determined {
	if x != nil {
		return x.Determined
	}
	return nil
}

func (x *PipelineInfo_Details) GetMaximumExpectedUptime() *durationpb.Duration {
	if x != nil {
		return x.MaximumExpectedUptime
	}
	return nil
}

func (x *PipelineInfo_Details) GetWorkersStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.WorkersStartedAt
	}
	return nil
}

// Filter restricts returned DatumInfo messages to those which match
// all of the filtered attributes.
type ListDatumRequest_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []DatumState `protobuf:"varint,1,rep,packed,name=state,proto3,enum=pps_v2.DatumState" json:"state,omitempty"` // Must match one of the given states.
}

func (x *ListDatumRequest_Filter) Reset() {
	*x = ListDatumRequest_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDatumRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDatumRequest_Filter) ProtoMessage() {}

func (x *ListDatumRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDatumRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListDatumRequest_Filter) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{44, 0}
}

func (x *ListDatumRequest_Filter) GetState() []DatumState {
	if x != nil {
		return x.State
	}
	return nil
}

type PipelinePicker_PipelineName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *pfs.ProjectPicker `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Name    string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PipelinePicker_PipelineName) Reset() {
	*x = PipelinePicker_PipelineName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pps_pps_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelinePicker_PipelineName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelinePicker_PipelineName) ProtoMessage() {}

func (x *PipelinePicker_PipelineName) ProtoReflect() protoreflect.Message {
	mi := &file_pps_pps_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelinePicker_PipelineName.ProtoReflect.Descriptor instead.
func (*PipelinePicker_PipelineName) Descriptor() ([]byte, []int) {
	return file_pps_pps_proto_rawDescGZIP(), []int{94, 0}
}

func (x *PipelinePicker_PipelineName) GetProject() *pfs.ProjectPicker {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PipelinePicker_PipelineName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_pps_pps_proto protoreflect.FileDescriptor

var file_pps_pps_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x70, 0x73, 0x2f, 0x70, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x66, 0x73, 0x2f, 0x70, 0x66, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x6b, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x22, 0xae, 0x04,
	0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x6d, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x43, 0x6d, 0x64, 0x12, 0x2c, 0x0a, 0x03,
	0x65, 0x6e, 0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x74, 0x64, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22, 0x1e,
	0x0a, 0x05, 0x54, 0x46, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x66, 0x5f, 0x6a, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x22, 0xb1,
	0x01, 0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x44, 0x0a, 0x0e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x53, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x2c, 0x0a, 0x0a, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x22, 0x43, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22,
	0x77, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x32, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x75,
	0x74, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x95, 0x03, 0x0a,
	0x08, 0x50, 0x46, 0x53, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x12, 0x17, 0x0a, 0x07,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a,
	0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c,
	0x61, 0x7a, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x73, 0x33, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x05, 0xba,
	0x46, 0x02, 0x18, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x22, 0xeb, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x70, 0x66,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x46, 0x53, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x03, 0x70, 0x66, 0x73, 0x12, 0x21,
	0x0a, 0x04, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x04, 0x6a, 0x6f, 0x69,
	0x6e, 0x12, 0x23, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22, 0x6e,
	0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x7a, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x7a, 0x79, 0x22, 0x34,
	0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x3a, 0x05, 0xba,
	0x46, 0x02, 0x18, 0x01, 0x22, 0x33, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x36, 0x0a, 0x05, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x70, 0x66,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x66, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x09, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x66, 0x74, 0x68, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x66, 0x74,
	0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x79, 0x46, 0x69, 0x66, 0x74, 0x68, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa9,
	0x02, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x36,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x76, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x03,
	0x67, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22, 0x3c, 0x0a, 0x07, 0x47, 0x50,
	0x55, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22, 0x5a, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x22, 0x96, 0x0d, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xde, 0x07, 0x0a,
	0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x05,
	0x73, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x19, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x47, 0x0a,
	0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x54,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0xc9, 0x14, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69,
	0x73, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x95, 0x0e, 0x0a, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x66, 0x5f, 0x6a, 0x6f, 0x62,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x54, 0x46, 0x4a, 0x6f, 0x62, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x12, 0x42, 0x0a, 0x10,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x26, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x41, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a,
	0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x33, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x33, 0x4f, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x6e, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x5f, 0x72, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50,
	0x0a, 0x19, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a,
	0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49, 0x50,
	0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x52, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x4a,
	0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x39, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x06, 0x4a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a,
	0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07,
	0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77,
	0x61, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xf0, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x60, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x03, 0x6a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x5d, 0x0a,
	0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x31, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22,
	0x47, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xf7, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x26, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x28,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x6c, 0x6f, 0x6b, 0x69, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x6b,
	0x69, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0a, 0x4c, 0x6f,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x3a, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x22, 0xa1, 0x02,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x1a, 0x32, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x69, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x6b, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x3a, 0x05, 0xba, 0x46, 0x02,
	0x18, 0x01, 0x22, 0xd7, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x22, 0x6c, 0x0a, 0x14,
	0x52, 0x65, 0x72, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xce, 0x0c, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x74, 0x66, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x46, 0x4a, 0x6f,
	0x62, 0x52, 0x05, 0x74, 0x66, 0x4a, 0x6f, 0x62, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a,
	0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa, 0x46, 0x02, 0x08, 0x01, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x33, 0x5f,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x33, 0x4f, 0x75, 0x74,
	0x12, 0x41, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa, 0x46, 0x02, 0x08,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x53, 0x70, 0x6f, 0x75, 0x74, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x5f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x54, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x05, 0xaa, 0x46, 0x02, 0x08, 0x01, 0x52, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x19, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x17, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x64, 0x72, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0xaa, 0x46, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x52, 0x0a, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x51, 0x0a,
	0x17, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x3a, 0x05, 0xba, 0x46, 0x02, 0x18, 0x01, 0x4a, 0x04, 0x08, 0x24, 0x10, 0x25, 0x52, 0x0c, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x26, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x22, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x53, 0x65, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12,
	0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x16, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x22, 0xb7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6b, 0x65, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x75, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x75, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x65,
	0x70, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x22, 0x49, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x62, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6d, 0x75, 0x73, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a,
	0x12, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x29, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x22, 0x48, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x42, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x33,
	0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x67,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61,
	0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22,
	0x46, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x61, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0x54, 0x0a, 0x0b, 0x4c, 0x6f, 0x6b, 0x69, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x2a, 0x0a, 0x0e,
	0x4c, 0x6f, 0x6b, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x17,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52,
	0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x16, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x68, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x16, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x12, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x52, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x68, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x17,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x15, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x5d, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x61, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x18, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xef, 0x01,
	0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x75, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x53, 0x0a,
	0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x66, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x2a, 0xc1, 0x01, 0x0a,
	0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x42, 0x5f, 0x4b, 0x49,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x4f, 0x42, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x4f, 0x42,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x4a, 0x4f, 0x42, 0x5f, 0x55, 0x4e, 0x52, 0x55, 0x4e, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09,
	0x2a, 0x5c, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x59,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x44, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x44, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x44,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc9, 0x01, 0x0a, 0x0d, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x49, 0x50, 0x45, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x2a, 0x36, 0x0a, 0x12, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x57, 0x0a,
	0x0b, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x45, 0x10, 0x03, 0x32, 0xe3, 0x17, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x3a,
	0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x4a, 0x6f, 0x62, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61,
	0x74, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x72,
	0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x49, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x1e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x53,
	0x74, 0x6f, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x43, 0x72,
	0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x43,
	0x72, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x45,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x52, 0x75,
	0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x70, 0x73, 0x5f,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x75,
	0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x4c, 0x6f, 0x6b, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x6b, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x09, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x6b, 0x69, 0x12, 0x13, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e,
	0x4c, 0x6f, 0x6b, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x6b, 0x69, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70,
	0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x70,
	0x73, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x70, 0x73,
	0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x70, 0x73, 0x5f, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76, 0x32,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x70, 0x73, 0x5f, 0x76,
	0x32, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79,
	0x64, 0x65, 0x72, 0x6d, 0x2f, 0x70, 0x61, 0x63, 0x68, 0x79, 0x64, 0x65, 0x72, 0x6d, 0x2f, 0x76,
	0x32, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x70, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pps_pps_proto_rawDescOnce sync.Once
	file_pps_pps_proto_rawDescData = file_pps_pps_proto_rawDesc
)

func file_pps_pps_proto_rawDescGZIP() []byte {
	file_pps_pps_proto_rawDescOnce.Do(func() {
		file_pps_pps_proto_rawDescData = protoimpl.X.CompressGZIP(file_pps_pps_proto_rawDescData)
	})
	return file_pps_pps_proto_rawDescData
}

var file_pps_pps_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pps_pps_proto_msgTypes = make([]protoimpl.MessageInfo, 105)
var file_pps_pps_proto_goTypes = []interface{}{
	(JobState)(0),                       // 0: pps_v2.JobState
	(DatumState)(0),                     // 1: pps_v2.DatumState
	(WorkerState)(0),                    // 2: pps_v2.WorkerState
	(PipelineState)(0),                  // 3: pps_v2.PipelineState
	(TolerationOperator)(0),             // 4: pps_v2.TolerationOperator
	(TaintEffect)(0),                    // 5: pps_v2.TaintEffect
	(PipelineInfo_PipelineType)(0),      // 6: pps_v2.PipelineInfo.PipelineType
	(PipelinePage_Ordering)(0),          // 7: pps_v2.PipelinePage.Ordering
	(*SecretMount)(nil),                 // 8: pps_v2.SecretMount
	(*Transform)(nil),                   // 9: pps_v2.Transform
	(*TFJob)(nil),                       // 10: pps_v2.TFJob
	(*Egress)(nil),                      // 11: pps_v2.Egress
	(*Determined)(nil),                  // 12: pps_v2.Determined
	(*Job)(nil),                         // 13: pps_v2.Job
	(*Metadata)(nil),                    // 14: pps_v2.Metadata
	(*Service)(nil),                     // 15: pps_v2.Service
	(*Spout)(nil),                       // 16: pps_v2.Spout
	(*PFSInput)(nil),                    // 17: pps_v2.PFSInput
	(*CronInput)(nil),                   // 18: pps_v2.CronInput
	(*Input)(nil),                       // 19: pps_v2.Input
	(*JobInput)(nil),                    // 20: pps_v2.JobInput
	(*ParallelismSpec)(nil),             // 21: pps_v2.ParallelismSpec
	(*InputFile)(nil),                   // 22: pps_v2.InputFile
	(*Datum)(nil),                       // 23: pps_v2.Datum
	(*DatumInfo)(nil),                   // 24: pps_v2.DatumInfo
	(*Aggregate)(nil),                   // 25: pps_v2.Aggregate
	(*ProcessStats)(nil),                // 26: pps_v2.ProcessStats
	(*AggregateProcessStats)(nil),       // 27: pps_v2.AggregateProcessStats
	(*WorkerStatus)(nil),                // 28: pps_v2.WorkerStatus
	(*DatumStatus)(nil),                 // 29: pps_v2.DatumStatus
	(*ResourceSpec)(nil),                // 30: pps_v2.ResourceSpec
	(*GPUSpec)(nil),                     // 31: pps_v2.GPUSpec
	(*JobSetInfo)(nil),                  // 32: pps_v2.JobSetInfo
	(*JobInfo)(nil),                     // 33: pps_v2.JobInfo
	(*Worker)(nil),                      // 34: pps_v2.Worker
	(*Pipeline)(nil),                    // 35: pps_v2.Pipeline
	(*Toleration)(nil),                  // 36: pps_v2.Toleration
	(*PipelineInfo)(nil),                // 37: pps_v2.PipelineInfo
	(*PipelineInfos)(nil),               // 38: pps_v2.PipelineInfos
	(*JobSet)(nil),                      // 39: pps_v2.JobSet
	(*InspectJobSetRequest)(nil),        // 40: pps_v2.InspectJobSetRequest
	(*ListJobSetRequest)(nil),           // 41: pps_v2.ListJobSetRequest
	(*InspectJobRequest)(nil),           // 42: pps_v2.InspectJobRequest
	(*ListJobRequest)(nil),              // 43: pps_v2.ListJobRequest
	(*SubscribeJobRequest)(nil),         // 44: pps_v2.SubscribeJobRequest
	(*DeleteJobRequest)(nil),            // 45: pps_v2.DeleteJobRequest
	(*StopJobRequest)(nil),              // 46: pps_v2.StopJobRequest
	(*UpdateJobStateRequest)(nil),       // 47: pps_v2.UpdateJobStateRequest
	(*GetLogsRequest)(nil),              // 48: pps_v2.GetLogsRequest
	(*LogMessage)(nil),                  // 49: pps_v2.LogMessage
	(*RestartDatumRequest)(nil),         // 50: pps_v2.RestartDatumRequest
	(*InspectDatumRequest)(nil),         // 51: pps_v2.InspectDatumRequest
	(*ListDatumRequest)(nil),            // 52: pps_v2.ListDatumRequest
	(*StartCreateDatumRequest)(nil),     // 53: pps_v2.StartCreateDatumRequest
	(*ContinueCreateDatumRequest)(nil),  // 54: pps_v2.ContinueCreateDatumRequest
	(*CreateDatumRequest)(nil),          // 55: pps_v2.CreateDatumRequest
	(*DatumSetSpec)(nil),                // 56: pps_v2.DatumSetSpec
	(*SchedulingSpec)(nil),              // 57: pps_v2.SchedulingSpec
	(*RerunPipelineRequest)(nil),        // 58: pps_v2.RerunPipelineRequest
	(*CreatePipelineRequest)(nil),       // 59: pps_v2.CreatePipelineRequest
	(*CreatePipelineV2Request)(nil),     // 60: pps_v2.CreatePipelineV2Request
	(*CreatePipelineV2Response)(nil),    // 61: pps_v2.CreatePipelineV2Response
	(*InspectPipelineRequest)(nil),      // 62: pps_v2.InspectPipelineRequest
	(*ListPipelineRequest)(nil),         // 63: pps_v2.ListPipelineRequest
	(*PipelinePage)(nil),                // 64: pps_v2.PipelinePage
	(*DeletePipelineRequest)(nil),       // 65: pps_v2.DeletePipelineRequest
	(*DeletePipelinesRequest)(nil),      // 66: pps_v2.DeletePipelinesRequest
	(*DeletePipelinesResponse)(nil),     // 67: pps_v2.DeletePipelinesResponse
	(*StartPipelineRequest)(nil),        // 68: pps_v2.StartPipelineRequest
	(*StopPipelineRequest)(nil),         // 69: pps_v2.StopPipelineRequest
	(*RunPipelineRequest)(nil),          // 70: pps_v2.RunPipelineRequest
	(*RunCronRequest)(nil),              // 71: pps_v2.RunCronRequest
	(*CheckStatusRequest)(nil),          // 72: pps_v2.CheckStatusRequest
	(*CheckStatusResponse)(nil),         // 73: pps_v2.CheckStatusResponse
	(*CreateSecretRequest)(nil),         // 74: pps_v2.CreateSecretRequest
	(*DeleteSecretRequest)(nil),         // 75: pps_v2.DeleteSecretRequest
	(*InspectSecretRequest)(nil),        // 76: pps_v2.InspectSecretRequest
	(*Secret)(nil),                      // 77: pps_v2.Secret
	(*SecretInfo)(nil),                  // 78: pps_v2.SecretInfo
	(*SecretInfos)(nil),                 // 79: pps_v2.SecretInfos
	(*ActivateAuthRequest)(nil),         // 80: pps_v2.ActivateAuthRequest
	(*ActivateAuthResponse)(nil),        // 81: pps_v2.ActivateAuthResponse
	(*RunLoadTestRequest)(nil),          // 82: pps_v2.RunLoadTestRequest
	(*RunLoadTestResponse)(nil),         // 83: pps_v2.RunLoadTestResponse
	(*RenderTemplateRequest)(nil),       // 84: pps_v2.RenderTemplateRequest
	(*RenderTemplateResponse)(nil),      // 85: pps_v2.RenderTemplateResponse
	(*LokiRequest)(nil),                 // 86: pps_v2.LokiRequest
	(*LokiLogMessage)(nil),              // 87: pps_v2.LokiLogMessage
	(*ClusterDefaults)(nil),             // 88: pps_v2.ClusterDefaults
	(*GetClusterDefaultsRequest)(nil),   // 89: pps_v2.GetClusterDefaultsRequest
	(*GetClusterDefaultsResponse)(nil),  // 90: pps_v2.GetClusterDefaultsResponse
	(*SetClusterDefaultsRequest)(nil),   // 91: pps_v2.SetClusterDefaultsRequest
	(*SetClusterDefaultsResponse)(nil),  // 92: pps_v2.SetClusterDefaultsResponse
	(*CreatePipelineTransaction)(nil),   // 93: pps_v2.CreatePipelineTransaction
	(*ProjectDefaults)(nil),             // 94: pps_v2.ProjectDefaults
	(*GetProjectDefaultsRequest)(nil),   // 95: pps_v2.GetProjectDefaultsRequest
	(*GetProjectDefaultsResponse)(nil),  // 96: pps_v2.GetProjectDefaultsResponse
	(*SetProjectDefaultsRequest)(nil),   // 97: pps_v2.SetProjectDefaultsRequest
	(*SetProjectDefaultsResponse)(nil),  // 98: pps_v2.SetProjectDefaultsResponse
	(*PipelinesSummaryRequest)(nil),     // 99: pps_v2.PipelinesSummaryRequest
	(*PipelinesSummaryResponse)(nil),    // 100: pps_v2.PipelinesSummaryResponse
	(*PipelinesSummary)(nil),            // 101: pps_v2.PipelinesSummary
	(*PipelinePicker)(nil),              // 102: pps_v2.PipelinePicker
	nil,                                 // 103: pps_v2.Transform.EnvEntry
	nil,                                 // 104: pps_v2.Metadata.AnnotationsEntry
	nil,                                 // 105: pps_v2.Metadata.LabelsEntry
	(*JobInfo_Details)(nil),             // 106: pps_v2.JobInfo.Details
	(*PipelineInfo_Details)(nil),        // 107: pps_v2.PipelineInfo.Details
	nil,                                 // 108: pps_v2.PipelineInfo.MetadataEntry
	(*ListDatumRequest_Filter)(nil),     // 109: pps_v2.ListDatumRequest.Filter
	nil,                                 // 110: pps_v2.SchedulingSpec.NodeSelectorEntry
	nil,                                 // 111: pps_v2.RenderTemplateRequest.ArgsEntry
	(*PipelinePicker_PipelineName)(nil), // 112: pps_v2.PipelinePicker.PipelineName
	(*pfs.ObjectStorageEgress)(nil),     // 113: pfs_v2.ObjectStorageEgress
	(*pfs.SQLDatabaseEgress)(nil),       // 114: pfs_v2.SQLDatabaseEgress
	(*pfs.Trigger)(nil),                 // 115: pfs_v2.Trigger
	(*timestamppb.Timestamp)(nil),       // 116: google.protobuf.Timestamp
	(*pfs.Commit)(nil),                  // 117: pfs_v2.Commit
	(*pfs.File)(nil),                    // 118: pfs_v2.File
	(*pfs.FileInfo)(nil),                // 119: pfs_v2.FileInfo
	(*durationpb.Duration)(nil),         // 120: google.protobuf.Duration
	(*pfs.Project)(nil),                 // 121: pfs_v2.Project
	(*wrapperspb.Int64Value)(nil),       // 122: google.protobuf.Int64Value
	(*pfs.CommitSet)(nil),               // 123: pfs_v2.CommitSet
	(*pfs.ProjectPicker)(nil),           // 124: pfs_v2.ProjectPicker
	(*emptypb.Empty)(nil),               // 125: google.protobuf.Empty
	(*task.ListTaskRequest)(nil),        // 126: taskapi.ListTaskRequest
	(*task.TaskInfo)(nil),               // 127: taskapi.TaskInfo
}
var file_pps_pps_proto_depIdxs = []int32{
	103, // 0: pps_v2.Transform.env:type_name -> pps_v2.Transform.EnvEntry
	8,   // 1: pps_v2.Transform.secrets:type_name -> pps_v2.SecretMount
	113, // 2: pps_v2.Egress.object_storage:type_name -> pfs_v2.ObjectStorageEgress
	114, // 3: pps_v2.Egress.sql_database:type_name -> pfs_v2.SQLDatabaseEgress
	35,  // 4: pps_v2.Job.pipeline:type_name -> pps_v2.Pipeline
	104, // 5: pps_v2.Metadata.annotations:type_name -> pps_v2.Metadata.AnnotationsEntry
	105, // 6: pps_v2.Metadata.labels:type_name -> pps_v2.Metadata.LabelsEntry
	15,  // 7: pps_v2.Spout.service:type_name -> pps_v2.Service
	115, // 8: pps_v2.PFSInput.trigger:type_name -> pfs_v2.Trigger
	116, // 9: pps_v2.CronInput.start:type_name -> google.protobuf.Timestamp
	17,  // 10: pps_v2.Input.pfs:type_name -> pps_v2.PFSInput
	19,  // 11: pps_v2.Input.join:type_name -> pps_v2.Input
	19,  // 12: pps_v2.Input.group:type_name -> pps_v2.Input
	19,  // 13: pps_v2.Input.cross:type_name -> pps_v2.Input
	19,  // 14: pps_v2.Input.union:type_name -> pps_v2.Input
	18,  // 15: pps_v2.Input.cron:type_name -> pps_v2.CronInput
	117, // 16: pps_v2.JobInput.commit:type_name -> pfs_v2.Commit
	13,  // 17: pps_v2.Datum.job:type_name -> pps_v2.Job
	23,  // 18: pps_v2.DatumInfo.datum:type_name -> pps_v2.Datum
	1,   // 19: pps_v2.DatumInfo.state:type_name -> pps_v2.DatumState
	26,  // 20: pps_v2.DatumInfo.stats:type_name -> pps_v2.ProcessStats
	118, // 21: pps_v2.DatumInfo.pfs_state:type_name -> pfs_v2.File
	119, // 22: pps_v2.DatumInfo.data:type_name -> pfs_v2.FileInfo
	120, // 23: pps_v2.ProcessStats.download_time:type_name -> google.protobuf.Duration
	120, // 24: pps_v2.ProcessStats.process_time:type_name -> google.protobuf.Duration
	120, // 25: pps_v2.ProcessStats.upload_time:type_name -> google.protobuf.Duration
	25,  // 26: pps_v2.AggregateProcessStats.download_time:type_name -> pps_v2.Aggregate
	25,  // 27: pps_v2.AggregateProcessStats.process_time:type_name -> pps_v2.Aggregate
	25,  // 28: pps_v2.AggregateProcessStats.upload_time:type_name -> pps_v2.Aggregate
	25,  // 29: pps_v2.AggregateProcessStats.download_bytes:type_name -> pps_v2.Aggregate
	25,  // 30: pps_v2.AggregateProcessStats.upload_bytes:type_name -> pps_v2.Aggregate
	29,  // 31: pps_v2.WorkerStatus.datum_status:type_name -> pps_v2.DatumStatus
	116, // 32: pps_v2.DatumStatus.started:type_name -> google.protobuf.Timestamp
	22,  // 33: pps_v2.DatumStatus.data:type_name -> pps_v2.InputFile
	31,  // 34: pps_v2.ResourceSpec.gpu:type_name -> pps_v2.GPUSpec
	39,  // 35: pps_v2.JobSetInfo.job_set:type_name -> pps_v2.JobSet
	33,  // 36: pps_v2.JobSetInfo.jobs:type_name -> pps_v2.JobInfo
	13,  // 37: pps_v2.JobInfo.job:type_name -> pps_v2.Job
	117, // 38: pps_v2.JobInfo.output_commit:type_name -> pfs_v2.Commit
	26,  // 39: pps_v2.JobInfo.stats:type_name -> pps_v2.ProcessStats
	0,   // 40: pps_v2.JobInfo.state:type_name -> pps_v2.JobState
	116, // 41: pps_v2.JobInfo.created:type_name -> google.protobuf.Timestamp
	116, // 42: pps_v2.JobInfo.started:type_name -> google.protobuf.Timestamp
	116, // 43: pps_v2.JobInfo.finished:type_name -> google.protobuf.Timestamp
	106, // 44: pps_v2.JobInfo.details:type_name -> pps_v2.JobInfo.Details
	2,   // 45: pps_v2.Worker.state:type_name -> pps_v2.WorkerState
	121, // 46: pps_v2.Pipeline.project:type_name -> pfs_v2.Project
	4,   // 47: pps_v2.Toleration.operator:type_name -> pps_v2.TolerationOperator
	5,   // 48: pps_v2.Toleration.effect:type_name -> pps_v2.TaintEffect
	122, // 49: pps_v2.Toleration.toleration_seconds:type_name -> google.protobuf.Int64Value
	35,  // 50: pps_v2.PipelineInfo.pipeline:type_name -> pps_v2.Pipeline
	117, // 51: pps_v2.PipelineInfo.spec_commit:type_name -> pfs_v2.Commit
	3,   // 52: pps_v2.PipelineInfo.state:type_name -> pps_v2.PipelineState
	0,   // 53: pps_v2.PipelineInfo.last_job_state:type_name -> pps_v2.JobState
	6,   // 54: pps_v2.PipelineInfo.type:type_name -> pps_v2.PipelineInfo.PipelineType
	107, // 55: pps_v2.PipelineInfo.details:type_name -> pps_v2.PipelineInfo.Details
	108, // 56: pps_v2.PipelineInfo.metadata:type_name -> pps_v2.PipelineInfo.MetadataEntry
	37,  // 57: pps_v2.PipelineInfos.pipeline_info:type_name -> pps_v2.PipelineInfo
	39,  // 58: pps_v2.InspectJobSetRequest.job_set:type_name -> pps_v2.JobSet
	121, // 59: pps_v2.ListJobSetRequest.projects:type_name -> pfs_v2.Project
	116, // 60: pps_v2.ListJobSetRequest.paginationMarker:type_name -> google.protobuf.Timestamp
	13,  // 61: pps_v2.InspectJobRequest.job:type_name -> pps_v2.Job
	121, // 62: pps_v2.ListJobRequest.projects:type_name -> pfs_v2.Project
	35,  // 63: pps_v2.ListJobRequest.pipeline:type_name -> pps_v2.Pipeline
	117, // 64: pps_v2.ListJobRequest.input_commit:type_name -> pfs_v2.Commit
	116, // 65: pps_v2.ListJobRequest.paginationMarker:type_name -> google.protobuf.Timestamp
	35,  // 66: pps_v2.SubscribeJobRequest.pipeline:type_name -> pps_v2.Pipeline
	13,  // 67: pps_v2.DeleteJobRequest.job:type_name -> pps_v2.Job
	13,  // 68: pps_v2.StopJobRequest.job:type_name -> pps_v2.Job
	13,  // 69: pps_v2.UpdateJobStateRequest.job:type_name -> pps_v2.Job
	0,   // 70: pps_v2.UpdateJobStateRequest.state:type_name -> pps_v2.JobState
	26,  // 71: pps_v2.UpdateJobStateRequest.stats:type_name -> pps_v2.ProcessStats
	35,  // 72: pps_v2.GetLogsRequest.pipeline:type_name -> pps_v2.Pipeline
	13,  // 73: pps_v2.GetLogsRequest.job:type_name -> pps_v2.Job
	23,  // 74: pps_v2.GetLogsRequest.datum:type_name -> pps_v2.Datum
	120, // 75: pps_v2.GetLogsRequest.since:type_name -> google.protobuf.Duration
	22,  // 76: pps_v2.LogMessage.data:type_name -> pps_v2.InputFile
	116, // 77: pps_v2.LogMessage.ts:type_name -> google.protobuf.Timestamp
	13,  // 78: pps_v2.RestartDatumRequest.job:type_name -> pps_v2.Job
	23,  // 79: pps_v2.InspectDatumRequest.datum:type_name -> pps_v2.Datum
	13,  // 80: pps_v2.ListDatumRequest.job:type_name -> pps_v2.Job
	19,  // 81: pps_v2.ListDatumRequest.input:type_name -> pps_v2.Input
	109, // 82: pps_v2.ListDatumRequest.filter:type_name -> pps_v2.ListDatumRequest.Filter
	19,  // 83: pps_v2.StartCreateDatumRequest.input:type_name -> pps_v2.Input
	53,  // 84: pps_v2.CreateDatumRequest.start:type_name -> pps_v2.StartCreateDatumRequest
	54,  // 85: pps_v2.CreateDatumRequest.continue:type_name -> pps_v2.ContinueCreateDatumRequest
	110, // 86: pps_v2.SchedulingSpec.node_selector:type_name -> pps_v2.SchedulingSpec.NodeSelectorEntry
	35,  // 87: pps_v2.RerunPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	35,  // 88: pps_v2.CreatePipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	10,  // 89: pps_v2.CreatePipelineRequest.tf_job:type_name -> pps_v2.TFJob
	9,   // 90: pps_v2.CreatePipelineRequest.transform:type_name -> pps_v2.Transform
	21,  // 91: pps_v2.CreatePipelineRequest.parallelism_spec:type_name -> pps_v2.ParallelismSpec
	11,  // 92: pps_v2.CreatePipelineRequest.egress:type_name -> pps_v2.Egress
	30,  // 93: pps_v2.CreatePipelineRequest.resource_requests:type_name -> pps_v2.ResourceSpec
	30,  // 94: pps_v2.CreatePipelineRequest.resource_limits:type_name -> pps_v2.ResourceSpec
	30,  // 95: pps_v2.CreatePipelineRequest.sidecar_resource_limits:type_name -> pps_v2.ResourceSpec
	19,  // 96: pps_v2.CreatePipelineRequest.input:type_name -> pps_v2.Input
	15,  // 97: pps_v2.CreatePipelineRequest.service:type_name -> pps_v2.Service
	16,  // 98: pps_v2.CreatePipelineRequest.spout:type_name -> pps_v2.Spout
	56,  // 99: pps_v2.CreatePipelineRequest.datum_set_spec:type_name -> pps_v2.DatumSetSpec
	120, // 100: pps_v2.CreatePipelineRequest.datum_timeout:type_name -> google.protobuf.Duration
	120, // 101: pps_v2.CreatePipelineRequest.job_timeout:type_name -> google.protobuf.Duration
	57,  // 102: pps_v2.CreatePipelineRequest.scheduling_spec:type_name -> pps_v2.SchedulingSpec
	117, // 103: pps_v2.CreatePipelineRequest.spec_commit:type_name -> pfs_v2.Commit
	14,  // 104: pps_v2.CreatePipelineRequest.metadata:type_name -> pps_v2.Metadata
	36,  // 105: pps_v2.CreatePipelineRequest.tolerations:type_name -> pps_v2.Toleration
	30,  // 106: pps_v2.CreatePipelineRequest.sidecar_resource_requests:type_name -> pps_v2.ResourceSpec
	12,  // 107: pps_v2.CreatePipelineRequest.determined:type_name -> pps_v2.Determined
	120, // 108: pps_v2.CreatePipelineRequest.maximum_expected_uptime:type_name -> google.protobuf.Duration
	35,  // 109: pps_v2.InspectPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	35,  // 110: pps_v2.ListPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	123, // 111: pps_v2.ListPipelineRequest.commit_set:type_name -> pfs_v2.CommitSet
	121, // 112: pps_v2.ListPipelineRequest.projects:type_name -> pfs_v2.Project
	64,  // 113: pps_v2.ListPipelineRequest.page:type_name -> pps_v2.PipelinePage
	7,   // 114: pps_v2.PipelinePage.order:type_name -> pps_v2.PipelinePage.Ordering
	35,  // 115: pps_v2.DeletePipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	121, // 116: pps_v2.DeletePipelinesRequest.projects:type_name -> pfs_v2.Project
	35,  // 117: pps_v2.DeletePipelinesResponse.pipelines:type_name -> pps_v2.Pipeline
	35,  // 118: pps_v2.StartPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	35,  // 119: pps_v2.StopPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	35,  // 120: pps_v2.RunPipelineRequest.pipeline:type_name -> pps_v2.Pipeline
	117, // 121: pps_v2.RunPipelineRequest.provenance:type_name -> pfs_v2.Commit
	35,  // 122: pps_v2.RunCronRequest.pipeline:type_name -> pps_v2.Pipeline
	121, // 123: pps_v2.CheckStatusRequest.project:type_name -> pfs_v2.Project
	121, // 124: pps_v2.CheckStatusResponse.project:type_name -> pfs_v2.Project
	35,  // 125: pps_v2.CheckStatusResponse.pipeline:type_name -> pps_v2.Pipeline
	77,  // 126: pps_v2.DeleteSecretRequest.secret:type_name -> pps_v2.Secret
	77,  // 127: pps_v2.InspectSecretRequest.secret:type_name -> pps_v2.Secret
	77,  // 128: pps_v2.SecretInfo.secret:type_name -> pps_v2.Secret
	116, // 129: pps_v2.SecretInfo.creation_timestamp:type_name -> google.protobuf.Timestamp
	78,  // 130: pps_v2.SecretInfos.secret_info:type_name -> pps_v2.SecretInfo
	111, // 131: pps_v2.RenderTemplateRequest.args:type_name -> pps_v2.RenderTemplateRequest.ArgsEntry
	59,  // 132: pps_v2.RenderTemplateResponse.specs:type_name -> pps_v2.CreatePipelineRequest
	120, // 133: pps_v2.LokiRequest.since:type_name -> google.protobuf.Duration
	59,  // 134: pps_v2.ClusterDefaults.create_pipeline_request:type_name -> pps_v2.CreatePipelineRequest
	35,  // 135: pps_v2.SetClusterDefaultsResponse.affected_pipelines:type_name -> pps_v2.Pipeline
	59,  // 136: pps_v2.CreatePipelineTransaction.create_pipeline_request:type_name -> pps_v2.CreatePipelineRequest
	59,  // 137: pps_v2.ProjectDefaults.create_pipeline_request:type_name -> pps_v2.CreatePipelineRequest
	121, // 138: pps_v2.GetProjectDefaultsRequest.project:type_name -> pfs_v2.Project
	116, // 139: pps_v2.GetProjectDefaultsResponse.created_at:type_name -> google.protobuf.Timestamp
	121, // 140: pps_v2.SetProjectDefaultsRequest.project:type_name -> pfs_v2.Project
	35,  // 141: pps_v2.SetProjectDefaultsResponse.affected_pipelines:type_name -> pps_v2.Pipeline
	124, // 142: pps_v2.PipelinesSummaryRequest.projects:type_name -> pfs_v2.ProjectPicker
	101, // 143: pps_v2.PipelinesSummaryResponse.summaries:type_name -> pps_v2.PipelinesSummary
	121, // 144: pps_v2.PipelinesSummary.project:type_name -> pfs_v2.Project
	112, // 145: pps_v2.PipelinePicker.name:type_name -> pps_v2.PipelinePicker.PipelineName
	9,   // 146: pps_v2.JobInfo.Details.transform:type_name -> pps_v2.Transform
	21,  // 147: pps_v2.JobInfo.Details.parallelism_spec:type_name -> pps_v2.ParallelismSpec
	11,  // 148: pps_v2.JobInfo.Details.egress:type_name -> pps_v2.Egress
	15,  // 149: pps_v2.JobInfo.Details.service:type_name -> pps_v2.Service
	16,  // 150: pps_v2.JobInfo.Details.spout:type_name -> pps_v2.Spout
	28,  // 151: pps_v2.JobInfo.Details.worker_status:type_name -> pps_v2.WorkerStatus
	30,  // 152: pps_v2.JobInfo.Details.resource_requests:type_name -> pps_v2.ResourceSpec
	30,  // 153: pps_v2.JobInfo.Details.resource_limits:type_name -> pps_v2.ResourceSpec
	30,  // 154: pps_v2.JobInfo.Details.sidecar_resource_limits:type_name -> pps_v2.ResourceSpec
	19,  // 155: pps_v2.JobInfo.Details.input:type_name -> pps_v2.Input
	56,  // 156: pps_v2.JobInfo.Details.datum_set_spec:type_name -> pps_v2.DatumSetSpec
	120, // 157: pps_v2.JobInfo.Details.datum_timeout:type_name -> google.protobuf.Duration
	120, // 158: pps_v2.JobInfo.Details.job_timeout:type_name -> google.protobuf.Duration
	57,  // 159: pps_v2.JobInfo.Details.scheduling_spec:type_name -> pps_v2.SchedulingSpec
	30,  // 160: pps_v2.JobInfo.Details.sidecar_resource_requests:type_name -> pps_v2.ResourceSpec
	9,   // 161: pps_v2.PipelineInfo.Details.transform:type_name -> pps_v2.Transform
	10,  // 162: pps_v2.PipelineInfo.Details.tf_job:type_name -> pps_v2.TFJob
	21,  // 163: pps_v2.PipelineInfo.Details.parallelism_spec:type_name -> pps_v2.ParallelismSpec
	11,  // 164: pps_v2.PipelineInfo.Details.egress:type_name -> pps_v2.Egress
	116, // 165: pps_v2.PipelineInfo.Details.created_at:type_name -> google.protobuf.Timestamp
	116, // 166: pps_v2.PipelineInfo.Details.updated_at:type_name -> google.protobuf.Timestamp
	30,  // 167: pps_v2.PipelineInfo.Details.resource_requests:type_name -> pps_v2.ResourceSpec
	30,  // 168: pps_v2.PipelineInfo.Details.resource_limits:type_name -> pps_v2.ResourceSpec
	30,  // 169: pps_v2.PipelineInfo.Details.sidecar_resource_limits:type_name -> pps_v2.ResourceSpec
	19,  // 170: pps_v2.PipelineInfo.Details.input:type_name -> pps_v2.Input
	15,  // 171: pps_v2.PipelineInfo.Details.service:type_name -> pps_v2.Service
	16,  // 172: pps_v2.PipelineInfo.Details.spout:type_name -> pps_v2.Spout
	56,  // 173: pps_v2.PipelineInfo.Details.datum_set_spec:type_name -> pps_v2.DatumSetSpec
	120, // 174: pps_v2.PipelineInfo.Details.datum_timeout:type_name -> google.protobuf.Duration
	120, // 175: pps_v2.PipelineInfo.Details.job_timeout:type_name -> google.protobuf.Duration
	57,  // 176: pps_v2.PipelineInfo.Details.scheduling_spec:type_name -> pps_v2.SchedulingSpec
	14,  // 177: pps_v2.PipelineInfo.Details.metadata:type_name -> pps_v2.Metadata
	36,  // 178: pps_v2.PipelineInfo.Details.tolerations:type_name -> pps_v2.Toleration
	30,  // 179: pps_v2.PipelineInfo.Details.sidecar_resource_requests:type_name -> pps_v2.ResourceSpec
	12,  // 180: pps_v2.PipelineInfo.Details.determined:type_name -> pps_v2.Determined
	120, // 181: pps_v2.PipelineInfo.Details.maximum_expected_uptime:type_name -> google.protobuf.Duration
	116, // 182: pps_v2.PipelineInfo.Details.workers_started_at:type_name -> google.protobuf.Timestamp
	1,   // 183: pps_v2.ListDatumRequest.Filter.state:type_name -> pps_v2.DatumState
	124, // 184: pps_v2.PipelinePicker.PipelineName.project:type_name -> pfs_v2.ProjectPicker
	42,  // 185: pps_v2.API.InspectJob:input_type -> pps_v2.InspectJobRequest
	40,  // 186: pps_v2.API.InspectJobSet:input_type -> pps_v2.InspectJobSetRequest
	43,  // 187: pps_v2.API.ListJob:input_type -> pps_v2.ListJobRequest
	41,  // 188: pps_v2.API.ListJobSet:input_type -> pps_v2.ListJobSetRequest
	44,  // 189: pps_v2.API.SubscribeJob:input_type -> pps_v2.SubscribeJobRequest
	45,  // 190: pps_v2.API.DeleteJob:input_type -> pps_v2.DeleteJobRequest
	46,  // 191: pps_v2.API.StopJob:input_type -> pps_v2.StopJobRequest
	51,  // 192: pps_v2.API.InspectDatum:input_type -> pps_v2.InspectDatumRequest
	52,  // 193: pps_v2.API.ListDatum:input_type -> pps_v2.ListDatumRequest
	55,  // 194: pps_v2.API.CreateDatum:input_type -> pps_v2.CreateDatumRequest
	50,  // 195: pps_v2.API.RestartDatum:input_type -> pps_v2.RestartDatumRequest
	58,  // 196: pps_v2.API.RerunPipeline:input_type -> pps_v2.RerunPipelineRequest
	59,  // 197: pps_v2.API.CreatePipeline:input_type -> pps_v2.CreatePipelineRequest
	60,  // 198: pps_v2.API.CreatePipelineV2:input_type -> pps_v2.CreatePipelineV2Request
	62,  // 199: pps_v2.API.InspectPipeline:input_type -> pps_v2.InspectPipelineRequest
	63,  // 200: pps_v2.API.ListPipeline:input_type -> pps_v2.ListPipelineRequest
	65,  // 201: pps_v2.API.DeletePipeline:input_type -> pps_v2.DeletePipelineRequest
	66,  // 202: pps_v2.API.DeletePipelines:input_type -> pps_v2.DeletePipelinesRequest
	68,  // 203: pps_v2.API.StartPipeline:input_type -> pps_v2.StartPipelineRequest
	69,  // 204: pps_v2.API.StopPipeline:input_type -> pps_v2.StopPipelineRequest
	70,  // 205: pps_v2.API.RunPipeline:input_type -> pps_v2.RunPipelineRequest
	71,  // 206: pps_v2.API.RunCron:input_type -> pps_v2.RunCronRequest
	72,  // 207: pps_v2.API.CheckStatus:input_type -> pps_v2.CheckStatusRequest
	74,  // 208: pps_v2.API.CreateSecret:input_type -> pps_v2.CreateSecretRequest
	75,  // 209: pps_v2.API.DeleteSecret:input_type -> pps_v2.DeleteSecretRequest
	125, // 210: pps_v2.API.ListSecret:input_type -> google.protobuf.Empty
	76,  // 211: pps_v2.API.InspectSecret:input_type -> pps_v2.InspectSecretRequest
	125, // 212: pps_v2.API.DeleteAll:input_type -> google.protobuf.Empty
	48,  // 213: pps_v2.API.GetLogs:input_type -> pps_v2.GetLogsRequest
	80,  // 214: pps_v2.API.ActivateAuth:input_type -> pps_v2.ActivateAuthRequest
	47,  // 215: pps_v2.API.UpdateJobState:input_type -> pps_v2.UpdateJobStateRequest
	82,  // 216: pps_v2.API.RunLoadTest:input_type -> pps_v2.RunLoadTestRequest
	125, // 217: pps_v2.API.RunLoadTestDefault:input_type -> google.protobuf.Empty
	84,  // 218: pps_v2.API.RenderTemplate:input_type -> pps_v2.RenderTemplateRequest
	126, // 219: pps_v2.API.ListTask:input_type -> taskapi.ListTaskRequest
	86,  // 220: pps_v2.API.GetKubeEvents:input_type -> pps_v2.LokiRequest
	86,  // 221: pps_v2.API.QueryLoki:input_type -> pps_v2.LokiRequest
	89,  // 222: pps_v2.API.GetClusterDefaults:input_type -> pps_v2.GetClusterDefaultsRequest
	91,  // 223: pps_v2.API.SetClusterDefaults:input_type -> pps_v2.SetClusterDefaultsRequest
	95,  // 224: pps_v2.API.GetProjectDefaults:input_type -> pps_v2.GetProjectDefaultsRequest
	97,  // 225: pps_v2.API.SetProjectDefaults:input_type -> pps_v2.SetProjectDefaultsRequest
	99,  // 226: pps_v2.API.PipelinesSummary:input_type -> pps_v2.PipelinesSummaryRequest
	33,  // 227: pps_v2.API.InspectJob:output_type -> pps_v2.JobInfo
	33,  // 228: pps_v2.API.InspectJobSet:output_type -> pps_v2.JobInfo
	33,  // 229: pps_v2.API.ListJob:output_type -> pps_v2.JobInfo
	32,  // 230: pps_v2.API.ListJobSet:output_type -> pps_v2.JobSetInfo
	33,  // 231: pps_v2.API.SubscribeJob:output_type -> pps_v2.JobInfo
	125, // 232: pps_v2.API.DeleteJob:output_type -> google.protobuf.Empty
	125, // 233: pps_v2.API.StopJob:output_type -> google.protobuf.Empty
	24,  // 234: pps_v2.API.InspectDatum:output_type -> pps_v2.DatumInfo
	24,  // 235: pps_v2.API.ListDatum:output_type -> pps_v2.DatumInfo
	24,  // 236: pps_v2.API.CreateDatum:output_type -> pps_v2.DatumInfo
	125, // 237: pps_v2.API.RestartDatum:output_type -> google.protobuf.Empty
	125, // 238: pps_v2.API.RerunPipeline:output_type -> google.protobuf.Empty
	125, // 239: pps_v2.API.CreatePipeline:output_type -> google.protobuf.Empty
	61,  // 240: pps_v2.API.CreatePipelineV2:output_type -> pps_v2.CreatePipelineV2Response
	37,  // 241: pps_v2.API.InspectPipeline:output_type -> pps_v2.PipelineInfo
	37,  // 242: pps_v2.API.ListPipeline:output_type -> pps_v2.PipelineInfo
	125, // 243: pps_v2.API.DeletePipeline:output_type -> google.protobuf.Empty
	67,  // 244: pps_v2.API.DeletePipelines:output_type -> pps_v2.DeletePipelinesResponse
	125, // 245: pps_v2.API.StartPipeline:output_type -> google.protobuf.Empty
	125, // 246: pps_v2.API.StopPipeline:output_type -> google.protobuf.Empty
	125, // 247: pps_v2.API.RunPipeline:output_type -> google.protobuf.Empty
	125, // 248: pps_v2.API.RunCron:output_type -> google.protobuf.Empty
	73,  // 249: pps_v2.API.CheckStatus:output_type -> pps_v2.CheckStatusResponse
	125, // 250: pps_v2.API.CreateSecret:output_type -> google.protobuf.Empty
	125, // 251: pps_v2.API.DeleteSecret:output_type -> google.protobuf.Empty
	79,  // 252: pps_v2.API.ListSecret:output_type -> pps_v2.SecretInfos
	78,  // 253: pps_v2.API.InspectSecret:output_type -> pps_v2.SecretInfo
	125, // 254: pps_v2.API.DeleteAll:output_type -> google.protobuf.Empty
	49,  // 255: pps_v2.API.GetLogs:output_type -> pps_v2.LogMessage
	81,  // 256: pps_v2.API.ActivateAuth:output_type -> pps_v2.ActivateAuthResponse
	125, // 257: pps_v2.API.UpdateJobState:output_type -> google.protobuf.Empty
	83,  // 258: pps_v2.API.RunLoadTest:output_type -> pps_v2.RunLoadTestResponse
	83,  // 259: pps_v2.API.RunLoadTestDefault:output_type -> pps_v2.RunLoadTestResponse
	85,  // 260: pps_v2.API.RenderTemplate:output_type -> pps_v2.RenderTemplateResponse
	127, // 261: pps_v2.API.ListTask:output_type -> taskapi.TaskInfo
	87,  // 262: pps_v2.API.GetKubeEvents:output_type -> pps_v2.LokiLogMessage
	87,  // 263: pps_v2.API.QueryLoki:output_type -> pps_v2.LokiLogMessage
	90,  // 264: pps_v2.API.GetClusterDefaults:output_type -> pps_v2.GetClusterDefaultsResponse
	92,  // 265: pps_v2.API.SetClusterDefaults:output_type -> pps_v2.SetClusterDefaultsResponse
	96,  // 266: pps_v2.API.GetProjectDefaults:output_type -> pps_v2.GetProjectDefaultsResponse
	98,  // 267: pps_v2.API.SetProjectDefaults:output_type -> pps_v2.SetProjectDefaultsResponse
	100, // 268: pps_v2.API.PipelinesSummary:output_type -> pps_v2.PipelinesSummaryResponse
	227, // [227:269] is the sub-list for method output_type
	185, // [185:227] is the sub-list for method input_type
	185, // [185:185] is the sub-list for extension type_name
	185, // [185:185] is the sub-list for extension extendee
	0,   // [0:185] is the sub-list for field type_name
}

func init() { file_pps_pps_proto_init() }
func file_pps_pps_proto_init() {
	if File_pps_pps_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pps_pps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Egress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Determined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PFSInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParallelismSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Datum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateProcessStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Toleration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectJobSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCreateDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueCreateDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDatumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumSetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulingSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCronRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunLoadTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LokiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LokiLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDefaultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterDefaultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClusterDefaultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetClusterDefaultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectDefaults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectDefaultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProjectDefaultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProjectDefaultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinesSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinesSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinesSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePicker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobInfo_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineInfo_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDatumRequest_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pps_pps_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelinePicker_PipelineName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pps_pps_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Egress_ObjectStorage)(nil),
		(*Egress_SqlDatabase)(nil),
	}
	file_pps_pps_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*CreateDatumRequest_Start)(nil),
		(*CreateDatumRequest_Continue)(nil),
	}
	file_pps_pps_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*CheckStatusRequest_All)(nil),
		(*CheckStatusRequest_Project)(nil),
	}
	file_pps_pps_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*PipelinePicker_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pps_pps_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   105,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pps_pps_proto_goTypes,
		DependencyIndexes: file_pps_pps_proto_depIdxs,
		EnumInfos:         file_pps_pps_proto_enumTypes,
		MessageInfos:      file_pps_pps_proto_msgTypes,
	}.Build()
	File_pps_pps_proto = out.File
	file_pps_pps_proto_rawDesc = nil
	file_pps_pps_proto_goTypes = nil
	file_pps_pps_proto_depIdxs = nil
}

syntax = "proto3";

package identity_v2;
option go_package = "github.com/pachyderm/pachyderm/v2/src/identity";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "gogoproto/gogo.proto";

import "protoextensions/log.proto";

// User represents an IDP user that has authenticated via OIDC
message User {
  string email = 1;
  google.protobuf.Timestamp last_authenticated = 2 [(gogoproto.moretags) = "db:\"last_authenticated\"", (gogoproto.stdtime) = true];
}

// IdentityServerConfig is the configuration for the identity web server.
// When the configuration is changed the web server is reloaded automatically.
message IdentityServerConfig {
  string issuer = 1;
  string id_token_expiry = 2 [(gogoproto.moretags) = "db:\"id_token_expiry\""];
  string rotation_token_expiry = 3 [(gogoproto.moretags) = "db:\"rotation_token_expiry\""];
}

message SetIdentityServerConfigRequest {
  IdentityServerConfig config = 1;
}

message SetIdentityServerConfigResponse {}


message GetIdentityServerConfigRequest {}

message GetIdentityServerConfigResponse {
  IdentityServerConfig config = 1;
}

// IDPConnector represents a connection to an identity provider
message IDPConnector {
  // ID is the unique identifier for this connector.
  string id = 1;

  // Name is the human-readable identifier for this connector,
  // which will be shown to end users when they're authenticating.
  string name = 2;

  // Type is the type of the IDP ex. `saml`, `oidc`, `github`.
  string type = 3;

  // ConfigVersion must be incremented every time a connector is
  // updated, to avoid concurrent updates conflicting.
  int64 configVersion = 4;

  // This is left for backwards compatibility, but we want users to use the config defined below.
  string jsonConfig = 5 [(log.mask) = true];

  // Config is the configuration for the upstream IDP, which varies based on the type.
  // We make the assumption that this is either yaml or JSON.
  google.protobuf.Struct config = 6 [(log.mask) = true];
}

message CreateIDPConnectorRequest {
  IDPConnector connector = 1;
}

message CreateIDPConnectorResponse {}

message UpdateIDPConnectorRequest {
  IDPConnector connector = 1;
}

message UpdateIDPConnectorResponse {}

message ListIDPConnectorsRequest {}

message ListIDPConnectorsResponse {
  repeated IDPConnector connectors = 1;
}

message GetIDPConnectorRequest {
  string id = 1;
}

message GetIDPConnectorResponse {
  IDPConnector connector = 1;
}

message DeleteIDPConnectorRequest {
  string id = 1;
}

message DeleteIDPConnectorResponse {}

message OIDCClient {
  string id = 1;
  repeated string redirect_uris = 2;
  repeated string trusted_peers = 3;
  string name = 4;
  string secret = 5 [(log.mask) = true];
}

message CreateOIDCClientRequest {
  OIDCClient client = 1;
}

message CreateOIDCClientResponse {
  OIDCClient client = 1;
}

message GetOIDCClientRequest {
  string id = 1;
}

message GetOIDCClientResponse {
  OIDCClient client = 1;
}

message ListOIDCClientsRequest {}

message ListOIDCClientsResponse {
  repeated OIDCClient clients = 1;
}

message UpdateOIDCClientRequest {
  OIDCClient client = 1;
}

message UpdateOIDCClientResponse {}

message DeleteOIDCClientRequest {
  string id = 1;
}

message DeleteOIDCClientResponse {}

message DeleteAllRequest {}
message DeleteAllResponse {}

service API {
  rpc SetIdentityServerConfig(SetIdentityServerConfigRequest) returns (SetIdentityServerConfigResponse) {}
  rpc GetIdentityServerConfig(GetIdentityServerConfigRequest) returns (GetIdentityServerConfigResponse) {}
  rpc CreateIDPConnector(CreateIDPConnectorRequest) returns (CreateIDPConnectorResponse) {}
  rpc UpdateIDPConnector(UpdateIDPConnectorRequest) returns (UpdateIDPConnectorResponse) {}
  rpc ListIDPConnectors(ListIDPConnectorsRequest) returns (ListIDPConnectorsResponse) {}
  rpc GetIDPConnector(GetIDPConnectorRequest) returns (GetIDPConnectorResponse) {}
  rpc DeleteIDPConnector(DeleteIDPConnectorRequest) returns (DeleteIDPConnectorResponse) {}
  rpc CreateOIDCClient(CreateOIDCClientRequest) returns (CreateOIDCClientResponse) {}
  rpc UpdateOIDCClient(UpdateOIDCClientRequest) returns (UpdateOIDCClientResponse) {}
  rpc GetOIDCClient(GetOIDCClientRequest) returns (GetOIDCClientResponse) {}
  rpc ListOIDCClients(ListOIDCClientsRequest) returns (ListOIDCClientsResponse) {}
  rpc DeleteOIDCClient(DeleteOIDCClientRequest) returns (DeleteOIDCClientResponse) {}
  rpc DeleteAll(DeleteAllRequest) returns (DeleteAllResponse) {}
}

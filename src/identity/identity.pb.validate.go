// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: identity/identity.proto

package identity

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetLastAuthenticated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastAuthenticated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "LastAuthenticated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastAuthenticated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "LastAuthenticated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on IdentityServerConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IdentityServerConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IdentityServerConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IdentityServerConfigMultiError, or nil if none found.
func (m *IdentityServerConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *IdentityServerConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Issuer

	// no validation rules for IdTokenExpiry

	// no validation rules for RotationTokenExpiry

	if len(errors) > 0 {
		return IdentityServerConfigMultiError(errors)
	}

	return nil
}

// IdentityServerConfigMultiError is an error wrapping multiple validation
// errors returned by IdentityServerConfig.ValidateAll() if the designated
// constraints aren't met.
type IdentityServerConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdentityServerConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdentityServerConfigMultiError) AllErrors() []error { return m }

// IdentityServerConfigValidationError is the validation error returned by
// IdentityServerConfig.Validate if the designated constraints aren't met.
type IdentityServerConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdentityServerConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdentityServerConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdentityServerConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdentityServerConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdentityServerConfigValidationError) ErrorName() string {
	return "IdentityServerConfigValidationError"
}

// Error satisfies the builtin error interface
func (e IdentityServerConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIdentityServerConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdentityServerConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdentityServerConfigValidationError{}

// Validate checks the field values on SetIdentityServerConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetIdentityServerConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIdentityServerConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetIdentityServerConfigRequestMultiError, or nil if none found.
func (m *SetIdentityServerConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIdentityServerConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := SetIdentityServerConfigRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetIdentityServerConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetIdentityServerConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetIdentityServerConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetIdentityServerConfigRequestMultiError(errors)
	}

	return nil
}

// SetIdentityServerConfigRequestMultiError is an error wrapping multiple
// validation errors returned by SetIdentityServerConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type SetIdentityServerConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIdentityServerConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIdentityServerConfigRequestMultiError) AllErrors() []error { return m }

// SetIdentityServerConfigRequestValidationError is the validation error
// returned by SetIdentityServerConfigRequest.Validate if the designated
// constraints aren't met.
type SetIdentityServerConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIdentityServerConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIdentityServerConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIdentityServerConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIdentityServerConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIdentityServerConfigRequestValidationError) ErrorName() string {
	return "SetIdentityServerConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetIdentityServerConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIdentityServerConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIdentityServerConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIdentityServerConfigRequestValidationError{}

// Validate checks the field values on SetIdentityServerConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetIdentityServerConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetIdentityServerConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetIdentityServerConfigResponseMultiError, or nil if none found.
func (m *SetIdentityServerConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetIdentityServerConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetIdentityServerConfigResponseMultiError(errors)
	}

	return nil
}

// SetIdentityServerConfigResponseMultiError is an error wrapping multiple
// validation errors returned by SetIdentityServerConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type SetIdentityServerConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetIdentityServerConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetIdentityServerConfigResponseMultiError) AllErrors() []error { return m }

// SetIdentityServerConfigResponseValidationError is the validation error
// returned by SetIdentityServerConfigResponse.Validate if the designated
// constraints aren't met.
type SetIdentityServerConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetIdentityServerConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetIdentityServerConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetIdentityServerConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetIdentityServerConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetIdentityServerConfigResponseValidationError) ErrorName() string {
	return "SetIdentityServerConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetIdentityServerConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetIdentityServerConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetIdentityServerConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetIdentityServerConfigResponseValidationError{}

// Validate checks the field values on GetIdentityServerConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIdentityServerConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIdentityServerConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIdentityServerConfigRequestMultiError, or nil if none found.
func (m *GetIdentityServerConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIdentityServerConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetIdentityServerConfigRequestMultiError(errors)
	}

	return nil
}

// GetIdentityServerConfigRequestMultiError is an error wrapping multiple
// validation errors returned by GetIdentityServerConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type GetIdentityServerConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIdentityServerConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIdentityServerConfigRequestMultiError) AllErrors() []error { return m }

// GetIdentityServerConfigRequestValidationError is the validation error
// returned by GetIdentityServerConfigRequest.Validate if the designated
// constraints aren't met.
type GetIdentityServerConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIdentityServerConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIdentityServerConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIdentityServerConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIdentityServerConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIdentityServerConfigRequestValidationError) ErrorName() string {
	return "GetIdentityServerConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIdentityServerConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIdentityServerConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIdentityServerConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIdentityServerConfigRequestValidationError{}

// Validate checks the field values on GetIdentityServerConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIdentityServerConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIdentityServerConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIdentityServerConfigResponseMultiError, or nil if none found.
func (m *GetIdentityServerConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIdentityServerConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIdentityServerConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIdentityServerConfigResponseValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIdentityServerConfigResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIdentityServerConfigResponseMultiError(errors)
	}

	return nil
}

// GetIdentityServerConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetIdentityServerConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type GetIdentityServerConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIdentityServerConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIdentityServerConfigResponseMultiError) AllErrors() []error { return m }

// GetIdentityServerConfigResponseValidationError is the validation error
// returned by GetIdentityServerConfigResponse.Validate if the designated
// constraints aren't met.
type GetIdentityServerConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIdentityServerConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIdentityServerConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIdentityServerConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIdentityServerConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIdentityServerConfigResponseValidationError) ErrorName() string {
	return "GetIdentityServerConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIdentityServerConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIdentityServerConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIdentityServerConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIdentityServerConfigResponseValidationError{}

// Validate checks the field values on IDPConnector with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IDPConnector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IDPConnector with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IDPConnectorMultiError, or
// nil if none found.
func (m *IDPConnector) ValidateAll() error {
	return m.validate(true)
}

func (m *IDPConnector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ConfigVersion

	// no validation rules for JsonConfig

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IDPConnectorValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IDPConnectorValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IDPConnectorValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IDPConnectorMultiError(errors)
	}

	return nil
}

// IDPConnectorMultiError is an error wrapping multiple validation errors
// returned by IDPConnector.ValidateAll() if the designated constraints aren't met.
type IDPConnectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IDPConnectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IDPConnectorMultiError) AllErrors() []error { return m }

// IDPConnectorValidationError is the validation error returned by
// IDPConnector.Validate if the designated constraints aren't met.
type IDPConnectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDPConnectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDPConnectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDPConnectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDPConnectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDPConnectorValidationError) ErrorName() string { return "IDPConnectorValidationError" }

// Error satisfies the builtin error interface
func (e IDPConnectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDPConnector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDPConnectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDPConnectorValidationError{}

// Validate checks the field values on CreateIDPConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIDPConnectorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIDPConnectorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIDPConnectorRequestMultiError, or nil if none found.
func (m *CreateIDPConnectorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIDPConnectorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConnector() == nil {
		err := CreateIDPConnectorRequestValidationError{
			field:  "Connector",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConnector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateIDPConnectorRequestValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateIDPConnectorRequestValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateIDPConnectorRequestValidationError{
				field:  "Connector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateIDPConnectorRequestMultiError(errors)
	}

	return nil
}

// CreateIDPConnectorRequestMultiError is an error wrapping multiple validation
// errors returned by CreateIDPConnectorRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateIDPConnectorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIDPConnectorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIDPConnectorRequestMultiError) AllErrors() []error { return m }

// CreateIDPConnectorRequestValidationError is the validation error returned by
// CreateIDPConnectorRequest.Validate if the designated constraints aren't met.
type CreateIDPConnectorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIDPConnectorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIDPConnectorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIDPConnectorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIDPConnectorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIDPConnectorRequestValidationError) ErrorName() string {
	return "CreateIDPConnectorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIDPConnectorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIDPConnectorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIDPConnectorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIDPConnectorRequestValidationError{}

// Validate checks the field values on CreateIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateIDPConnectorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateIDPConnectorResponseMultiError, or nil if none found.
func (m *CreateIDPConnectorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateIDPConnectorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateIDPConnectorResponseMultiError(errors)
	}

	return nil
}

// CreateIDPConnectorResponseMultiError is an error wrapping multiple
// validation errors returned by CreateIDPConnectorResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateIDPConnectorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateIDPConnectorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateIDPConnectorResponseMultiError) AllErrors() []error { return m }

// CreateIDPConnectorResponseValidationError is the validation error returned
// by CreateIDPConnectorResponse.Validate if the designated constraints aren't met.
type CreateIDPConnectorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIDPConnectorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIDPConnectorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIDPConnectorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIDPConnectorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIDPConnectorResponseValidationError) ErrorName() string {
	return "CreateIDPConnectorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIDPConnectorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIDPConnectorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIDPConnectorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIDPConnectorResponseValidationError{}

// Validate checks the field values on UpdateIDPConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIDPConnectorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIDPConnectorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIDPConnectorRequestMultiError, or nil if none found.
func (m *UpdateIDPConnectorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIDPConnectorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConnector() == nil {
		err := UpdateIDPConnectorRequestValidationError{
			field:  "Connector",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConnector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateIDPConnectorRequestValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateIDPConnectorRequestValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIDPConnectorRequestValidationError{
				field:  "Connector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateIDPConnectorRequestMultiError(errors)
	}

	return nil
}

// UpdateIDPConnectorRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateIDPConnectorRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateIDPConnectorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIDPConnectorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIDPConnectorRequestMultiError) AllErrors() []error { return m }

// UpdateIDPConnectorRequestValidationError is the validation error returned by
// UpdateIDPConnectorRequest.Validate if the designated constraints aren't met.
type UpdateIDPConnectorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPConnectorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPConnectorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPConnectorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPConnectorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPConnectorRequestValidationError) ErrorName() string {
	return "UpdateIDPConnectorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPConnectorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPConnectorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPConnectorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPConnectorRequestValidationError{}

// Validate checks the field values on UpdateIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateIDPConnectorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateIDPConnectorResponseMultiError, or nil if none found.
func (m *UpdateIDPConnectorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateIDPConnectorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateIDPConnectorResponseMultiError(errors)
	}

	return nil
}

// UpdateIDPConnectorResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateIDPConnectorResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateIDPConnectorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateIDPConnectorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateIDPConnectorResponseMultiError) AllErrors() []error { return m }

// UpdateIDPConnectorResponseValidationError is the validation error returned
// by UpdateIDPConnectorResponse.Validate if the designated constraints aren't met.
type UpdateIDPConnectorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPConnectorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPConnectorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPConnectorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPConnectorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPConnectorResponseValidationError) ErrorName() string {
	return "UpdateIDPConnectorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPConnectorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPConnectorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPConnectorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPConnectorResponseValidationError{}

// Validate checks the field values on ListIDPConnectorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIDPConnectorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIDPConnectorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIDPConnectorsRequestMultiError, or nil if none found.
func (m *ListIDPConnectorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIDPConnectorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListIDPConnectorsRequestMultiError(errors)
	}

	return nil
}

// ListIDPConnectorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListIDPConnectorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListIDPConnectorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIDPConnectorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIDPConnectorsRequestMultiError) AllErrors() []error { return m }

// ListIDPConnectorsRequestValidationError is the validation error returned by
// ListIDPConnectorsRequest.Validate if the designated constraints aren't met.
type ListIDPConnectorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIDPConnectorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIDPConnectorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIDPConnectorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIDPConnectorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIDPConnectorsRequestValidationError) ErrorName() string {
	return "ListIDPConnectorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIDPConnectorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIDPConnectorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIDPConnectorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIDPConnectorsRequestValidationError{}

// Validate checks the field values on ListIDPConnectorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListIDPConnectorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListIDPConnectorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListIDPConnectorsResponseMultiError, or nil if none found.
func (m *ListIDPConnectorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListIDPConnectorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConnectors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListIDPConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListIDPConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIDPConnectorsResponseValidationError{
					field:  fmt.Sprintf("Connectors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListIDPConnectorsResponseMultiError(errors)
	}

	return nil
}

// ListIDPConnectorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListIDPConnectorsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListIDPConnectorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListIDPConnectorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListIDPConnectorsResponseMultiError) AllErrors() []error { return m }

// ListIDPConnectorsResponseValidationError is the validation error returned by
// ListIDPConnectorsResponse.Validate if the designated constraints aren't met.
type ListIDPConnectorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIDPConnectorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIDPConnectorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIDPConnectorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIDPConnectorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIDPConnectorsResponseValidationError) ErrorName() string {
	return "ListIDPConnectorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIDPConnectorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIDPConnectorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIDPConnectorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIDPConnectorsResponseValidationError{}

// Validate checks the field values on GetIDPConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIDPConnectorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIDPConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIDPConnectorRequestMultiError, or nil if none found.
func (m *GetIDPConnectorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIDPConnectorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetIDPConnectorRequestMultiError(errors)
	}

	return nil
}

// GetIDPConnectorRequestMultiError is an error wrapping multiple validation
// errors returned by GetIDPConnectorRequest.ValidateAll() if the designated
// constraints aren't met.
type GetIDPConnectorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIDPConnectorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIDPConnectorRequestMultiError) AllErrors() []error { return m }

// GetIDPConnectorRequestValidationError is the validation error returned by
// GetIDPConnectorRequest.Validate if the designated constraints aren't met.
type GetIDPConnectorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIDPConnectorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIDPConnectorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIDPConnectorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIDPConnectorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIDPConnectorRequestValidationError) ErrorName() string {
	return "GetIDPConnectorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIDPConnectorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIDPConnectorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIDPConnectorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIDPConnectorRequestValidationError{}

// Validate checks the field values on GetIDPConnectorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIDPConnectorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIDPConnectorResponseMultiError, or nil if none found.
func (m *GetIDPConnectorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIDPConnectorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConnector()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetIDPConnectorResponseValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetIDPConnectorResponseValidationError{
					field:  "Connector",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnector()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIDPConnectorResponseValidationError{
				field:  "Connector",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetIDPConnectorResponseMultiError(errors)
	}

	return nil
}

// GetIDPConnectorResponseMultiError is an error wrapping multiple validation
// errors returned by GetIDPConnectorResponse.ValidateAll() if the designated
// constraints aren't met.
type GetIDPConnectorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIDPConnectorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIDPConnectorResponseMultiError) AllErrors() []error { return m }

// GetIDPConnectorResponseValidationError is the validation error returned by
// GetIDPConnectorResponse.Validate if the designated constraints aren't met.
type GetIDPConnectorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIDPConnectorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIDPConnectorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIDPConnectorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIDPConnectorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIDPConnectorResponseValidationError) ErrorName() string {
	return "GetIDPConnectorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIDPConnectorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIDPConnectorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIDPConnectorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIDPConnectorResponseValidationError{}

// Validate checks the field values on DeleteIDPConnectorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIDPConnectorRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIDPConnectorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIDPConnectorRequestMultiError, or nil if none found.
func (m *DeleteIDPConnectorRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIDPConnectorRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteIDPConnectorRequestMultiError(errors)
	}

	return nil
}

// DeleteIDPConnectorRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteIDPConnectorRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteIDPConnectorRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIDPConnectorRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIDPConnectorRequestMultiError) AllErrors() []error { return m }

// DeleteIDPConnectorRequestValidationError is the validation error returned by
// DeleteIDPConnectorRequest.Validate if the designated constraints aren't met.
type DeleteIDPConnectorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIDPConnectorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIDPConnectorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIDPConnectorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIDPConnectorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIDPConnectorRequestValidationError) ErrorName() string {
	return "DeleteIDPConnectorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIDPConnectorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIDPConnectorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIDPConnectorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIDPConnectorRequestValidationError{}

// Validate checks the field values on DeleteIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteIDPConnectorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteIDPConnectorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteIDPConnectorResponseMultiError, or nil if none found.
func (m *DeleteIDPConnectorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteIDPConnectorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteIDPConnectorResponseMultiError(errors)
	}

	return nil
}

// DeleteIDPConnectorResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteIDPConnectorResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteIDPConnectorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteIDPConnectorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteIDPConnectorResponseMultiError) AllErrors() []error { return m }

// DeleteIDPConnectorResponseValidationError is the validation error returned
// by DeleteIDPConnectorResponse.Validate if the designated constraints aren't met.
type DeleteIDPConnectorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIDPConnectorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIDPConnectorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIDPConnectorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIDPConnectorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIDPConnectorResponseValidationError) ErrorName() string {
	return "DeleteIDPConnectorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIDPConnectorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIDPConnectorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIDPConnectorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIDPConnectorResponseValidationError{}

// Validate checks the field values on OIDCClient with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OIDCClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OIDCClient with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OIDCClientMultiError, or
// nil if none found.
func (m *OIDCClient) ValidateAll() error {
	return m.validate(true)
}

func (m *OIDCClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Secret

	if len(errors) > 0 {
		return OIDCClientMultiError(errors)
	}

	return nil
}

// OIDCClientMultiError is an error wrapping multiple validation errors
// returned by OIDCClient.ValidateAll() if the designated constraints aren't met.
type OIDCClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OIDCClientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OIDCClientMultiError) AllErrors() []error { return m }

// OIDCClientValidationError is the validation error returned by
// OIDCClient.Validate if the designated constraints aren't met.
type OIDCClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OIDCClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OIDCClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OIDCClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OIDCClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OIDCClientValidationError) ErrorName() string { return "OIDCClientValidationError" }

// Error satisfies the builtin error interface
func (e OIDCClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOIDCClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OIDCClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OIDCClientValidationError{}

// Validate checks the field values on CreateOIDCClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOIDCClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOIDCClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOIDCClientRequestMultiError, or nil if none found.
func (m *CreateOIDCClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOIDCClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClient() == nil {
		err := CreateOIDCClientRequestValidationError{
			field:  "Client",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOIDCClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOIDCClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOIDCClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOIDCClientRequestMultiError(errors)
	}

	return nil
}

// CreateOIDCClientRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOIDCClientRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOIDCClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOIDCClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOIDCClientRequestMultiError) AllErrors() []error { return m }

// CreateOIDCClientRequestValidationError is the validation error returned by
// CreateOIDCClientRequest.Validate if the designated constraints aren't met.
type CreateOIDCClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOIDCClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOIDCClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOIDCClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOIDCClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOIDCClientRequestValidationError) ErrorName() string {
	return "CreateOIDCClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOIDCClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOIDCClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOIDCClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOIDCClientRequestValidationError{}

// Validate checks the field values on CreateOIDCClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOIDCClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOIDCClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOIDCClientResponseMultiError, or nil if none found.
func (m *CreateOIDCClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOIDCClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOIDCClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOIDCClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOIDCClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOIDCClientResponseMultiError(errors)
	}

	return nil
}

// CreateOIDCClientResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOIDCClientResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOIDCClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOIDCClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOIDCClientResponseMultiError) AllErrors() []error { return m }

// CreateOIDCClientResponseValidationError is the validation error returned by
// CreateOIDCClientResponse.Validate if the designated constraints aren't met.
type CreateOIDCClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOIDCClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOIDCClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOIDCClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOIDCClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOIDCClientResponseValidationError) ErrorName() string {
	return "CreateOIDCClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOIDCClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOIDCClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOIDCClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOIDCClientResponseValidationError{}

// Validate checks the field values on GetOIDCClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOIDCClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOIDCClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOIDCClientRequestMultiError, or nil if none found.
func (m *GetOIDCClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOIDCClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetOIDCClientRequestMultiError(errors)
	}

	return nil
}

// GetOIDCClientRequestMultiError is an error wrapping multiple validation
// errors returned by GetOIDCClientRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOIDCClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOIDCClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOIDCClientRequestMultiError) AllErrors() []error { return m }

// GetOIDCClientRequestValidationError is the validation error returned by
// GetOIDCClientRequest.Validate if the designated constraints aren't met.
type GetOIDCClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCClientRequestValidationError) ErrorName() string {
	return "GetOIDCClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCClientRequestValidationError{}

// Validate checks the field values on GetOIDCClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOIDCClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOIDCClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOIDCClientResponseMultiError, or nil if none found.
func (m *GetOIDCClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOIDCClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOIDCClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOIDCClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOIDCClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOIDCClientResponseMultiError(errors)
	}

	return nil
}

// GetOIDCClientResponseMultiError is an error wrapping multiple validation
// errors returned by GetOIDCClientResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOIDCClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOIDCClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOIDCClientResponseMultiError) AllErrors() []error { return m }

// GetOIDCClientResponseValidationError is the validation error returned by
// GetOIDCClientResponse.Validate if the designated constraints aren't met.
type GetOIDCClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCClientResponseValidationError) ErrorName() string {
	return "GetOIDCClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCClientResponseValidationError{}

// Validate checks the field values on ListOIDCClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOIDCClientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOIDCClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOIDCClientsRequestMultiError, or nil if none found.
func (m *ListOIDCClientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOIDCClientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListOIDCClientsRequestMultiError(errors)
	}

	return nil
}

// ListOIDCClientsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOIDCClientsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOIDCClientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOIDCClientsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOIDCClientsRequestMultiError) AllErrors() []error { return m }

// ListOIDCClientsRequestValidationError is the validation error returned by
// ListOIDCClientsRequest.Validate if the designated constraints aren't met.
type ListOIDCClientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOIDCClientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOIDCClientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOIDCClientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOIDCClientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOIDCClientsRequestValidationError) ErrorName() string {
	return "ListOIDCClientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOIDCClientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOIDCClientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOIDCClientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOIDCClientsRequestValidationError{}

// Validate checks the field values on ListOIDCClientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOIDCClientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOIDCClientsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOIDCClientsResponseMultiError, or nil if none found.
func (m *ListOIDCClientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOIDCClientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOIDCClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOIDCClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOIDCClientsResponseValidationError{
					field:  fmt.Sprintf("Clients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOIDCClientsResponseMultiError(errors)
	}

	return nil
}

// ListOIDCClientsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOIDCClientsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOIDCClientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOIDCClientsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOIDCClientsResponseMultiError) AllErrors() []error { return m }

// ListOIDCClientsResponseValidationError is the validation error returned by
// ListOIDCClientsResponse.Validate if the designated constraints aren't met.
type ListOIDCClientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOIDCClientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOIDCClientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOIDCClientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOIDCClientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOIDCClientsResponseValidationError) ErrorName() string {
	return "ListOIDCClientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOIDCClientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOIDCClientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOIDCClientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOIDCClientsResponseValidationError{}

// Validate checks the field values on UpdateOIDCClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOIDCClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOIDCClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOIDCClientRequestMultiError, or nil if none found.
func (m *UpdateOIDCClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOIDCClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClient() == nil {
		err := UpdateOIDCClientRequestValidationError{
			field:  "Client",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOIDCClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOIDCClientRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCClientRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOIDCClientRequestMultiError(errors)
	}

	return nil
}

// UpdateOIDCClientRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOIDCClientRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOIDCClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOIDCClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOIDCClientRequestMultiError) AllErrors() []error { return m }

// UpdateOIDCClientRequestValidationError is the validation error returned by
// UpdateOIDCClientRequest.Validate if the designated constraints aren't met.
type UpdateOIDCClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCClientRequestValidationError) ErrorName() string {
	return "UpdateOIDCClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCClientRequestValidationError{}

// Validate checks the field values on UpdateOIDCClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOIDCClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOIDCClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOIDCClientResponseMultiError, or nil if none found.
func (m *UpdateOIDCClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOIDCClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOIDCClientResponseMultiError(errors)
	}

	return nil
}

// UpdateOIDCClientResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOIDCClientResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOIDCClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOIDCClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOIDCClientResponseMultiError) AllErrors() []error { return m }

// UpdateOIDCClientResponseValidationError is the validation error returned by
// UpdateOIDCClientResponse.Validate if the designated constraints aren't met.
type UpdateOIDCClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCClientResponseValidationError) ErrorName() string {
	return "UpdateOIDCClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCClientResponseValidationError{}

// Validate checks the field values on DeleteOIDCClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOIDCClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOIDCClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOIDCClientRequestMultiError, or nil if none found.
func (m *DeleteOIDCClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOIDCClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteOIDCClientRequestMultiError(errors)
	}

	return nil
}

// DeleteOIDCClientRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOIDCClientRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOIDCClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOIDCClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOIDCClientRequestMultiError) AllErrors() []error { return m }

// DeleteOIDCClientRequestValidationError is the validation error returned by
// DeleteOIDCClientRequest.Validate if the designated constraints aren't met.
type DeleteOIDCClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOIDCClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOIDCClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOIDCClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOIDCClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOIDCClientRequestValidationError) ErrorName() string {
	return "DeleteOIDCClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOIDCClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOIDCClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOIDCClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOIDCClientRequestValidationError{}

// Validate checks the field values on DeleteOIDCClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOIDCClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOIDCClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOIDCClientResponseMultiError, or nil if none found.
func (m *DeleteOIDCClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOIDCClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOIDCClientResponseMultiError(errors)
	}

	return nil
}

// DeleteOIDCClientResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteOIDCClientResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOIDCClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOIDCClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOIDCClientResponseMultiError) AllErrors() []error { return m }

// DeleteOIDCClientResponseValidationError is the validation error returned by
// DeleteOIDCClientResponse.Validate if the designated constraints aren't met.
type DeleteOIDCClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOIDCClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOIDCClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOIDCClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOIDCClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOIDCClientResponseValidationError) ErrorName() string {
	return "DeleteOIDCClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOIDCClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOIDCClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOIDCClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOIDCClientResponseValidationError{}

// Validate checks the field values on DeleteAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllRequestMultiError, or nil if none found.
func (m *DeleteAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAllRequestMultiError(errors)
	}

	return nil
}

// DeleteAllRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAllRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllRequestMultiError) AllErrors() []error { return m }

// DeleteAllRequestValidationError is the validation error returned by
// DeleteAllRequest.Validate if the designated constraints aren't met.
type DeleteAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllRequestValidationError) ErrorName() string { return "DeleteAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllRequestValidationError{}

// Validate checks the field values on DeleteAllResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteAllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAllResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAllResponseMultiError, or nil if none found.
func (m *DeleteAllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAllResponseMultiError(errors)
	}

	return nil
}

// DeleteAllResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteAllResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteAllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAllResponseMultiError) AllErrors() []error { return m }

// DeleteAllResponseValidationError is the validation error returned by
// DeleteAllResponse.Validate if the designated constraints aren't met.
type DeleteAllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAllResponseValidationError) ErrorName() string {
	return "DeleteAllResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAllResponseValidationError{}

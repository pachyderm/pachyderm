// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: identity/identity.proto

package identity

import (
	zapcore "go.uber.org/zap/zapcore"
)

func (x *User) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("email", x.Email)

	if t := x.LastAuthenticated; t != nil {
		enc.AddTime("last_authenticated", *t)
	}

	return nil
}

func (x *IdentityServerConfig) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("issuer", x.Issuer)

	enc.AddString("id_token_expiry", x.IdTokenExpiry)

	enc.AddString("rotation_token_expiry", x.RotationTokenExpiry)

	return nil
}

func (x *SetIdentityServerConfigRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Config).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("config", obj)
	} else {
		enc.AddReflected("config", x.Config)
	}

	return nil
}

func (x *SetIdentityServerConfigResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *GetIdentityServerConfigRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *GetIdentityServerConfigResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Config).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("config", obj)
	} else {
		enc.AddReflected("config", x.Config)
	}

	return nil
}

func (x *IDPConnector) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	enc.AddString("name", x.Name)

	enc.AddString("type", x.Type)

	enc.AddInt64("configVersion", x.ConfigVersion)

	enc.AddString("jsonConfig", x.JsonConfig)

	if obj, ok := interface{}(x.Config).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("config", obj)
	} else {
		enc.AddReflected("config", x.Config)
	}

	return nil
}

func (x *CreateIDPConnectorRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Connector).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("connector", obj)
	} else {
		enc.AddReflected("connector", x.Connector)
	}

	return nil
}

func (x *CreateIDPConnectorResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *UpdateIDPConnectorRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Connector).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("connector", obj)
	} else {
		enc.AddReflected("connector", x.Connector)
	}

	return nil
}

func (x *UpdateIDPConnectorResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *ListIDPConnectorsRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *ListIDPConnectorsResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	connectorsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Connectors {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("connectors", zapcore.ArrayMarshalerFunc(connectorsArrMarshaller))

	return nil
}

func (x *GetIDPConnectorRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	return nil
}

func (x *GetIDPConnectorResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Connector).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("connector", obj)
	} else {
		enc.AddReflected("connector", x.Connector)
	}

	return nil
}

func (x *DeleteIDPConnectorRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	return nil
}

func (x *DeleteIDPConnectorResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *OIDCClient) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	redirect_urisArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.RedirectUris {
			enc.AppendString(v)
		}
		return nil
	}
	enc.AddArray("redirect_uris", zapcore.ArrayMarshalerFunc(redirect_urisArrMarshaller))

	trusted_peersArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.TrustedPeers {
			enc.AppendString(v)
		}
		return nil
	}
	enc.AddArray("trusted_peers", zapcore.ArrayMarshalerFunc(trusted_peersArrMarshaller))

	enc.AddString("name", x.Name)

	enc.AddString("secret", x.Secret)

	return nil
}

func (x *CreateOIDCClientRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Client).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("client", obj)
	} else {
		enc.AddReflected("client", x.Client)
	}

	return nil
}

func (x *CreateOIDCClientResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Client).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("client", obj)
	} else {
		enc.AddReflected("client", x.Client)
	}

	return nil
}

func (x *GetOIDCClientRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	return nil
}

func (x *GetOIDCClientResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Client).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("client", obj)
	} else {
		enc.AddReflected("client", x.Client)
	}

	return nil
}

func (x *ListOIDCClientsRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *ListOIDCClientsResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	clientsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Clients {
			if obj, ok := interface{}(v).(zapcore.ObjectMarshaler); ok {
				enc.AppendObject(obj)
			} else {
				enc.AppendReflected(v)
			}
		}
		return nil
	}
	enc.AddArray("clients", zapcore.ArrayMarshalerFunc(clientsArrMarshaller))

	return nil
}

func (x *UpdateOIDCClientRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	if obj, ok := interface{}(x.Client).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("client", obj)
	} else {
		enc.AddReflected("client", x.Client)
	}

	return nil
}

func (x *UpdateOIDCClientResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *DeleteOIDCClientRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	enc.AddString("id", x.Id)

	return nil
}

func (x *DeleteOIDCClientResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *DeleteAllRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

func (x *DeleteAllResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}

	return nil
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: enterprise/enterprise.proto

package enterprise

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LicenseRecord with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LicenseRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LicenseRecordMultiError, or
// nil if none found.
func (m *LicenseRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivationCode

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LicenseRecordValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LicenseRecordValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseRecordValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LicenseRecordMultiError(errors)
	}

	return nil
}

// LicenseRecordMultiError is an error wrapping multiple validation errors
// returned by LicenseRecord.ValidateAll() if the designated constraints
// aren't met.
type LicenseRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseRecordMultiError) AllErrors() []error { return m }

// LicenseRecordValidationError is the validation error returned by
// LicenseRecord.Validate if the designated constraints aren't met.
type LicenseRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseRecordValidationError) ErrorName() string { return "LicenseRecordValidationError" }

// Error satisfies the builtin error interface
func (e LicenseRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseRecordValidationError{}

// Validate checks the field values on EnterpriseConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnterpriseConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnterpriseConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnterpriseConfigMultiError, or nil if none found.
func (m *EnterpriseConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *EnterpriseConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LicenseServer

	// no validation rules for Id

	// no validation rules for Secret

	if len(errors) > 0 {
		return EnterpriseConfigMultiError(errors)
	}

	return nil
}

// EnterpriseConfigMultiError is an error wrapping multiple validation errors
// returned by EnterpriseConfig.ValidateAll() if the designated constraints
// aren't met.
type EnterpriseConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnterpriseConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnterpriseConfigMultiError) AllErrors() []error { return m }

// EnterpriseConfigValidationError is the validation error returned by
// EnterpriseConfig.Validate if the designated constraints aren't met.
type EnterpriseConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnterpriseConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnterpriseConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnterpriseConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnterpriseConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnterpriseConfigValidationError) ErrorName() string { return "EnterpriseConfigValidationError" }

// Error satisfies the builtin error interface
func (e EnterpriseConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnterpriseConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnterpriseConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnterpriseConfigValidationError{}

// Validate checks the field values on EnterpriseRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnterpriseRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnterpriseRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnterpriseRecordMultiError, or nil if none found.
func (m *EnterpriseRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *EnterpriseRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLicense()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnterpriseRecordValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnterpriseRecordValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnterpriseRecordValidationError{
				field:  "License",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastHeartbeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnterpriseRecordValidationError{
					field:  "LastHeartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnterpriseRecordValidationError{
					field:  "LastHeartbeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastHeartbeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnterpriseRecordValidationError{
				field:  "LastHeartbeat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HeartbeatFailed

	if len(errors) > 0 {
		return EnterpriseRecordMultiError(errors)
	}

	return nil
}

// EnterpriseRecordMultiError is an error wrapping multiple validation errors
// returned by EnterpriseRecord.ValidateAll() if the designated constraints
// aren't met.
type EnterpriseRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnterpriseRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnterpriseRecordMultiError) AllErrors() []error { return m }

// EnterpriseRecordValidationError is the validation error returned by
// EnterpriseRecord.Validate if the designated constraints aren't met.
type EnterpriseRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnterpriseRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnterpriseRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnterpriseRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnterpriseRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnterpriseRecordValidationError) ErrorName() string { return "EnterpriseRecordValidationError" }

// Error satisfies the builtin error interface
func (e EnterpriseRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnterpriseRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnterpriseRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnterpriseRecordValidationError{}

// Validate checks the field values on TokenInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenInfoMultiError, or nil
// if none found.
func (m *TokenInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenInfoValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenInfoValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenInfoValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TokenInfoMultiError(errors)
	}

	return nil
}

// TokenInfoMultiError is an error wrapping multiple validation errors returned
// by TokenInfo.ValidateAll() if the designated constraints aren't met.
type TokenInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenInfoMultiError) AllErrors() []error { return m }

// TokenInfoValidationError is the validation error returned by
// TokenInfo.Validate if the designated constraints aren't met.
type TokenInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenInfoValidationError) ErrorName() string { return "TokenInfoValidationError" }

// Error satisfies the builtin error interface
func (e TokenInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenInfoValidationError{}

// Validate checks the field values on ActivateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateRequestMultiError, or nil if none found.
func (m *ActivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LicenseServer

	// no validation rules for Id

	// no validation rules for Secret

	if len(errors) > 0 {
		return ActivateRequestMultiError(errors)
	}

	return nil
}

// ActivateRequestMultiError is an error wrapping multiple validation errors
// returned by ActivateRequest.ValidateAll() if the designated constraints
// aren't met.
type ActivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateRequestMultiError) AllErrors() []error { return m }

// ActivateRequestValidationError is the validation error returned by
// ActivateRequest.Validate if the designated constraints aren't met.
type ActivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateRequestValidationError) ErrorName() string { return "ActivateRequestValidationError" }

// Error satisfies the builtin error interface
func (e ActivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateRequestValidationError{}

// Validate checks the field values on ActivateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivateResponseMultiError, or nil if none found.
func (m *ActivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ActivateResponseMultiError(errors)
	}

	return nil
}

// ActivateResponseMultiError is an error wrapping multiple validation errors
// returned by ActivateResponse.ValidateAll() if the designated constraints
// aren't met.
type ActivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivateResponseMultiError) AllErrors() []error { return m }

// ActivateResponseValidationError is the validation error returned by
// ActivateResponse.Validate if the designated constraints aren't met.
type ActivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateResponseValidationError) ErrorName() string { return "ActivateResponseValidationError" }

// Error satisfies the builtin error interface
func (e ActivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateResponseValidationError{}

// Validate checks the field values on GetStateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStateRequestMultiError, or nil if none found.
func (m *GetStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStateRequestMultiError(errors)
	}

	return nil
}

// GetStateRequestMultiError is an error wrapping multiple validation errors
// returned by GetStateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStateRequestMultiError) AllErrors() []error { return m }

// GetStateRequestValidationError is the validation error returned by
// GetStateRequest.Validate if the designated constraints aren't met.
type GetStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStateRequestValidationError) ErrorName() string { return "GetStateRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStateRequestValidationError{}

// Validate checks the field values on GetStateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStateResponseMultiError, or nil if none found.
func (m *GetStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStateResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStateResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStateResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActivationCode

	if len(errors) > 0 {
		return GetStateResponseMultiError(errors)
	}

	return nil
}

// GetStateResponseMultiError is an error wrapping multiple validation errors
// returned by GetStateResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStateResponseMultiError) AllErrors() []error { return m }

// GetStateResponseValidationError is the validation error returned by
// GetStateResponse.Validate if the designated constraints aren't met.
type GetStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStateResponseValidationError) ErrorName() string { return "GetStateResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStateResponseValidationError{}

// Validate checks the field values on GetActivationCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivationCodeRequestMultiError, or nil if none found.
func (m *GetActivationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetActivationCodeRequestMultiError(errors)
	}

	return nil
}

// GetActivationCodeRequestMultiError is an error wrapping multiple validation
// errors returned by GetActivationCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type GetActivationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivationCodeRequestMultiError) AllErrors() []error { return m }

// GetActivationCodeRequestValidationError is the validation error returned by
// GetActivationCodeRequest.Validate if the designated constraints aren't met.
type GetActivationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivationCodeRequestValidationError) ErrorName() string {
	return "GetActivationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivationCodeRequestValidationError{}

// Validate checks the field values on GetActivationCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetActivationCodeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetActivationCodeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetActivationCodeResponseMultiError, or nil if none found.
func (m *GetActivationCodeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetActivationCodeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetActivationCodeResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetActivationCodeResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActivationCodeResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActivationCode

	if len(errors) > 0 {
		return GetActivationCodeResponseMultiError(errors)
	}

	return nil
}

// GetActivationCodeResponseMultiError is an error wrapping multiple validation
// errors returned by GetActivationCodeResponse.ValidateAll() if the
// designated constraints aren't met.
type GetActivationCodeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetActivationCodeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetActivationCodeResponseMultiError) AllErrors() []error { return m }

// GetActivationCodeResponseValidationError is the validation error returned by
// GetActivationCodeResponse.Validate if the designated constraints aren't met.
type GetActivationCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActivationCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActivationCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActivationCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActivationCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActivationCodeResponseValidationError) ErrorName() string {
	return "GetActivationCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActivationCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActivationCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActivationCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActivationCodeResponseValidationError{}

// Validate checks the field values on HeartbeatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartbeatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartbeatRequestMultiError, or nil if none found.
func (m *HeartbeatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatRequestMultiError(errors)
	}

	return nil
}

// HeartbeatRequestMultiError is an error wrapping multiple validation errors
// returned by HeartbeatRequest.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatRequestMultiError) AllErrors() []error { return m }

// HeartbeatRequestValidationError is the validation error returned by
// HeartbeatRequest.Validate if the designated constraints aren't met.
type HeartbeatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatRequestValidationError) ErrorName() string { return "HeartbeatRequestValidationError" }

// Error satisfies the builtin error interface
func (e HeartbeatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatRequestValidationError{}

// Validate checks the field values on HeartbeatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HeartbeatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HeartbeatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HeartbeatResponseMultiError, or nil if none found.
func (m *HeartbeatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *HeartbeatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return HeartbeatResponseMultiError(errors)
	}

	return nil
}

// HeartbeatResponseMultiError is an error wrapping multiple validation errors
// returned by HeartbeatResponse.ValidateAll() if the designated constraints
// aren't met.
type HeartbeatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HeartbeatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HeartbeatResponseMultiError) AllErrors() []error { return m }

// HeartbeatResponseValidationError is the validation error returned by
// HeartbeatResponse.Validate if the designated constraints aren't met.
type HeartbeatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeartbeatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeartbeatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeartbeatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeartbeatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeartbeatResponseValidationError) ErrorName() string {
	return "HeartbeatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e HeartbeatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeartbeatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeartbeatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeartbeatResponseValidationError{}

// Validate checks the field values on DeactivateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeactivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateRequestMultiError, or nil if none found.
func (m *DeactivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeactivateRequestMultiError(errors)
	}

	return nil
}

// DeactivateRequestMultiError is an error wrapping multiple validation errors
// returned by DeactivateRequest.ValidateAll() if the designated constraints
// aren't met.
type DeactivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateRequestMultiError) AllErrors() []error { return m }

// DeactivateRequestValidationError is the validation error returned by
// DeactivateRequest.Validate if the designated constraints aren't met.
type DeactivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateRequestValidationError) ErrorName() string {
	return "DeactivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateRequestValidationError{}

// Validate checks the field values on DeactivateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeactivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeactivateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeactivateResponseMultiError, or nil if none found.
func (m *DeactivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeactivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeactivateResponseMultiError(errors)
	}

	return nil
}

// DeactivateResponseMultiError is an error wrapping multiple validation errors
// returned by DeactivateResponse.ValidateAll() if the designated constraints
// aren't met.
type DeactivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeactivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeactivateResponseMultiError) AllErrors() []error { return m }

// DeactivateResponseValidationError is the validation error returned by
// DeactivateResponse.Validate if the designated constraints aren't met.
type DeactivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateResponseValidationError) ErrorName() string {
	return "DeactivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateResponseValidationError{}

// Validate checks the field values on PauseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PauseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PauseRequestMultiError, or
// nil if none found.
func (m *PauseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PauseRequestMultiError(errors)
	}

	return nil
}

// PauseRequestMultiError is an error wrapping multiple validation errors
// returned by PauseRequest.ValidateAll() if the designated constraints aren't met.
type PauseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseRequestMultiError) AllErrors() []error { return m }

// PauseRequestValidationError is the validation error returned by
// PauseRequest.Validate if the designated constraints aren't met.
type PauseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseRequestValidationError) ErrorName() string { return "PauseRequestValidationError" }

// Error satisfies the builtin error interface
func (e PauseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseRequestValidationError{}

// Validate checks the field values on PauseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PauseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PauseResponseMultiError, or
// nil if none found.
func (m *PauseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PauseResponseMultiError(errors)
	}

	return nil
}

// PauseResponseMultiError is an error wrapping multiple validation errors
// returned by PauseResponse.ValidateAll() if the designated constraints
// aren't met.
type PauseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseResponseMultiError) AllErrors() []error { return m }

// PauseResponseValidationError is the validation error returned by
// PauseResponse.Validate if the designated constraints aren't met.
type PauseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseResponseValidationError) ErrorName() string { return "PauseResponseValidationError" }

// Error satisfies the builtin error interface
func (e PauseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseResponseValidationError{}

// Validate checks the field values on UnpauseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnpauseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnpauseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnpauseRequestMultiError,
// or nil if none found.
func (m *UnpauseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnpauseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnpauseRequestMultiError(errors)
	}

	return nil
}

// UnpauseRequestMultiError is an error wrapping multiple validation errors
// returned by UnpauseRequest.ValidateAll() if the designated constraints
// aren't met.
type UnpauseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnpauseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnpauseRequestMultiError) AllErrors() []error { return m }

// UnpauseRequestValidationError is the validation error returned by
// UnpauseRequest.Validate if the designated constraints aren't met.
type UnpauseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnpauseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnpauseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnpauseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnpauseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnpauseRequestValidationError) ErrorName() string { return "UnpauseRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnpauseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnpauseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnpauseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnpauseRequestValidationError{}

// Validate checks the field values on UnpauseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnpauseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnpauseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnpauseResponseMultiError, or nil if none found.
func (m *UnpauseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnpauseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnpauseResponseMultiError(errors)
	}

	return nil
}

// UnpauseResponseMultiError is an error wrapping multiple validation errors
// returned by UnpauseResponse.ValidateAll() if the designated constraints
// aren't met.
type UnpauseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnpauseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnpauseResponseMultiError) AllErrors() []error { return m }

// UnpauseResponseValidationError is the validation error returned by
// UnpauseResponse.Validate if the designated constraints aren't met.
type UnpauseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnpauseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnpauseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnpauseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnpauseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnpauseResponseValidationError) ErrorName() string { return "UnpauseResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnpauseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnpauseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnpauseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnpauseResponseValidationError{}

// Validate checks the field values on PauseStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PauseStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseStatusRequestMultiError, or nil if none found.
func (m *PauseStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PauseStatusRequestMultiError(errors)
	}

	return nil
}

// PauseStatusRequestMultiError is an error wrapping multiple validation errors
// returned by PauseStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type PauseStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseStatusRequestMultiError) AllErrors() []error { return m }

// PauseStatusRequestValidationError is the validation error returned by
// PauseStatusRequest.Validate if the designated constraints aren't met.
type PauseStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseStatusRequestValidationError) ErrorName() string {
	return "PauseStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PauseStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseStatusRequestValidationError{}

// Validate checks the field values on PauseStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PauseStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PauseStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PauseStatusResponseMultiError, or nil if none found.
func (m *PauseStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PauseStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return PauseStatusResponseMultiError(errors)
	}

	return nil
}

// PauseStatusResponseMultiError is an error wrapping multiple validation
// errors returned by PauseStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type PauseStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PauseStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PauseStatusResponseMultiError) AllErrors() []error { return m }

// PauseStatusResponseValidationError is the validation error returned by
// PauseStatusResponse.Validate if the designated constraints aren't met.
type PauseStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PauseStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PauseStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PauseStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PauseStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PauseStatusResponseValidationError) ErrorName() string {
	return "PauseStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PauseStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPauseStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PauseStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PauseStatusResponseValidationError{}

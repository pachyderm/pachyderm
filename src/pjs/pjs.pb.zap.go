// Code generated by protoc-gen-zap (etc/proto/protoc-gen-zap). DO NOT EDIT.
//
// source: pjs/pjs.proto

package pjs

import (
	protoextensions "github.com/pachyderm/pachyderm/v2/src/protoextensions"
	zapcore "go.uber.org/zap/zapcore"
)

func (x *Job) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddInt64("id", x.Id)
	return nil
}

func (x *JobInfo) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	if obj, ok := interface{}(x.ParentJob).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("parent_job", obj)
	} else {
		enc.AddReflected("parent_job", x.ParentJob)
	}
	enc.AddString("state", x.State.String())
	protoextensions.AddAny(enc, "spec", x.Spec)
	if obj, ok := interface{}(x.Input).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("input", obj)
	} else {
		enc.AddReflected("input", x.Input)
	}
	if obj, ok := interface{}(x.GetOutput()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("output", obj)
	} else {
		enc.AddReflected("output", x.GetOutput())
	}
	enc.AddString("error", x.GetError().String())
	return nil
}

func (x *JobInfoDetails) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.JobInfo).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job_info", obj)
	} else {
		enc.AddReflected("job_info", x.JobInfo)
	}
	return nil
}

func (x *Queue) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	protoextensions.AddBytes(enc, "id", x.Id)
	return nil
}

func (x *QueueInfo) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Queue).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("queue", obj)
	} else {
		enc.AddReflected("queue", x.Queue)
	}
	protoextensions.AddAny(enc, "spec", x.Spec)
	return nil
}

func (x *QueueInfoDetails) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.QueueInfo).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("queue_info", obj)
	} else {
		enc.AddReflected("queue_info", x.QueueInfo)
	}
	enc.AddInt64("size", x.Size)
	return nil
}

func (x *QueueElement) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	protoextensions.AddBytes(enc, "data", x.Data)
	filesetsArrMarshaller := func(enc zapcore.ArrayEncoder) error {
		for _, v := range x.Filesets {
			enc.AppendString(v)
		}
		return nil
	}
	enc.AddArray("filesets", zapcore.ArrayMarshalerFunc(filesetsArrMarshaller))
	return nil
}

func (x *CreateJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	protoextensions.AddAny(enc, "spec", x.Spec)
	if obj, ok := interface{}(x.Input).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("input", obj)
	} else {
		enc.AddReflected("input", x.Input)
	}
	enc.AddBool("cache_read", x.CacheRead)
	enc.AddBool("cache_write", x.CacheWrite)
	return nil
}

func (x *CreateJobResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Id).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("id", obj)
	} else {
		enc.AddReflected("id", x.Id)
	}
	return nil
}

func (x *CancelJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	return nil
}

func (x *CancelJobResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *DeleteJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	return nil
}

func (x *DeleteJobResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ListJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	return nil
}

func (x *ListJobResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Id).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("id", obj)
	} else {
		enc.AddReflected("id", x.Id)
	}
	if obj, ok := interface{}(x.Info).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("info", obj)
	} else {
		enc.AddReflected("info", x.Info)
	}
	if obj, ok := interface{}(x.Details).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("details", obj)
	} else {
		enc.AddReflected("details", x.Details)
	}
	return nil
}

func (x *WalkJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	return nil
}

func (x *InspectJobRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Job).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("job", obj)
	} else {
		enc.AddReflected("job", x.Job)
	}
	return nil
}

func (x *InspectJobResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Details).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("details", obj)
	} else {
		enc.AddReflected("details", x.Details)
	}
	return nil
}

func (x *ProcessQueueRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Queue).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("queue", obj)
	} else {
		enc.AddReflected("queue", x.Queue)
	}
	if obj, ok := interface{}(x.GetOutput()).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("output", obj)
	} else {
		enc.AddReflected("output", x.GetOutput())
	}
	enc.AddBool("failed", x.GetFailed())
	return nil
}

func (x *ProcessQueueResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	enc.AddString("context", x.Context)
	if obj, ok := interface{}(x.Input).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("input", obj)
	} else {
		enc.AddReflected("input", x.Input)
	}
	return nil
}

func (x *ListQueueRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	return nil
}

func (x *ListQueueResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Id).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("id", obj)
	} else {
		enc.AddReflected("id", x.Id)
	}
	if obj, ok := interface{}(x.Info).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("info", obj)
	} else {
		enc.AddReflected("info", x.Info)
	}
	if obj, ok := interface{}(x.Details).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("details", obj)
	} else {
		enc.AddReflected("details", x.Details)
	}
	return nil
}

func (x *InspectQueueRequest) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Queue).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("queue", obj)
	} else {
		enc.AddReflected("queue", x.Queue)
	}
	return nil
}

func (x *InspectQueueResponse) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if x == nil {
		return nil
	}
	if obj, ok := interface{}(x.Details).(zapcore.ObjectMarshaler); ok {
		enc.AddObject("details", obj)
	} else {
		enc.AddReflected("details", x.Details)
	}
	return nil
}

syntax = "proto3";

package pjs;
option go_package = "github.com/pachyderm/pachyderm/v2/src/pjs";

import "google/protobuf/any.proto";

// Job uniquely identifies a Job
// Job will be nil to indicate no Job, or an unset Job.
message Job {
  int64 id = 1;
}

enum JobState {
  // UNSPECIFIED means the job state is unspecified.
  JobState_UNSPECIFIED = 0;
  // QUEUED means the job is currently in a queue.
  // A QUEUED job will not have any descendants.
  QUEUED = 1;
  // PROCESSING means the job is currently being processed by a worker.
  PROCESSING = 2;
  // DONE means the job, and all of its descendants, are done.
  DONE = 3;
}

enum JobErrorCode {
  // UNSPECIFIED means the job error code is unspecified.
  JobErrorCode_UNSPECIFIED = 0;
  // FAILED means that the worker processing the job indicated that it failed.
  FAILED = 1;	
  // DISCONNECTED means the worker processing the job disconnected.
  DISCONNECTED = 2;
  // CANCELED means the job was canceled.
  CANCELED = 3;
}

// PJS associates fileset handles with the input and output of a Job.
// All references Filesets will persist for as the associated Job is in a Queue.
// New handles, pointing to equivalent Filesets, are minted whenever they cross the API boundary.

// JobInfo describes a Job
message JobInfo {
  // Job is the Job's identity
  Job job = 1; 
  // parent_job is the Job's parent if it exists.
  Job parent_job = 2;
  // state is the Job's state.
  // See JobState for a description of the possible states.
  JobState state = 3;
  // program is the fileset that contains the code specification for the Job.
  string program = 4;
  // input is the input fileset handles for the Job.
  repeated string input = 5;

  // Success is produced by a successfully completing Job.
  message Success {
    // output is a list of fileset handles produced by a successful Job.
    repeated string output = 1;
  }
  // result is set when the Job enters the DONE state.
  oneof result {
    Success success = 6;
    // error is set when the Job is unable to complete successfully
    JobErrorCode error = 7;
  }
}

// JobInfoDetails is more detailed information about a Job.
// It contains a superset of the information in JobInfo
message JobInfoDetails {
  JobInfo job_info = 1;
}

// Queue uniquely identifies a Queue
// Queue will be nil to identify no Queue, or to indicate unset.
message Queue {
  bytes id = 1;
}

// QueueInfo describes a Queue
message QueueInfo {
  // queue is the Queue's identity
  Queue queue = 1;
  // spec specifies the code to be run to process the Queue.
  google.protobuf.Any spec = 2;
}

// QueueInfoDetails contains detailed information about a Queue, which may be more expensive to get.
// It contains a superset of the information in QueueInfo.
message QueueInfoDetails {
  QueueInfo queue_info = 1;
  // size is the number of elements queued.
  int64 size = 2;
}

service API {
  // Job API
	
  // CreateJob creates a new job.
  // Child jobs can be created by setting the context field to the appropriate parent job context.
  rpc CreateJob(CreateJobRequest) returns (CreateJobResponse) {}
  // CancelJob cancels a job.
  // Canceling a job transitions all of the associated QUEUED and PROCESSING jobs to the DONE state and sets their error codes to CANCELED. 
  // This will terminate all ongoing processing associated with the job.
  // Nothing will be deleted.
  // A job can only be canceled with the parent job context.
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse) {}
  // DeleteJob deletes a job.
  // DeleteJob first cancels the job, then deletes all of the metadata and filesets associated with the job.
  // A job can only be deleted with the parent job context.
  rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse) {}
  // ListJob returns a list of jobs and information about each job.
  // The jobs returned in the list are the child jobs of the provided job.
  // If no job is provided, the list is the child jobs of the provided job context.
  // The provided job must be associated with the provided job context or a descendant of the job associated with the provided job context.
  rpc ListJob(ListJobRequest) returns (stream ListJobResponse) {}
  // WalkJob returns a list of jobs in a hierarchy and information about each job.
  // Walking a job traverses the job hierarchy rooted at the provided job.
  // The provided job must be associated with the provided job context or a descendant of the job associated with the provided job context.
  rpc WalkJob(WalkJobRequest) returns (stream ListJobResponse) {}
  // InspectJob returns detailed information about a job.
  rpc InspectJob(InspectJobRequest) returns (InspectJobResponse) {}
	
  // Queue API
	
  // ProcessQueue should be called by workers to process jobs in a queue.
  // The protocol is as follows:
  //   Worker sends an initial request with the queue id.
  //   For each job:
  //     Server sends a response with a job context and the associated queue element.
  //     Worker processes the job.
  //     Worker sends a request with the job output or indicates that the job failed.
  // This RPC should generally be run indefinitely. Workers will be scaled based on demand, so the expectation is that they should be processing queues while they are up.
  // This RPC will be canceled by the server if the current job is canceled. Workers should generally retry the RPC when disconnects occur.
  rpc ProcessQueue(stream ProcessQueueRequest) returns (stream ProcessQueueResponse) {}
  // ListQueue returns a list of queues and information about each queue.
  rpc ListQueue(ListQueueRequest) returns (stream ListQueueResponse) {}
  // InspectQueue returns detailed information about a queue.
  rpc InspectQueue(InspectQueueRequest) returns (InspectQueueResponse) {}
}

// Job Messages

message CreateJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  // program is a fileset handle.
  string program = 2;
  // input is a list of fileset handles.
  repeated string input = 3;
  bool cache_read = 4;
  bool cache_write = 5;
}

message CreateJobResponse {
  Job id = 1;
}

message CancelJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  Job job = 2;
}

message CancelJobResponse {}

message DeleteJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  Job job = 2;
}

message DeleteJobResponse {}

// TODO:
// - Filter
// - Paginate
message ListJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  // job is the job to start listing at.
  // If nil, then the listing starts at the first job in the natural ordering.
  Job job = 2;
}

// ListJobResponse lists information about Jobs
// ID will always be set.
// Info and Details may not be set depending on how much information was requested.
message ListJobResponse {
  Job id = 1;
  JobInfo info = 2;
  JobInfoDetails details = 3;
}

message WalkJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  // job is the job to start walking from.  If unset, the context Job is assumed.
  Job job = 2;
}

message InspectJobRequest {
  // context is a bearer token used when calling from within a running Job.
  string context = 1;
  // job is the job to start walking from.  If unset the context Job is assumed.
  Job job = 2;
}

message InspectJobResponse {
  JobInfoDetails details = 1;
}

// Queue Messages
// ProcessQueueRequest is the client -> server message for the bi-di ProcessQueue RPC.
message ProcessQueueRequest {
  // queue is set to start processing from a Queue.
  Queue queue = 1;

  // Success is set by the client to complete the Job successfully.
  message Success {
    // output is a list of fileset handles produced by a successful Job.
    repeated string output = 1;
  }

  // result must be set for the Job's output to be defined.
  // If the result is not set, the Job will error with DISCONNECTED.
  oneof result {
    Success success = 2;
    // failed is set by the client to fail the Job.
    // The Job will transition to state DONE with code FAILED.
    bool failed = 3;
  }
}

// ProcessQueueResposne is the server -> client message for the bi-di ProcessQueue RPC.
message ProcessQueueResponse {
  // context is a bearer token used to act on behalf of the Job in other RPCs.
  // The server issues this token to the client, and the client should use it when performing Job RPCs.
  string context = 1;
  // input is the input data for a Job.
  // The server sends this to ask the client to compute the output.
  repeated string input = 2;
}

// TODO:
// - Filter
// - Paginate
message ListQueueRequest {}

message ListQueueResponse {
  Queue id = 1;
  QueueInfo info = 2;
  QueueInfoDetails details = 3;
}

message InspectQueueRequest {
  Queue queue = 1;
}

message InspectQueueResponse {
  QueueInfoDetails details = 1;
}

## TODO: What is the "ID" field for inputs?
type PFSInput {
  name: String!
  repo: Repo!
}

type CronInput {
  name: String!
  repo: Repo!
}

type GitInput {
  name: String!
  url: String!
}

enum InputType {
  PFS
  CRON
  GIT
}

type Input {
  id: ID! # This will need to be assigned on the API side
  type: InputType!
  joinedWith: [String!]! # A flat representation of the input tree (list of PipelineInput ids)
  groupedWith: [String!]!
  crossedWith: [String!]!
  unionedWith: [String!]!
  pfsInput: PFSInput
  cronInput: CronInput
  gitInput: GitInput
}

# This enum is replaced with the one from pps on type generation
enum PipelineState {
  PIPELINE_STATE_UNKNOWN
  PIPELINE_STARTING
  PIPELINE_RUNNING
  PIPELINE_RESTARTING
  PIPELINE_FAILURE
  PIPELINE_PAUSED
  PIPELINE_STANDBY
  PIPELINE_CRASHING
}

# This enum is replaced with the one from pps on type generation
enum JobState {
  JOB_STATE_UNKNOWN
  JOB_CREATED
  JOB_STARTING
  JOB_RUNNING
  JOB_FAILURE
  JOB_SUCCESS
  JOB_KILLED
  JOB_EGRESSING
  JOB_FINISHING
}

enum NodeState {
  SUCCESS
  IDLE
  PAUSED
  BUSY
  ERROR
}

enum OriginKind {
  USER
  AUTO
  FSCK
  ALIAS
  ORIGIN_KIND_UNKNOWN
}

# This enum is replaced with the one from projects on type generation
enum ProjectStatus {
  HEALTHY
  UNHEALTHY
}

enum PipelineType {
  STANDARD
  SPOUT
  SERVICE
}

type Transform {
  cmdList: [String!]!
  image: String!
}

input TransformInput {
  cmdList: [String!]!
  image: String!
  stdinList: [String!]
}

type NodeSelector {
  key: String!
  value: String!
}

type SchedulingSpec {
  nodeSelectorMap: [NodeSelector!]!
  priorityClassName: String!
}

type Pipeline {
  id: ID!
  name: String!
  version: Int!
  createdAt: Int!
  state: PipelineState!
  stopped: Boolean!
  recentError: String
  lastJobState: JobState
  description: String
  type: PipelineType!
  datumTimeoutS: Int
  datumTries: Int!
  jobTimeoutS: Int
  outputBranch: String!
  s3OutputRepo: String
  egress: Boolean!
  jsonSpec: String!
  reason: String
}

type InputPipeline {
  id: ID!
}

type Branch {
  name: ID!
  repo: RepoInfo
}

type BranchInfo {
  branch: Branch
  head: Commit
}

type RepoInfo {
  name: String
  type: String
}

type Commit {
  repoName: String!
  branch: Branch
  description: String
  originKind: OriginKind
  hasLinkedJob: Boolean!
  id: ID!
  started: Int
  finished: Int
  sizeBytes: Float!
  sizeDisplay: String!
}

type Repo {
  branches: [Branch!]!
  createdAt: Int!
  description: String!
  id: ID!
  name: ID!
  sizeBytes: Float!
  sizeDisplay: String!

  # The Dash API will have to derive this field until core pach can expose it for us
  linkedPipeline: Pipeline
}

type Pach {
  id: ID!
}

type Job {
  id: ID!
  createdAt: Int
  startedAt: Int
  finishedAt: Int
  state: JobState!
  pipelineName: String!
  transform: Transform
  inputString: String
  inputBranch: String
  outputBranch: String
  reason: String
  jsonDetails: String!
  dataProcessed: Int!
  dataSkipped: Int!
  dataFailed: Int!
  dataRecovered: Int!
  dataTotal: Int!
}

enum NodeType {
  PIPELINE
  OUTPUT_REPO
  INPUT_REPO
  EGRESS
}

type Vertex {
  name: String!
  state: NodeState
  access: Boolean!
  parents: [String!]!
  type: NodeType!
  jobState: JobState
  createdAt: Int
}

input DagQueryArgs {
  projectId: ID!
  jobSetId: ID
}

input JobsQueryArgs {
  projectId: ID!
  limit: Int
  pipelineId: String
}

type Project {
  id: ID!
  name: String!
  status: ProjectStatus!
  description: String!
  createdAt: Int!
}

type ProjectDetails {
  repoCount: Int!
  pipelineCount: Int!
  sizeBytes: Float!
  sizeDisplay: String!
  jobSets: [JobSet!]!
}

enum FileType {
  RESERVED
  DIR
  FILE
}

type Timestamp {
  seconds: Int!
  nanos: Int!
}

type File {
  committed: Timestamp
  commitId: String!
  download: String
  hash: String!
  path: String!
  repoName: String!
  sizeBytes: Float!
  sizeDisplay: String!
  downloadDisabled: Boolean
  type: FileType!
}

input FileQueryArgs {
  projectId: String!
  commitId: String
  path: String
  repoName: String!
  branchName: String!
}

input ProjectDetailsQueryArgs {
  projectId: String!
  jobSetsLimit: Int
}

type Tokens {
  pachToken: String!
  idToken: String!
}

type Account {
  id: ID!
  email: String!
  name: String
}

type SearchResults {
  pipelines: [Pipeline!]!
  repos: [Repo!]!
  jobSet: JobSet
}

type AuthConfig {
  authEndpoint: String!
  clientId: String!
  pachdClientId: String!
}

type JobSet {
  id: ID!
  createdAt: Int
  state: JobState!
  jobs: [Job!]!
}

input PipelineQueryArgs {
  projectId: String!
  id: ID!
}

input PipelinesQueryArgs {
  projectId: String!
  jobSetId: ID
}

input BranchQueryArgs {
  projectId: String!
  branch: BranchInput!
}

input RepoQueryArgs {
  projectId: String!
  id: ID!
}

input ReposQueryArgs {
  projectId: String!
  jobSetId: ID
}

input CommitsQueryArgs {
  projectId: String!
  repoName: String!
  branchName: String
  pipelineName: String
  originKind: OriginKind
  number: Int
}

input SearchResultQueryArgs {
  projectId: String!
  query: String!
  limit: Int
}

input JobSetQueryArgs {
  id: ID!
  projectId: String!
}

input JobSetsQueryArgs {
  projectId: String!
}

input JobQueryArgs {
  id: ID!
  projectId: String!
  pipelineName: String!
}

input WorkspaceLogsArgs {
  start: Int
}

input LogsArgs {
  projectId: String!
  pipelineName: String!
  jobId: String
  start: Int
  reverse: Boolean
}

input CreateRepoArgs {
  name: String!
  description: String
  update: Boolean
  projectId: String!
}

input DeleteRepoArgs {
  repo: RepoInput!
  force: Boolean
  projectId: String!
}

input RepoInput {
  name: ID!
}

input PFS {
  name: String!
  repo: RepoInput!
  glob: String
  branch: String
}

input CreatePipelineArgs {
  name: String!
  transform: TransformInput!
  pfs: PFS
  crossList: [PFS!]
  projectId: String!
  description: String
  update: Boolean
}

input DeletePipelineArgs {
  name: String!
  projectId: String!
}

input CommitInput {
  id: ID!
  branch: BranchInput
}

input BranchInput {
  name: ID!
  repo: RepoInput!
}

input CreateBranchArgs {
  head: CommitInput
  branch: BranchInput
  provenance: [BranchInput!]
  newCommitSet: Boolean
  projectId: String!
}

input FileFromURL {
  url: String!
  path: String!
}

input PutFilesFromURLsArgs {
  files: [FileFromURL!]!
  branch: String!
  repo: String!
  projectId: String!
}

input DeleteFileArgs {
  filePath: String!
  repo: String!
  branch: String!
  force: Boolean
  projectId: String!
}

type Log {
  message: String!
  timestamp: Timestamp
  user: Boolean!
}

type Query {
  project(id: ID!): Project!
  projects: [Project!]!
  pipeline(args: PipelineQueryArgs!): Pipeline!
  repo(args: RepoQueryArgs!): Repo!
  pipelines(args: PipelinesQueryArgs!): [Pipeline]!
  repos(args: ReposQueryArgs!): [Repo]!
  projectDetails(args: ProjectDetailsQueryArgs!): ProjectDetails!
  jobs(args: JobsQueryArgs!): [Job!]!
  job(args: JobQueryArgs!): Job!
  dag(args: DagQueryArgs!): [Vertex!]!
  files(args: FileQueryArgs!): [File!]!
  account: Account!
  searchResults(args: SearchResultQueryArgs!): SearchResults!
  authConfig: AuthConfig!
  jobSet(args: JobSetQueryArgs!): JobSet!
  jobSets(args: JobSetsQueryArgs!): [JobSet!]!
  workspaceLogs(args: WorkspaceLogsArgs!): [Log]!
  logs(args: LogsArgs!): [Log]!
  commits(args: CommitsQueryArgs!): [Commit!]!
  branch(args: BranchQueryArgs!): Branch!
}

type Subscription {
  dags(args: DagQueryArgs!): [Vertex!]!
  workspaceLogs(args: WorkspaceLogsArgs!): Log!
  logs(args: LogsArgs!): Log!
}

type Mutation {
  exchangeCode(code: String!): Tokens!
  createRepo(args: CreateRepoArgs!): Repo!
  deleteRepo(args: DeleteRepoArgs!): Boolean
  createPipeline(args: CreatePipelineArgs!): Pipeline!
  deletePipeline(args: DeletePipelineArgs!): Boolean
  createBranch(args: CreateBranchArgs!): Branch!
  putFilesFromURLs(args: PutFilesFromURLsArgs!): [String!]!
  deleteFile(args: DeleteFileArgs!): ID!
}

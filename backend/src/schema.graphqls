## TODO: What is the "ID" field for inputs?
type PFSInput {
  name: String!
  repo: Repo!
}

type CronInput {
  name: String!
  repo: Repo!
}

type GitInput {
  name: String!
  url: String!
}

enum InputType {
  PFS
  CRON
  GIT
}

type Input {
  id: ID! # This will need to be assigned on the API side
  type: InputType!
  joinedWith: [String!]! # A flat representation of the input tree (list of PipelineInput ids)
  groupedWith: [String!]!
  crossedWith: [String!]!
  unionedWith: [String!]!
  pfsInput: PFSInput
  cronInput: CronInput
  gitInput: GitInput
}

# This enum is replaced with the one from pps on type generation
enum PipelineState {
  PIPELINE_STATE_UNKNOWN
  PIPELINE_STARTING
  PIPELINE_RUNNING
  PIPELINE_RESTARTING
  PIPELINE_FAILURE
  PIPELINE_PAUSED
  PIPELINE_STANDBY
  PIPELINE_CRASHING
}

# This enum is replaced with the one from pps on type generation
enum JobState {
  JOB_STATE_UNKNOWN
  JOB_CREATED
  JOB_STARTING
  JOB_RUNNING
  JOB_FAILURE
  JOB_SUCCESS
  JOB_KILLED
  JOB_EGRESSING
}

enum NodeState {
  SUCCESS
  IDLE
  PAUSED
  BUSY
  ERROR
}

# This enum is replaced with the one from projects on type generation
enum ProjectStatus {
  HEALTHY
  UNHEALTHY
}

enum PipelineType {
  STANDARD
  SPOUT
  SERVICE
}

type Transform {
  cmdList: [String!]!
  image: String!
}

type NodeSelector {
  key: String!
  value: String!
}

type SchedulingSpec {
  nodeSelectorMap: [NodeSelector!]!
  priorityClassName: String!
}

type Pipeline {
  id: ID!
  name: String!
  version: Int!
  createdAt: Int!
  state: PipelineState!
  stopped: Boolean!
  recentError: String
  numOfJobsCreated: Int!
  numOfJobsStarting: Int!
  numOfJobsRunning: Int!
  numOfJobsFailing: Int!
  numOfJobsSucceeding: Int!
  numOfJobsKilled: Int!
  numOfJobsEgressing: Int!
  lastJobState: JobState
  description: String
  type: PipelineType!
  datumTimeoutS: Int
  datumTries: Int!
  jobTimeoutS: Int
  outputBranch: String!
  s3OutputRepo: String
  egress: Boolean!
  jsonSpec: String!
}

type InputPipeline {
  id: ID!
}

type Branch {
  id: ID!
  name: ID!
}

type Commit {
  repoName: String!
  branch: Branch
  description: String
  id: ID!
  started: Int!
  finished: Int!
  sizeBytes: Int!
  sizeDisplay: String!
}

type Repo {
  branches: [Branch!]!
  commits: [Commit!]!
  createdAt: Int!
  description: String!
  id: ID!
  name: ID!
  sizeBytes: Int!
  sizeDisplay: String!

  # The Dash API will have to derive this field until core pach can expose it for us
  linkedPipeline: Pipeline
}

type Pach {
  id: ID!
}

type Job {
  id: ID!
  createdAt: Int
  startedAt: Int
  finishedAt: Int
  state: JobState!
  pipelineName: String!
  transform: Transform
  inputString: String
  inputBranch: String
  outputBranch: String
}

enum NodeType {
  PIPELINE
  OUTPUT_REPO
  INPUT_REPO
  EGRESS
}

type Node {
  id: ID!
  name: String!
  type: NodeType!
  x: Float!
  y: Float!
  state: NodeState
  access: Boolean!
}

type PointCoordinates {
  x: Float!
  y: Float!
}

type Link {
  id: ID!
  source: String!
  sourceState: NodeState
  targetState: NodeState
  target: String!
  state: JobState
  bendPoints: [PointCoordinates!]!
  startPoint: PointCoordinates!
  endPoint: PointCoordinates!
  transferring: Boolean!
}

type Dag {
  id: String!
  nodes: [Node!]!
  links: [Link!]!
}

input DagQueryArgs {
  projectId: ID!
  nodeWidth: Int!
  nodeHeight: Int!
  direction: DagDirection!
  jobSetId: ID
}

enum DagDirection {
  DOWN
  RIGHT
}

input JobsQueryArgs {
  projectId: ID!
  limit: Int
  pipelineId: String
}

type Project {
  id: ID!
  name: String!
  status: ProjectStatus!
  description: String!
  createdAt: Int!
}

type ProjectDetails {
  repoCount: Int!
  pipelineCount: Int!
  sizeBytes: Float!
  sizeDisplay: String!
  jobSets: [JobSet!]!
}

enum FileType {
  RESERVED
  DIR
  FILE
}

type Timestamp {
  seconds: Int!
  nanos: Int!
}

type File {
  committed: Timestamp
  commitId: String!
  download: String
  hash: String!
  path: String!
  repoName: String!
  sizeBytes: Float!
  sizeDisplay: String!
  downloadDisabled: Boolean
  type: FileType!
}

input FileQueryArgs {
  commitId: String
  path: String
  repoName: String!
  branchName: String!
}

input ProjectDetailsQueryArgs {
  projectId: String!
  jobSetsLimit: Int
}

type Tokens {
  pachToken: String!
  idToken: String!
}

type Account {
  id: ID!
  email: String!
  name: String
}

type SearchResults {
  pipelines: [Pipeline!]!
  repos: [Repo!]!
  jobSet: JobSet
}

type AuthConfig {
  authUrl: String!
  clientId: String!
  pachdClientId: String!
}

type JobSet {
  id: ID!
  createdAt: Int
  state: JobState!
  jobs: [Job!]!
}

input PipelineQueryArgs {
  projectId: String!
  id: ID!
}

input RepoQueryArgs {
  projectId: String!
  id: ID!
}

input SearchResultQueryArgs {
  projectId: String!
  query: String!
  limit: Int
}

input JobSetQueryArgs {
  id: ID!
  projectId: String!
}

input JobSetsQueryArgs {
  projectId: String!
}

input JobQueryArgs {
  id: ID!
  projectId: String!
  pipelineName: String!
}

input WorkspaceLogsArgs {
  start: Int
}

input LogsArgs {
  projectId: String!
  pipelineName: String!
  jobId: String
  start: Int
  reverse: Boolean
}

type Log {
  message: String!
  timestamp: Timestamp
  user: Boolean!
}

type Query {
  project(id: ID!): Project!
  projects: [Project!]!
  pipeline(args: PipelineQueryArgs!): Pipeline!
  repo(args: RepoQueryArgs!): Repo!
  projectDetails(args: ProjectDetailsQueryArgs!): ProjectDetails!
  jobs(args: JobsQueryArgs!): [Job!]!
  job(args: JobQueryArgs!): Job!
  dag(args: DagQueryArgs!): Dag!
  files(args: FileQueryArgs!): [File!]!
  account: Account!
  searchResults(args: SearchResultQueryArgs!): SearchResults!
  authConfig: AuthConfig!
  jobSet(args: JobSetQueryArgs!): JobSet!
  jobSets(args: JobSetsQueryArgs!): [JobSet!]!
  workspaceLogs(args: WorkspaceLogsArgs!): [Log]!
  logs(args: LogsArgs!): [Log]!
}

type Subscription {
  dags(args: DagQueryArgs!): [Dag!]!
  workspaceLogs(args: WorkspaceLogsArgs!): Log!
  logs(args: LogsArgs!): Log!
}

type Mutation {
  exchangeCode(code: String!): Tokens!
}

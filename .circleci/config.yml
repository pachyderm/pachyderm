version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+(-[a-z\d\-.]+)?$/

orbs:
    codecov: codecov/codecov@1.1.0
    pagerduty: fredbi/pagerduty@0.3.0
    browser-tools: circleci/browser-tools@1.2.3

jobs:
    backend-test:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.11.0
        steps:
            - checkout
            - run: make ci
            - run: cd backend && npm run lint
            - run: cd backend && npm run test -- --collect-coverage
            - codecov/upload:
                  file: backend/coverage/lcov.info
    frontend-test:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.11.0
        steps:
            - checkout
            - run: make ci
            - run: cd frontend && npm run lint
            - run: cd frontend && npm run test -- --collect-coverage
            - codecov/upload:
                  file: frontend/coverage/lcov.info
    e2e-test:
        resource_class: xlarge
        machine:
            image: ubuntu-2004:202111-01
        steps:
            - checkout
            - run: sudo sysctl fs.inotify.max_user_watches=524288
            - run: sudo sysctl -p
            - run: sudo apt-get update
            - run: sudo apt-get install -y libgbm-dev
            - run: npm ci
            - run: cd backend && npm ci
            - run: cd frontend && npm ci
            - run: npm run check-version
            - run: etc/testing/circle/install.sh
            - run: etc/testing/circle/start-minikube.sh
            - run: etc/testing/circle/deploy-pachyderm.sh
            - run: pachctl port-forward & CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e
    load-test:
        resource_class: xlarge
        machine:
            image: ubuntu-2004:202111-01
        steps:
            - checkout
            - run: sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
            - run: echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
            - run: sudo apt-get update
            - run: sudo apt-get install k6
            - run: make ci
            - run: etc/testing/circle/install.sh
            - run: etc/testing/circle/start-minikube.sh
            - run: etc/testing/circle/deploy-pachyderm.sh
            - run: npm run load-setup
            - run: pachctl port-forward & npm run load-test:ci
    build:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.11.0
        steps:
            - checkout
            - run: make ci
            - run: make build
    check-types:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.11.0
        steps:
            - checkout
            - run: make ci
            - run: make graphql
            - run: sh ./scripts/checkTypeChanges.sh
    docker-build:
        parameters:
            resource_class:
                type: string
        resource_class: << parameters.resource_class >>
        machine:
            image: ubuntu-2004:202101-01
        steps:
        - checkout
        - restore_cache:
            keys:
                - docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum "Makefile" }}
        - run:
            name: Build application Docker image
            command: |
                make circle-docker-build
        - save_cache:
            key: docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}}-{{ checksum "Makefile" }}
            paths:
                - /tmp/docker-cache
    docker-manifest:
        machine:
            image: ubuntu-2004:202101-01
        steps:
        - checkout
        - run:
            name: Create Multiarch Manifest
            command: |
                make circle-docker-manifest 
    pr_comment:
        docker:
            - image: cimg/ruby:2.7
        steps:
            - checkout
            - run:
                command: |
                    curl -sL https://raw.githubusercontent.com/stephencelis/ghi/master/ghi > ghi
                    chmod 755 ghi
                    sudo mv ghi /usr/local/bin
                name: Install GHI
            - run:
                command: |
                    if [[ -z "${GHI_TOKEN}" ]]; then
                      echo "GHI_TOKEN not set"
                      /bin/false
                    fi
                name: Check Token
            - run:
                command: |
                    GH_LOGIN=$(curl -sS -H "Authorization: token $GHI_TOKEN" https://api.github.com/user | jq '.login' --raw-output)
                    echo "Authenticated with $GH_LOGIN"
                    PR_URL=$CIRCLE_PULL_REQUEST
                    PR_ID=${PR_URL##*/}
                    echo "PR_ID=$PR_ID"
                    if [ -z $PR_ID ]; then
                      echo "No PR found, skipping"
                    else
                        ghi comment -m "You can create a workspace in staging for this pr with the following image tag: \`pachyderm/haberdashery:<< pipeline.git.revision >>\`" $PR_ID
                    fi
    # live-automation:
    #     resource_class: xlarge
    #     docker:
    #         - image: circleci/node:14.14.0-browsers
    #     steps:
    #         - checkout
    #         - run: cd live-automation && npm install
    #         - run:
    #               cd live-automation &&
    #               CYPRESS_RECORD_KEY=$LIVE_AUTOMATION_RECORD_KEY npm run
    #               test-and-report-production
    #         - store_artifacts:
    #               path: /tmp/cypress-screenshots
    #         - store_artifacts:
    #               path: /tmp/cypress-videos
    #         - store_artifacts:
    #               path: /tmp/cypress-network
    #         - pagerduty/notify:
    #               when: on_fail
    #               severity: critical
    #               component: production
    #               incident_title:
    #                   "Dash Live automation run against production failed"

workflows:
    version: 2
    test:
        when:
          not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        jobs:
            - backend-test
            - frontend-test
            - e2e-test
            - check-types
            - build
    load-test:
        when: 
          equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        jobs: 
          - load-test
    docker-build:
        jobs:
            - docker-build:
                matrix:
                    parameters:
                        resource_class:
                        - large
                        - arm.large 
            - docker-manifest:
                requires:
                - docker-build
            - pr_comment:
                requires:
                - docker-manifest
                filters:
                    branches:
                        ignore: master
    docker-release:
        jobs:
            - docker-build:
                filters: *only-release-tags
                matrix:
                    parameters:
                        resource_class:
                        - large
                        - arm.large 
            - docker-manifest:
                filters: *only-release-tags
                requires:
                - docker-build

    # live-automation:
    #     triggers:
    #         - schedule:
    #               cron: "10,30,50 * * * *"
    #               filters:
    #                   branches:
    #                       only: master
    #     jobs:
    #         - live-automation

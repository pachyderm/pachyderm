# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

orbs:
  go: circleci/go@1.6.0
  gcp-cli: circleci/gcp-cli@2.4.1

parameters:
  machine_image:
    type: string
    default: "ubuntu-2004:202201-02"
  run_flaky_tests:
    type: string
    default: ""
  retain_slots:
    type: string
    default: "0"
  RELEASE_PACH_CORE:
    type: boolean
    default: false
  RELEASE_TYPE:
    type: string
    default: ""
  ADDITIONAL_VERSION:
    type: string
    default: ""

jobs:
  circleci:
    parameters:
      bucket:
        type: string
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      PPS_BUCKETS: "6"
      GOPROXY: https://proxy.golang.org
      BUCKET: << parameters.bucket >>
    steps:
      - checkout
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
            - pach-build-dependencies-v2-
      - run: etc/testing/circle/install.sh
      - save_cache:
          key: pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
          paths:
            - cached-deps/
      - run:
          name: Start minikube
          command: etc/testing/circle/start-minikube.sh
          background: true
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh
      - when: #Save cache in only one bucket, after build and before running tests, this ensures build cache is saved even when tests fail
          condition:
            equal: [MISC, <<parameters.bucket>>]
          steps:
            - save_cache:
                key: pach-go-mod-cache-v2-{{ checksum "go.sum" }}
                paths:
                  - /home/circleci/.go_workspace/pkg/mod
            - save_cache:
                key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
                paths:
                  - /home/circleci/.gocache
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Collect kube events
          command: ./cached-deps/kubectl get events -o wide --watch --all-namespaces | ts '%Y-%m-%dT%H:%M:%S'
          background: true
      - run: etc/testing/circle/launch.sh
      - run:
          no_output_timeout: 20m
          command: etc/testing/circle/run_tests.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run: etc/testing/circle/upload_stats.sh
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  helm-build:
    docker:
      - image: cimg/go:1.17.6
    working_directory: ~/project/etc/helm
    steps:
      - checkout:
          path: ~/project
      - run: mkdir /home/circleci/bin
      - restore_cache:
          keys:
            - go-mod-helm-v4-{{ checksum "go.sum" }}
      - run: wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      - run: wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -O - | tar -xzO kubeval > /home/circleci/bin/kubeval && chmod +x /home/circleci/bin/kubeval
      - run: make lint
      - run: make test
      - run: make kubeval-gcp
      - run: make kubeval-aws
      - save_cache:
          key: go-mod-helm-v4-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
  helm-publish:
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - run: wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      # Set CR_Token to GH Personal Access Token (Found in pachydermbuildbot GH Acount)
      # The cr index step below will commit back to the repo (via https + GH Token) need to configure git for the commit
      - run: git config --global user.email buildbot@pachyderm.io
      - run: git config --global user.name buildbot
      - run:
          name: Clone Pachyderm
          command: git clone -b ${CIRCLE_TAG} --depth 1 https://github.com/pachyderm/pachyderm.git pachyderm
      - run:
          # the helmchart git repo hosts the helm repository (gh-pages) Chart releaser only supports https clone, not ssh
          name: Clone Helmchart
          command: git clone https://github.com/pachyderm/helmchart.git helmchart
      - run: mkdir -p .cr-release-packages
      - run: helm package -d .cr-release-packages/ --version ${CIRCLE_TAG:1} pachyderm/etc/helm/pachyderm # cr package did not work with embedded chart
      - run: cr upload -o pachyderm -r helmchart --skip-existing
      - run: cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../.cr-release-packages --push
  load_test:
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      GOOGLE_PROJECT_ID: build-release-001
      GOOGLE_COMPUTE_ZONE: us-east1-b
      GOOGLE_COMPUTE_REGION: us-east1
    steps:
      - checkout
      - gcp-cli/initialize
      - run: |
          echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run: etc/testing/circle/install.sh
      - run: etc/testing/circle/start-minikube.sh
      - run: etc/testing/circle/build.sh
      - run: etc/testing/circle/launch.sh
      - run: etc/testing/circle/run_load_tests.sh
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  nightly_load:
    parameters:
      bucket:
        type: string
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      BUCKET: << parameters.bucket >>
      GOOGLE_PROJECT_ID: build-release-001
      GOOGLE_COMPUTE_ZONE: us-east1-b
      GOOGLE_COMPUTE_REGION: us-east1
    steps:
      - checkout
      - gcp-cli/initialize
      - run: |
          echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run: etc/testing/circle/install.sh
      - run: etc/testing/circle/start-minikube.sh
      - run: etc/testing/circle/build.sh
      - run: etc/testing/circle/launch.sh
      - run:
          command: etc/testing/circle/run_all_load_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  rootless:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run: etc/testing/circle/install.sh
      - run: etc/testing/circle/rootless_test.sh
  deploy:
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run: etc/testing/circle/install.sh
      - run: etc/testing/circle/start-minikube.sh
      - run: etc/testing/circle/build.sh
      - run: etc/testing/circle/deploy_test.sh
  # build pachctl and push to GCS bucket, so that it can be bundled into the
  # Jupyter-Pachyderm extension
  build:
    resource_class: large
    docker:
      - image: cimg/go:1.17.6
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            wget https://github.com/chainlink/gcsupload/releases/download/v0.2.0/gcsupload_0.2.0_Linux_x86_64.tar.gz
            tar zxvf gcsupload_0.2.0_Linux_x86_64.tar.gz -C /home/circleci/bin gcsupload
            rm -rf gcsupload_0.2.0_Linux_x86_64.tar.gz
            echo 'export PATH=/home/circle/bin:$PATH' >> $BASH_ENV
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker
          command: make docker-build VERSION=$CIRCLE_SHA1
      - run:
          name: Push docker
          command: make docker-push VERSION=$CIRCLE_SHA1
      - run:
          name: Make release
          command: make release-pachctl GORELSNAP=--snapshot VERSION=$CIRCLE_SHA1
      - run:
          name: Upload Pachctl Release
          command: |
            echo $PACHCTL_GOOGLE_UPLOAD_CREDS > /home/circleci/gcpcreds.json
            cd /home/circleci/dist-pach/pachctl/
            gcsupload -b pachyderm-builds -f `find * -name \*.tar.gz` -k /home/circleci/gcpcreds.json
            rm /home/circleci/gcpcreds.json
  release_job:
    docker:
      - image: cimg/go:1.17.3
    steps:
      - checkout
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: pull pachyderm/etcd:v3.5.1 docker image
          command: |
            docker pull pachyderm/etcd:v3.5.1
      - run:
          name: install goreleaser
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            echo 'export PATH=/home/circle/bin:$PATH' >> $BASH_ENV
      - add_ssh_keys:
          fingerprints:
            - "4c:1c:ff:56:c1:d0:07:03:23:08:08:2e:e6:16:30:1d"
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - when:
          condition:
            and:
              - equal: [custom, << pipeline.parameters.RELEASE_TYPE >>]
          steps:
            - run:
                name: make custom-release
                command: |
                  make custom-release
      - when:
          condition:
            and:
              - equal: [point, << pipeline.parameters.RELEASE_TYPE >>]
          steps:
            - run:
                name: make point-release
                command: |
                  make point-release
      - when:
          condition:
            and:
              - equal: [candidate, << pipeline.parameters.RELEASE_TYPE >>]
          steps:
            - run:
                name: make release-candidate
                command: |
                  make VERSION_ADDITIONAL=<< pipeline.parameters.ADDITIONAL_VERSION >> release-candidate
  check-prettier:
    docker:
      - image: cimg/node:16.11.0
    steps:
      - checkout
      - run: sudo npm install -g prettier
      - run: prettier -c etc/helm/pachyderm/values.yaml .circleci/config.yml
  test-envoy:
    docker:
      - image: envoyproxy/envoy:v1.22.0
        entrypoint: /bin/sh
    steps:
      - run: apt update
      - run: apt install -y make wget git ssh
      - checkout
      - run: wget https://github.com/google/jsonnet/releases/download/v0.17.0/jsonnet-bin-v0.17.0-linux.tar.gz
      - run: tar xzvf jsonnet-bin-v0.17.0-linux.tar.gz
      - run: mv jsonnet jsonnetfmt /usr/local/bin
      - run: make -C etc/generate-envoy-config test
  push_redhat:
    docker:
      - image: cimg/go:1.17.3
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Install Goreleaser
          command: |
            curl -Lo - https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz | sudo tar -C /usr/local/bin -xvzf - goreleaser
      - run: etc/redhat/push_images.sh
workflows:
  circleci:
    when:
      and:
        - not: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - build
      - check-prettier
      - test-envoy
      - circleci:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS_AUTH
                - EXAMPLES
                - INTERNAL
  helm:
    when:
      and:
        - not: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - helm-build:
          filters:
            # Note: Not ignoring branches, so will be run on branches as well as tags
            tags:
              only: /^v\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
      - helm-publish:
          requires:
            - helm-build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
  load_tests:
    when:
      and:
        - not: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - load_test
  nightly_load_tests:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
                - 2.1.x
                - 2.2.x
    jobs:
      - nightly_load:
          matrix:
            parameters:
              bucket:
                - LOAD1
                - LOAD2
                - LOAD3
                - LOAD4
                - LOAD5
                - LOAD6
                - LOAD7
  rootless:
    when:
      and:
        - not: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - rootless
  deploy:
    when:
      and:
        - not: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - deploy
  pach_core_release:
    when: << pipeline.parameters.RELEASE_PACH_CORE >>
    jobs:
      - release_job:
          filters:
            branches:
              only:
                - 2.1.x
                - 2.2.x
  red_hat:
    jobs:
      - push_redhat:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/

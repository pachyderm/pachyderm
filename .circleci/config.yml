version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+(-[a-z\d\-.]+)?$/

orbs:
  codecov: codecov/codecov@1.1.0
  browser-tools: circleci/browser-tools@1.2.3
  gh: circleci/github-cli@2.1.1
  jq: circleci/jq@2.2.0

parameters:
  working-pachyderm-version:
    type: string
    default: '2.6.0'
  run_nightly_tag:
    type: boolean
    default: false

executors:
  small-node:
    resource_class: small
    docker:
      - image: cimg/node:18.16.0
  medium-node:
    resource_class: medium
    docker:
      - image: cimg/node:18.16.0
  xlarge-node:
    resource_class: xlarge
    docker:
      - image: cimg/node:18.16.0

commands:
  node-install-all:
    steps:
      - run:
          name: Npm install project root, frontend and backend
          command: npm ci && npm ci --prefix ./backend && npm ci --prefix ./frontend
  node-install-frontend-backend:
    steps:
      - run:
          name: Npm install frontend and backend
          command: npm ci --prefix ./backend && npm ci --prefix ./frontend
  install-pachyderm-dependencies:
    steps:
      - run:
          name: Install Pachyderm Dependencies
          command: |
            etc/testing/circle/install.sh
            etc/testing/circle/start-kind.sh
  run-pachyderm-ce:
    steps:
      - gh/setup:
          version: 2.20.2
      - install-pachyderm-dependencies
      - run:
          name: Deploy Pachyderm CE (Proxy)
          command: etc/testing/circle/deploy-pachyderm.sh
  run-pachyderm-ee:
    steps:
      - gh/setup:
          version: 2.20.2
      - install-pachyderm-dependencies
      - run:
          name: Deploy Pachyderm EE (Proxy)
          command: etc/testing/circle/deploy-pachyderm-enterprise-proxy.sh
  run-pachyderm-with-console:
    steps:
      - gh/setup:
          version: 2.20.2
      - install-pachyderm-dependencies
      - run:
          name: Deploy Pachyderm With Console (Proxy)
          command: etc/testing/circle/deploy-pachyderm-with-console.sh
  activate-pachyderm-enterprise:
    steps:
      - run:
          name: Activate Pachyderm Enterprise
          command: echo $PACHYDERM_ENTERPRISE_KEY | pachctl license activate

jobs:
  components-storybook-release:
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - run: sudo npm install -g netlify-cli@14.4.0
      - run: .circleci/scripts/upload-storybook.sh

  lint-frontend:
    executor: small-node
    steps:
      - checkout
      - run: cd frontend && npm ci
      - run: cd frontend && npm run lint:js:no-fix
  lint-graphql-validate-generation:
    executor: small-node
    steps:
      - checkout
      - node-install-all
      - run:
          name: Generate graphQL types and compare the diff of the generated types.
          command: |
            make graphql
            sh ./scripts/checkTypeChanges.sh
  lint-backend:
    executor: small-node
    steps:
      - checkout
      - run: cd backend && npm ci
      - run: cd backend && npm run lint:no-fix
  lint-cypress:
    executor: small-node
    steps:
      - checkout
      - run: npm ci --prefix cypress
      - run: npm run lint --prefix cypress
  test-backend:
    executor: xlarge-node
    steps:
      - checkout
      - node-install-frontend-backend
      - run: npm run test --prefix backend -- --coverage
      - codecov/upload:
          file: ./backend/coverage/lcov.info
  test-backend-integration:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202111-01
    steps:
      - checkout
      - run: cd backend && npm ci
      - run-pachyderm-ce
      - run: npm run integration-test --prefix backend -- --coverage
      - codecov/upload:
          file: ./backend/coverage/lcov.info
  test-frontend-components:
    executor: xlarge-node
    steps:
      - checkout
      - node-install-frontend-backend
      - run: npm run test:components --prefix frontend
  test-frontend-react:
    executor: xlarge-node
    steps:
      - checkout
      - node-install-frontend-backend
      - run: npm run test:frontend --prefix frontend -- --coverage
      - codecov/upload:
          file: ./frontend/src/coverage/lcov.info

  test-e2e-mock:
    resource_class: large
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - node-install-all
      - run:
          name: Run mock backend Cypress tests
          command: CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e:local-mock
      - store_artifacts:
          path: /tmp/cypress-screenshots
      - store_artifacts:
          path: /tmp/cypress-videos
  test-e2e-community-edition:
    resource_class: xlarge
    parallelism: 3
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - node-install-all
      - run-pachyderm-ce
      - run:
          name: Run Community Edition Cypress tests
          command: CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e
      - store_artifacts:
          path: /tmp/cypress-screenshots
      - store_artifacts:
          path: /tmp/cypress-videos
  test-e2e-enterprise-edition:
    resource_class: xlarge
    parallelism: 3
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - node-install-all
      - run-pachyderm-ee
      - run:
          name: Run Enterprise Edition Cypress tests
          command: CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e-auth
      - store_artifacts:
          path: /tmp/cypress-screenshots
      - store_artifacts:
          path: /tmp/cypress-videos

  build:
    resource_class: small
    docker:
      - image: cimg/node:18.16.0
    steps:
      - checkout
      - node-install-all
      - run: make build
  docker-build:
    parameters:
      resource_class:
        type: string
    resource_class: << parameters.resource_class >>
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum "Makefile" }}
      - run:
          name: Build application Docker image
          command: |
            make circle-docker-build
      - save_cache:
          key: docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum "Makefile" }}
          paths:
            - /tmp/docker-cache
  docker-manifest:
    machine:
      image: ubuntu-2004:202101-01
    steps:
      - checkout
      - run:
          name: Create Multiarch Manifest
          command: |
            make circle-docker-manifest

  preview:
    docker:
      - image: node:18.16.0
    steps:
      - checkout
      - jq/install
      - run:
          name: Comment on PR
          command: |
            export GH_ACCESS_TOKEN=${GHI_TOKEN}
            PACHYDERM_VERSION=$(jq -r .pachyderm ./version.json)
            RELEASE_COMMIT=$(jq -r .pachReleaseCommit ./version.json)
            wget https://github.com/chainlink/onecomment/releases/download/v0.2.0/onecomment_0.2.0_Linux_x86_64.tar.gz
            tar xvf onecomment_0.2.0_Linux_x86_64.tar.gz

            # Setup GH token env var in circle project
            ./onecomment -pr-id ${CIRCLE_PULL_REQUEST##*/} \
            -owner pachyderm -repo haberdashery \
            -includes '' \
            -message "Install a Console image of this branch locally with:

            <details><summary>Proxy</summary>

            \`\`\`bash
            helm repo add pachyderm https://pachyderm.github.io/helmchart
            helm repo update
            helm uninstall pachd

            helm install \\
              --wait --timeout 10m pachd pach/pachyderm \\
              --version=$PACHYDERM_VERSION \\
              --set deployTarget=LOCAL \\
              --set console.image.tag=<<pipeline.git.revision>> \\
              --set console.config.disableTelemetry=true \\
              --set pachd.image.tag=$RELEASE_COMMIT \\
              --set proxy.enabled=true \\
              --set proxy.host=localhost \\
              --set proxy.service.type=LoadBalancer

            echo '{\"pachd_address\": \"grpc://127.0.0.1:80\"}' | pachctl config set context local --overwrite
            pachctl config set active-context local
            echo \"Verify pachctl is working with: pachctl version\"
            \`\`\`

            </details>
            "

  test-docker-console-can-render:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202201-02
    steps:
      - checkout
      - run: npm ci
      - run-pachyderm-with-console
      - run: touch .env.development.local
      - run:
          name: Run 'Build' Cypress tests
          command: CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run cypress:ci-build
      - store_artifacts:
          path: /tmp/cypress-screenshots
      - store_artifacts:
          path: /tmp/cypress-videos

  create-nightly-tag:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '21:6b:bd:d2:06:57:1f:fa:79:33:e3:dd:1a:63:5e:ed'
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - run:
          name: create nightly tag
          command: |
            TIMESTAMP=$(date +'%Y%m%d')
            WORKINGVERSION=<< pipeline.parameters.working-pachyderm-version >>
            NIGHTLY=${WORKINGVERSION}-nightly.${TIMESTAMP}
            git tag -am "nightly release tag ${NIGHTLY}" ${NIGHTLY}
            git push origin ${NIGHTLY}

workflows:
  version: 2
  test:
    when:
      and:
        - not:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - not: << pipeline.parameters.run_nightly_tag >>
    jobs:
      - lint-backend
      - lint-frontend
      - lint-cypress
      - lint-graphql-validate-generation
      - build
      - test-backend
      - test-backend-integration
      - test-frontend-components
      - test-frontend-react
      - test-e2e-community-edition
      - test-e2e-enterprise-edition
      - test-e2e-mock

  storybook-release:
    when:
      and:
        - not: << pipeline.parameters.run_nightly_tag >>
    jobs:
      - components-storybook-release:
          filters:
            branches:
              only: master

  create-nightly-tag:
    when: << pipeline.parameters.run_nightly_tag >>
    jobs:
      - create-nightly-tag

  docker-build:
    when:
      and:
        - not: << pipeline.parameters.run_nightly_tag >>
    jobs:
      - docker-build:
          matrix:
            parameters:
              resource_class:
                - large
                - arm.large
      - docker-manifest:
          requires:
            - docker-build
      - preview:
          requires:
            - docker-manifest
          filters:
            branches:
              ignore:
                - master
                # Match against 2.6.x, 2.7.x, etc
                - /\d\.\d\.x/
      - test-docker-console-can-render:
          requires:
            - docker-manifest
  docker-release:
    jobs:
      - docker-build:
          filters: *only-release-tags
          matrix:
            parameters:
              resource_class:
                - large
                - arm.large
      - docker-manifest:
          filters: *only-release-tags
          requires:
            - docker-build

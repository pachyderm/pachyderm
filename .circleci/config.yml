version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+(-[a-z\d\-.]+)?$/

orbs:
    codecov: codecov/codecov@1.1.0
    pagerduty: fredbi/pagerduty@0.3.0
    browser-tools: circleci/browser-tools@1.2.3

jobs:
    components-storybook-release:
        docker:
            - image: cimg/node:16.11.0
        steps:
            - checkout
            - run: .circleci/scripts/upload-storybook.sh
    backend-test:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.14.2
        steps:
            - checkout
            - run: make ci
            - run: cd backend && npm run lint
            - run: cd backend && npm run test -- --collect-coverage
            - codecov/upload:
                  file: backend/coverage/lcov.info
    frontend-test:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.14.2
        steps:
            - checkout
            - run: make ci
            - run: cd frontend && npm run lint
            - run: cd frontend && npm run test -- --collect-coverage
            - codecov/upload:
                  file: frontend/coverage/lcov.info
    e2e-mock-test:
        resource_class: xlarge
        machine:
            image: ubuntu-2004:202201-02
        steps:
            - checkout
            - run: make ci
            - run: make launch-mock & CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run cypress:ci-mock
            - store_artifacts:
                  path: /tmp/cypress-screenshots
            - store_artifacts:
                  path: /tmp/cypress-videos
    e2e-test:
        resource_class: xlarge
        machine:
            image: ubuntu-2004:202201-02
        steps:
            - checkout
            - run: sudo sysctl fs.inotify.max_user_watches=524288
            - run: sudo sysctl -p
            - run: sudo apt-get update
            - run: sudo apt-get install -y libgbm-dev
            - run: npm ci
            - run: cd backend && npm ci
            - run: cd frontend && npm ci
            - run: etc/testing/circle/install.sh
            - run: etc/testing/circle/start-kind.sh
            - run: etc/testing/circle/deploy-pachyderm.sh
            - run: echo $PACHYDERM_ENTERPRISE_KEY | pachctl license activate
            - run: touch .env.development.local
            - run: make setup-ci-auth
            - run: pachctl port-forward & CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e-auth
            - run: (yes || true) | pachctl auth deactivate
            - run: pachctl enterprise deactivate
            - run: pachctl port-forward & CI=true CYPRESS_RECORD_KEY=$CONSOLE_CYPRESS_RECORD_KEY npm run e2e
            - store_artifacts:
                  path: /tmp/cypress-screenshots
            - store_artifacts:
                  path: /tmp/cypress-videos
    load-test:
        resource_class: xlarge
        machine:
            image: ubuntu-2004:202111-01
        steps:
            - checkout
            - run: sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
            - run: echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
            - run: sudo apt-get update
            - run: sudo apt-get install k6
            - run: make ci
            - run: etc/testing/circle/install.sh
            - run: etc/testing/circle/start-kind.sh
            - run: etc/testing/circle/deploy-pachyderm.sh
            - run: echo $PACHYDERM_ENTERPRISE_KEY | pachctl license activate
            - run: touch .env.development.local
            - run: make setup-ci-auth
            - run: npm run load-setup
            - run: pachctl port-forward & npm run load-test:ci
    build:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.14.2
        steps:
            - checkout
            - run: make ci
            - run: make build
    check-types:
        resource_class: xlarge
        docker:
            - image: cimg/node:16.14.2
        steps:
            - checkout
            - run: make ci
            - run: make graphql
            - run: sh ./scripts/checkTypeChanges.sh
    docker-build:
        parameters:
            resource_class:
                type: string
        resource_class: << parameters.resource_class >>
        machine:
            image: ubuntu-2004:202101-01
        steps:
        - checkout
        - restore_cache:
            keys:
                - docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum "Makefile" }}
        - run:
            name: Build application Docker image
            command: |
                make circle-docker-build
        - save_cache:
            key: docker-cache-{{ arch }}-{{ .Branch }}-{{ checksum "Dockerfile" }}-{{ checksum "Makefile" }}
            paths:
                - /tmp/docker-cache
    docker-manifest:
        machine:
            image: ubuntu-2004:202101-01
        steps:
        - checkout
        - run:
            name: Create Multiarch Manifest
            command: |
                make circle-docker-manifest
    preview:
        docker:
            - image: node:16.14.2
        steps:
            - checkout
            - run:
                name: Curl helium for preview env
                command: |
                  curl --fail -X POST -H "Authorization: Bearer ${HELIUM_API_TOKEN}" -F name="console-${CIRCLE_BRANCH}" -F consoleVersion="<<pipeline.git.revision>>" -F expiry="$(date "+%Y-%m-%d" --date="14 days")" -F backend=gcp_namespace_only -F clusterStack="pachyderm/helium/console-preview-cluster" https://helium.pachyderm.io/v1/api/workspace
            - run:
                name: Comment on PR
                command: |
                  export GH_ACCESS_TOKEN=${GHI_TOKEN}
                  wget https://github.com/chainlink/onecomment/releases/download/v0.2.0/onecomment_0.2.0_Linux_x86_64.tar.gz
                  tar xvf onecomment_0.2.0_Linux_x86_64.tar.gz

                  # Setup GH token env var in circle project
                  ./onecomment -pr-id ${CIRCLE_PULL_REQUEST##*/} \
                  -owner pachyderm -repo haberdashery \
                  -includes '<!-- Created by one-comment -->' \
                  -message "PR Preview available at [https://console-$CIRCLE_BRANCH.workspace.pachyderm.com](https://console-$CIRCLE_BRANCH.workspace.pachyderm.com)  and [https://helium.pachyderm.io/get/console-$CIRCLE_BRANCH](https://helium.pachyderm.io/get/console-$CIRCLE_BRANCH)"
    redhat-release:
        docker:
          - image: cimg/base:2022.04
        steps:
          - checkout
          - setup_remote_docker:
              docker_layer_caching: true
              version: "20.10.12"
          - run: etc/redhat/push_images.sh
  # live-automation:
  #     resource_class: xlarge
  #     docker:
  #         - image: circleci/node:14.14.0-browsers
  #     steps:
  #         - checkout
  #         - run: cd live-automation && npm install
  #         - run:
  #               cd live-automation &&
  #               CYPRESS_RECORD_KEY=$LIVE_AUTOMATION_RECORD_KEY npm run
  #               test-and-report-production
  #         - store_artifacts:
  #               path: /tmp/cypress-screenshots
  #         - store_artifacts:
  #               path: /tmp/cypress-videos
  #         - store_artifacts:
  #               path: /tmp/cypress-network
  #         - pagerduty/notify:
  #               when: on_fail
  #               severity: critical
  #               component: production
  #               incident_title:
  #                   "Dash Live automation run against production failed"

workflows:
    version: 2
    test:
        when:
            not:
                equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        jobs:
            - backend-test
            - frontend-test
            - e2e-test
            - e2e-mock-test
            - check-types
            - build
    storybook-release:
        jobs:
            - components-storybook-release:
                  filters:
                      branches:
                          only: master
    load-test:
        when:
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        jobs:
            - load-test
    docker-build:
        jobs:
            - docker-build:
                matrix:
                    parameters:
                        resource_class:
                        - large
                        - arm.large
            - docker-manifest:
                requires:
                - docker-build
            - preview:
                requires:
                - docker-manifest
                filters:
                    branches:
                        ignore: master
    docker-release:
        jobs:
            - docker-build:
                filters: *only-release-tags
                matrix:
                    parameters:
                        resource_class:
                        - large
                        - arm.large
            - docker-manifest:
                filters: *only-release-tags
                requires:
                - docker-build
            - redhat-release:
                filters: *only-release-tags

    # live-automation:
    #     triggers:
    #         - schedule:
    #               cron: "10,30,50 * * * *"
    #               filters:
    #                   branches:
    #                       only: master
    #     jobs:
    #         - live-automation

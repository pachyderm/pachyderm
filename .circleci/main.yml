# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      # will ignore nightly
      only: /^v\d+\.\d+\.\d+(-(?!nightly)[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
  - &only-nightly-tags
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+-(nightly)+(\.[0-9A-Za-z-]+)*?$/
  - &only-alpha-tags
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+-alpha+(\.[0-9A-Za-z-]+)*?$/

orbs:
  go: circleci/go@1.7.1
  gcp-cli: circleci/gcp-cli@2.4.1
  gh: circleci/github-cli@2.1
  codecov: codecov/codecov@1.1.0
  pulumi: pulumi/pulumi@2.1.0
  aws-cli: circleci/aws-cli@3.1.1
  node: circleci/node@5.0.2
  kubernetes: circleci/kubernetes@1.3.0
  aws-eks: circleci/aws-eks@2.2.0

parameters:
  machine_image:
    type: string
    default: ubuntu-2204:2022.10.1
  go-version:
    type: string
    default: "1.20.2"
  run_load_tests:
    type: boolean
    default: false
  run-jupyter-jobs:
    type: boolean
    default: false
  run-core-jobs:
    type: boolean
    default: false
executors:
  docker-go:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
  python:
    docker:
      - image: cimg/python:3.10-node

jobs:
  test-go:
    machine:
      image: << pipeline.parameters.machine_image >>
    resource_class: xlarge
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go-version >>
      - run: mkdir ${TEST_RESULTS}
      - run: go install gotest.tools/gotestsum@latest
      - run: CGO_ENABLED=0 go install ./src/server/cmd/pachctl
      - run: go install ./src/testing/match
      - restore_cache:
          keys:
            - pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
      - run: etc/testing/circle/install.sh
      - run:
          no_output_timeout: 20m
          command: |-
            GOMAXPROCS=8 CGO_ENABLED=0 KUBECONFIG=/dev/null PACH_CONFIG=/dev/null \
            gotestsum \
            --junitfile ${TEST_RESULTS}/gotestsum-report.xml \
            --rerun-fails \
            --packages="./..." \
            -- \
            -tags=unit_test \
            -count=1 \
            -coverprofile=${TEST_RESULTS}/coverage.txt -covermode=atomic -coverpkg=./...
      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
      - codecov/upload:
          file: /tmp/test-results/coverage.txt
      - save_cache:
          key: pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
  test-pps:
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      TEST_RESULTS: /tmp/test-results
      GOPROXY: https://proxy.golang.org
    parallelism: 8
    steps:
      - checkout
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run: mkdir -p ${TEST_RESULTS}
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - run: go install gotest.tools/gotestsum@latest
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - go/install:
          version: << pipeline.parameters.go-version >>
      - wait-for-docker
      - start-minikube
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      # Try running go mod download to pull the rest of the deps
      - run: go mod download
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Install minio
          command: kubectl apply -f etc/testing/minio.yaml
      - run:
          name: Install prom # Make Launch stats
          command: kubectl apply --filename etc/kubernetes-prometheus -R
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run:
          name: run tests
          no_output_timeout: 20m
          command: |
            PROM_PORT=$(kubectl --namespace=monitoring get svc/prometheus -o json | jq -r .spec.ports[0].nodePort)
            export PROM_PORT

            bucket_num=$CIRCLE_NODE_INDEX
            num_buckets=$CIRCLE_NODE_TOTAL
            package="./src/server"
            test_tags="k8s"

            tests=( $(go test -v -tags="${test_tags}"  "${package}" -list ".*" | grep -v '^ok' | grep -v '^Benchmark') )
            # Add anchors for the regex so we don't run collateral tests
            tests=( "${tests[@]/#/^}" )
            tests=( "${tests[@]/%/\$\$}" )
            total_tests="${#tests[@]}"

            # Determine the offset and length of the sub-array of tests we want to run
            # The last bucket may have a few extra tests, to accommodate rounding
            # errors from bucketing:
            let "bucket_size=total_tests/num_buckets" \
              "start=bucket_size * (bucket_num-1)" \
              "bucket_size+=bucket_num < num_buckets ? 0 : total_tests%num_buckets"

            test_regex="$(IFS=\|; echo "${tests[*]:start:bucket_size}")"

            echo $test_regex

            gotestsum \
              --junitfile ${TEST_RESULTS}/gotestsum-report.xml \
              --rerun-fails \
              --format testname \
              --packages="${package}" \
              -- \
              -run ${test_regex} \
              -tags="${test_tags}" \
              -count=1 \
              -coverprofile=${TEST_RESULTS}/coverage.txt -covermode=atomic -coverpkg=./...
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  integration-tests:
    parameters:
      bucket:
        type: string
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      GOPROXY: https://proxy.golang.org
      BUCKET: << parameters.bucket >>
    steps:
      - checkout
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ arch }}-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - save_cache:
          key: pach-build-dependencies-v2-{{ arch }}-{{ checksum "etc/testing/circle/install.sh" }}
          paths:
            - cached-deps/
      - go/install:
          version: << pipeline.parameters.go-version >>
      - wait-for-docker
      - start-minikube
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ arch }}-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ arch }}-{{ checksum "go.sum" }}
      - run: make install # Install pachctl
      #Save cache in only one bucket, after build and before running tests,
      #this ensures build cache is saved even when tests fail
      - when:
          condition:
            equal: [MISC, <<parameters.bucket>>]
          steps:
            - save_cache:
                key: pach-go-mod-cache-v2-{{ arch }}-{{ checksum "go.sum" }}
                paths:
                  - /home/circleci/.go_workspace/pkg/mod
            - save_cache:
                key: pach-go-build-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "current_week" }}
                paths:
                  - /home/circleci/.gocache
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Collect kube events
          command: kubectl get events -o wide --watch --all-namespaces | ts '%Y-%m-%dT%H:%M:%S'
          background: true
      - run:
          name: Install minio
          command: kubectl apply -f etc/testing/minio.yaml
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run:
          no_output_timeout: 20m
          command: etc/testing/circle/run_tests.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  helm-tests:
    executor: docker-go
    working_directory: ~/project/etc/helm
    steps:
      - checkout:
          path: ~/project
      - run: mkdir -p /home/circleci/bin
      - restore_cache:
          keys:
            - go-mod-helm-v4-{{ checksum "go.sum" }}
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      - run:
          name: install kubeval
          command: |
            wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -O - | tar -xzO kubeval > /home/circleci/bin/kubeval && chmod +x /home/circleci/bin/kubeval
      - run: make lint
      - run: make test
      - run: make kubeval-gcp
      - run: make kubeval-aws
      - save_cache:
          key: go-mod-helm-v4-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"
  helm-build:
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - checkout
      - run:
          name: install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/v4.23.1/yq_linux_amd64
            mv yq_linux_amd64 /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      - run:
          name: make cr release dirs
          command: |
            mkdir -p cr-release-packages/official
            mkdir -p cr-release-packages/preview
      - run:
          name: package release helm chart
          command: |
            helm package -d cr-release-packages/official --version ${CIRCLE_TAG:1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - run:
          name: mark extra chart pre-release
          command: |
            yq e -i '.annotations."artifacthub.io/prerelease"="true"' etc/helm/pachyderm/Chart.yaml
      - run:
          name: package pre-release helm chart
          command: |
            helm package -d cr-release-packages/preview --version ${CIRCLE_TAG:1}-${CIRCLE_SHA1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - persist_to_workspace:
          root: .
          paths:
            - cr-release-packages/*
  helm-publish:
    parameters:
      preview:
        type: boolean
        default: false
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: download and install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      # Set CR_Token to GH Personal Access Token (Found in pachydermbuildbot GH Acount)
      # The cr index step below will commit back to the repo (via https + GH Token) need to configure git for the commit
      - run:
          name: set git bot user
          command: |
            git config --global user.email buildbot@pachyderm.io
      - run:
          name: set get bot config
          command: |
            git config --global user.name buildbot
      - run:
          # the helmchart git repo hosts the helm repository (gh-pages) Chart releaser only supports https clone, not ssh
          name: Clone Helmchart Repo
          command: git clone https://github.com/pachyderm/helmchart.git helmchart
      - when:
          condition:
            and:
              - equal: [true, << parameters.preview >>]
          steps:
            - run:
                name: publish preview helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/preview --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/preview --push
      - when:
          condition:
            and:
              - equal: [false, << parameters.preview >>]
          steps:
            - run:
                name: publish official helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/official --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/official --push
  nightly-load:
    parameters:
      bucket:
        type: string
      env:
        type: string
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      BUCKET: << parameters.bucket >>
      GOOGLE_PROJECT_ID: build-release-001
      GOOGLE_COMPUTE_ZONE: us-east1-b
      GOOGLE_COMPUTE_REGION: us-east1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cat /tmp/workspace/bash.env > $BASH_ENV
      - checkout
      - gcp-cli/initialize
      - go/install:
          version: << pipeline.parameters.go-version >>
      - install-pulumi-deps
      - run: |
          echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          command: etc/testing/circle/run_all_load_tests.sh
          no_output_timeout: 1h
      - run:
          name: Destroy test env on fail
          command: |
            sleep 300 #wait for CNI warm pool population to acquiesce before destroy
            pulumi destroy --yes --stack << parameters.env >> --cwd etc/testing/circle/workloads/pulumi/aws
          when: on_fail
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  rootless:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go-version >>
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run: etc/testing/circle/rootless_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
  deploy-tests:
    parameters:
      resource_class:
        type: string
        default: xlarge
      arch:
        type: string
        default: amd64
    resource_class: << parameters.resource_class >>
    parallelism: 4
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      # go/install doesn't support arm64 yet
      - run:
          name: install go
          command: |
            sudo rm -rf /usr/local/go && curl --fail --location -sS "https://dl.google.com/go/go<< pipeline.parameters.go-version >>.linux-<< parameters.arch >>.tar.gz" | sudo tar --no-same-owner -xz -C /usr/local
            echo "export PATH=$PATH:/usr/local/go/bin" >> "$BASH_ENV"
            sudo chown -R "$(whoami)": /usr/local/go
            echo "Installed " && go version
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ arch }}-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - wait-for-docker
      - start-minikube
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ arch }}-{{ checksum "current_week" }}
      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      # Note: This gets saves in the main test runs, no need to save here
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ arch }}-{{ checksum "go.sum" }}
      - run: make install # Install pachctl
      - save_cache:
          key: pach-go-build-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "current_week" }}
          paths:
            - /home/circleci/.gocache
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Run Tests
          command: etc/testing/circle/deploy_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
  # build pachctl and push to GCS bucket, so that it can be bundled into the
  # Jupyter-Pachyderm extension
  build-docker-images:
    parameters:
      appVersion:
        type: string
        default: "0.0.0"
    machine:
      image: << pipeline.parameters.machine_image >>
    resource_class: xlarge
    steps:
      - go/install:
          version: << pipeline.parameters.go-version >>
      - checkout
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.10.3/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            sudo apt update
            sudo apt install qemu binfmt-support qemu-user-static
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker
          command: |
            v=<< parameters.appVersion >>
            additional=${v%%-*}
            index=${#additional}
            make docker-build VERSION=${v} VERSION_ADDITIONAL=${v:index}
      - run:
          name: Push docker
          command: make docker-push VERSION=${CIRCLE_SHA1}
  build-pachctl-bin:
    parameters:
      version:
        type: string
      upload:
        description: Determines if this job should perform an extra step to upload bin to a gcp bucket.
        type: boolean
        default: false
    resource_class: large
    executor: docker-go
    steps:
      - checkout
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            wget https://github.com/chainlink/gcsupload/releases/download/v0.2.0/gcsupload_0.2.0_Linux_x86_64.tar.gz
            tar zxvf gcsupload_0.2.0_Linux_x86_64.tar.gz -C /home/circleci/bin gcsupload
            rm -rf gcsupload_0.2.0_Linux_x86_64.tar.gz
            echo 'export PATH=/home/circle/bin:$PATH' >> $BASH_ENV
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pachctl-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pachctl-build-cache-v1-master-{{ checksum "current_week" }}
      - when:
          condition:
            and:
              - equal: [true, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and uploads pachctl amd64 binary for extensions with a git commit SHA.
                command: |
                  make release-pachctl GORELSNAP=--snapshot VERSION=<< parameters.version >>
                  make release-mount-server GORELSNAP=--snapshot VERSION=<< parameters.version >>
            - run:
                name: upload pachctl binaries
                command: |
                  echo $PACHCTL_GOOGLE_UPLOAD_CREDS > /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/pachctl/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/mount-server/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  rm /home/circleci/gcpcreds.json
      - when:
          condition:
            and:
              - equal: [false, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and prepares all pachctl binaries for release.
                command: |
                  v=<< parameters.version >>
                  additional=${v%%-*}
                  index=${#additional}
                  make release-pachctl GORELSNAP=--snapshot VERSION=${v} VERSION_ADDITIONAL=${v:index}
                  make release-mount-server GORELSNAP=--snapshot VERSION=${v}
            - persist_to_workspace:
                root: ../
                paths:
                  - dist-pach/*
      - save_cache:
          key: pachctl-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
          paths:
            - /home/circleci/.cache # Note, this is different from the cache location for the machine executors
  check-prettier:
    docker:
      - image: cimg/node:16.11.0
    steps:
      - checkout
      - run: sudo npm install -g prettier
      - run: prettier -c etc/helm/pachyderm/values.yaml .circleci/config.yml .circleci/main.yml
  jsonnet-lint:
    resource_class: small
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - run:
          name: Install go-jsonnet
          command: |
            go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
      - run:
          name: lint all jsonnet files
          command: |
            find . -maxdepth 10 -name \*.jsonnet | xargs jsonnet-lint
  test-envoy:
    docker:
      - image: envoyproxy/envoy:v1.24.0
        entrypoint: /bin/sh
    steps:
      - run: apt update
      - run: DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true apt install -y make wget git ssh
      - checkout
      - run: wget https://github.com/google/jsonnet/releases/download/v0.17.0/jsonnet-bin-v0.17.0-linux.tar.gz
      - run: tar xzvf jsonnet-bin-v0.17.0-linux.tar.gz
      - run: mv jsonnet jsonnetfmt /usr/local/bin
      - run: make -C etc/generate-envoy-config test
  govulncheck:
    executor: docker-go
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Install govulncheck
          command: go install golang.org/x/vuln/cmd/govulncheck@latest
      - run:
          name: Check for known security vulnerabilities
          command: |
            find -name go.mod -print0 | xargs -0 -I{} sh -c 'cd $(dirname {}); echo; echo '---'; echo $PWD; exec govulncheck ./...'
  push_redhat:
    executor: docker-go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Install Goreleaser
          command: |
            curl -Lo - https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz | sudo tar -C /usr/local/bin -xvzf - goreleaser
      - run: etc/redhat/push_images.sh
  jupyter-extension-test:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>-node
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      # Install and cache Python dependencies
      - restore_cache:
          key: pip<< parameters.python-version >>-cache-v12-<< pipeline.git.branch >>-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip<< parameters.python-version >>-cache-v12-<< pipeline.git.branch >>-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: "Install npm packages"
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: "Build and test the extension"
          command: |
            set -eux

            . venv/bin/activate
            npm run eslint:check
            python -m pip install -e '.[dev]'

            tail -F /tmp/mount-server.log &

            # Run Python unit tests
            pytest -v --ignore jupyterlab_pachyderm/tests/test_integrations.py jupyterlab_pachyderm

            check-manifest -v

  jupyter-extension-integration-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202107-02
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - install-jupyter-test-deps
      - run:
          name: "Integration tests"
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -e '.[dev]'

            nohup pachctl port-forward &

            tail -F /tmp/mount-server.log &

            mkdir pfs
            export PFS_MOUNT_DIR=$(pwd)/pfs

            # Run integration tests
            pytest -v jupyterlab_pachyderm/tests/test_integrations.py

  jupyter-extension-e2e-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202111-01
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      - install-jupyter-test-deps
      - run:
          name: "e2e tests"
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip

            pip install jupyterlab==3.2.2
            pip install `find dist/ -name \*.whl`

            # Install just what need to run cypress tests
            npm install cypress@^8.7.0
            npm install start-server-and-test@^1.14.0

            # Enable the examples extension
            mkdir -p /home/circleci/.jupyter/labconfig
            cp ./scripts/page_config.json /home/circleci/.jupyter/labconfig

            echo '{"pachd_address": "grpc://'"$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)":30650'", "source": 2}' | pachctl config set context "mount-server" --overwrite && pachctl config set active-context "mount-server"

            pachctl create repo images
            pachctl put file images@master:liberty.png -f http://imgur.com/46Q8nDz.png
            pachctl put file images@branch:branch.png -f http://imgur.com/46Q8nDz.png
            pachctl list repo

            mkdir pfs
            export PFS_MOUNT_DIR=$(pwd)/pfs
            CI=true CYPRESS_RECORD_KEY=$JUPYTERLAB_PACHYDERM_CYPRESS_RECORD_KEY npm run e2e

  jupyter-extension-frontend-test:
    resource_class: xlarge
    docker:
      - image: cimg/node:16.11.0
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - run: npm ci
      - run: npm run test

  jupyter-extension-build:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Install JQ
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq-linux64
            mv jq-linux64 /home/circleci/bin/jq
      - run:
          name: Set version
          command: |
            if [[ ! -z $CIRCLE_TAG ]];
            then
                contents="$(jq --arg version ${CIRCLE_TAG:1} '.version = $version' package.json)" && echo "${contents}" > package.json
            fi

      # Install and cache Python dependencies
      - restore_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: "Install npm packages"
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"

      - run:
          name: build
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m build

      - persist_to_workspace:
          root: .
          paths:
            - dist

  jupyter-extension-test-publish:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Init .pypirc
          command: |
            echo -e "[testpypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $TEST_PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload --repository testpypi dist/*

  jupyter-extension-publish:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: core-pip3.10-cache-v1-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload dist/*

  jupyter-extension-docker-build:
    executor: python
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: docker login
          command: echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker image
          command: docker build -t pachyderm/notebooks-user:$CIRCLE_SHA1 .
      - run:
          name: Docker push
          command: docker push pachyderm/notebooks-user:$CIRCLE_SHA1

  jupyter-extension-docker-push-tag:
    executor: python
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: docker login
          command: echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: docker pull
          command: docker pull pachyderm/notebooks-user:$CIRCLE_SHA1
      - run:
          name: tag docker image
          command: docker tag pachyderm/notebooks-user:$CIRCLE_SHA1 pachyderm/notebooks-user:$CIRCLE_TAG
      - run:
          name: Docker push
          command: docker push pachyderm/notebooks-user:$CIRCLE_TAG

  gcp-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: echo bins
          command: |
            ls -la dist-pach/*
            ls -la cr-release-packages/*
      - run:
          name: "test gcp examples"
          command: |
            etc/testing/circle/run_release_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  aws-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cat /tmp/workspace/bash.env > $BASH_ENV
      - run:
          name: echo bins
          command: |
            ls -la /tmp/workspace/dist-pach/*
            ls -la /tmp/workspace/cr-release-packages/*
      - run:
          name: "test aws examples"
          command: |
            etc/testing/circle/run_release_tests.sh
          no_output_timeout: 1h
      - install-pulumi-deps
      - run:
          name: Destroy test env on fail
          command: |
            sleep 300 #wait for CNI warm pool population to acquiesce before destroy
            pulumi destroy --yes --stack qa1 --cwd etc/testing/circle/workloads/pulumi/aws
          when: on_fail
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  pulumi-aws-test-env:
    parameters:
      env:
        type: string
      action:
        type: string
      pachdVersion:
        type: string
        default: ""
      helmChartVersion:
        type: string
        default: ""
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - node/install
      - kubernetes/install
      - aws-eks/install-aws-iam-authenticator
      - aws-cli/setup
      - pulumi/login
      - run: |
          pulumi plugin install resource eks v0.40.0
      - when:
          condition:
            and:
              - equal: ["update", << parameters.action >>]
          steps:
            - run:
                name: set few config values
                command: |
                  cd etc/testing/circle/workloads/pulumi/aws
                  pulumi stack select pachyderm/core/<< parameters.env >> --create
                  pulumi config set pachdVersion << parameters.pachdVersion >>
                  [[ ! -z "<< parameters.helmChartVersion >>" ]] && pulumi config set helmChartVersion << parameters.helmChartVersion >>
                  pulumi config set --secret rdsPGDBPassword ${PULUMI_TEST_DB_PW}
            - pulumi/update:
                stack: pachyderm/core/<< parameters.env >>
                working_directory: ./etc/testing/circle/workloads/pulumi/aws/
            - run:
                name: gather stack output
                command: |
                  cd etc/testing/circle/workloads/pulumi/aws
                  pulumi stack select pachyderm/core/<< parameters.env >>
                  pulumi stack output kubeconfig > kubeconfig.yml
                  KUBECONFIG=./kubeconfig.yml kubectl get nodes
                  PACHD_IP=$(KUBECONFIG=./kubeconfig.yml kubectl get services --all-namespaces | grep pachyderm-proxy | awk '{print $5}')
                  echo $PACHD_IP
                  echo "export PACHD_IP=$PACHD_IP" >> $BASH_ENV
                  mkdir -p workspace
                  cp $BASH_ENV workspace/bash.env
            - persist_to_workspace:
                root: etc/testing/circle/workloads/pulumi/aws/workspace
                paths:
                  - bash.env
      - when:
          condition:
            and:
              - equal: ["destroy", << parameters.action >>]
          steps:
            - run:
                name: wait for CNI warm pool population to acquiesce before destroy
                command: |
                  sleep 300
            - pulumi/destroy:
                stack: pachyderm/core/<< parameters.env >>
                working_directory: ./etc/testing/circle/workloads/pulumi/aws/
  cust-prerelease-testing:
    parameters:
      customer:
        type: string
      env:
        type: string
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          cat /tmp/workspace/bash.env > $BASH_ENV
      - run:
          name: echo bins
          command: |
            ls -la /tmp/workspace/dist-pach/*
            ls -la /tmp/workspace/cr-release-packages/*
      - run:
          name: "test customer workload"
          command: |
            etc/testing/circle/run_cust_release_tests.sh << parameters.customer >>
          no_output_timeout: 1h
      - install-pulumi-deps
      - run:
          name: Destroy test env on fail
          command: |
            sleep 300 #wait for CNI warm pool population to acquiesce before destroy
            pulumi destroy --yes --stack << parameters.env >> --cwd etc/testing/circle/workloads/pulumi/aws
          when: on_fail
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  release-github-draft:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release draft
          command: |
            if [[ $CIRCLE_TAG == *"-"* ]];
            then
                echo "git tag has - assuming prerelease."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* ./dist-pach/mount-server/mount-server_${CIRCLE_TAG:1}* --generate-notes --prerelease
            else
                echo "regular release."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* ./dist-pach/mount-server/mount-server_${CIRCLE_TAG:1}* --generate-notes
            fi
  console-release-draft:
    docker:
      - image: cimg/base:stable
    steps:
      - add_ssh_keys:
          fingerprints:
            - "23:49:d3:11:ea:69:de:6f:c3:29:e3:09:ff:01:b1:f0"
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github console release draft
          command: |
            if [[ $CIRCLE_TAG == *"alpha"* ]];
              then
                  echo "based on git tag assuming its a alpha release."
                  parentBranch=master
              else
                  echo "using console's release branch for RCs and patch releases."
                  parentBranch=$(echo ${CIRCLE_TAG:1} | cut -f -2 -d ".").x
              fi
            git clone https://github.com/pachyderm/haberdashery.git haberdashery
            cd haberdashery
            git checkout -b release-${CIRCLE_TAG:1} ${parentBranch}
            tmp=$(mktemp)
            jq --arg val "${CIRCLE_TAG:1}-${CIRCLE_SHA1}" '.pachyderm = $val' version.json > "$tmp" && mv "$tmp" version.json
            jq --arg val "${CIRCLE_SHA1}" '.pachReleaseCommit = $val' version.json > "$tmp" && mv "$tmp" version.json
            jq --arg val "${CIRCLE_TAG:1}" '.pachctl = $val' version.json > "$tmp" && mv "$tmp" version.json
            git add --all
            git commit -m "bump pachyderm version"
            git push origin release-${CIRCLE_TAG:1}
            PR=$(gh pr create --base ${parentBranch} --title "bump pach version for release ${CIRCLE_TAG:1}" --body "bump pach version" --reviewer pachydermbuildbot --repo pachyderm/haberdashery)
            gh pr review ${PR} --approve --repo pachyderm/haberdashery
            gh pr checks ${PR} --watch --interval 10 --repo pachyderm/haberdashery
            PR_STATE=$(gh pr status --json mergeStateStatus --jq .currentBranch.mergeStateStatus --repo pachyderm/haberdashery)
            if [[ "$PR_STATE" != "CLEAN" ]]; then
              echo "review console PR ${PR} for failures. PR Checks failed."
              exit 1
            fi
            gh pr merge ${PR} --repo pachyderm/haberdashery
            sleep 2 # give it quick sec to merge, make sure we get right state.
            IS_MERGED=$(gh pr view ${PR} --json state --jq .state --repo pachyderm/haberdashery)
            if [[ "${IS_MERGED}" != "MERGED" ]]; then
              echo "review console PR ${PR} for failures. It did not merge."
              exit 1
            fi
            sleep 2 # in case we create release to fast
            if [[ $CIRCLE_TAG == *"-"* ]];
              then
                  echo "git tag has - assuming prerelease."
                  gh release create --draft ${CIRCLE_TAG:1}-1 --tittle ${CIRCLE_TAG:1}-1 --target $parentBranch --generate-notes --prerelease --repo pachyderm/haberdashery
              else
                  echo "regular release."
                  gh release create --draft ${CIRCLE_TAG:1}-1 --tittle ${CIRCLE_TAG:1}-1 --target $parentBranch --generate-notes --repo pachyderm/haberdashery
              fi
            SECONDS=0
            while :; do
                docker pull pachyderm/haberdashery:${CIRCLE_TAG:1}-1 2>/dev/null && break
                if (( $SECONDS > 1 )); then
                    printf 'Waited 10 minutes for console docker image, inspect console relase at https://app.circleci.com/pipelines/gh/pachyderm/haberdashery for failures\n' >&2
                    exit 1
                fi
                sleep 1
            done
  release-github:
    parameters:
      repo:
        type: string
        default: pachyderm/pachyderm
      tag:
        type: string
        default: ${CIRCLE_TAG}
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release
          command: |
            gh release edit << parameters.tag >> --draft=false --repo << parameters.repo >>
  release-docker-hub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Push release manifests
          command: |
            make UNDERLYING=$CIRCLE_SHA1 VERSION=${CIRCLE_TAG:1} docker-push
  release-hombrew-tap:
    executor: docker-go
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:49:d3:11:ea:69:de:6f:c3:29:e3:09:ff:01:b1:f0"
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - run:
          name: update homebrew formula
          description: updates homebrew after determining release type.
          # this checks if it is a custom, pre, or alpha release and passes that additional string so homebrew knows to create new homebrew index.
          # $stable instructs update_homebrew.sh to release this version as default pachctl installation
          command: |
            stable=$(if [[ "$CIRCLE_TAG" == *"-"* ]]; then echo 0; else echo 1; fi;)
            ./etc/build/update_homebrew.sh ${CIRCLE_TAG:1} ${stable}

workflows:
  integration-tests:
    when:
      or:
        - << pipeline.parameters.run-core-jobs >>
        - not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - build-docker-images
      #- build-pachctl-bin:
      #    version: $CIRCLE_SHA1
      #    upload: true
      - check-prettier
      - jsonnet-lint
      - test-go
      - govulncheck
      - test-envoy
      - test-pps
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                - AUTH
                - ENTERPRISE
                - S3_AUTH
                - EXAMPLES
                - CONNECTORS
  helm-tests:
    when:
      or:
        - << pipeline.parameters.run-core-jobs >>
        - not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - helm-tests
  nightly_load_tests:
    when: << pipeline.parameters.run_load_tests >>
    jobs:
      - build-docker-images
      - pulumi-aws-test-env:
          name: create-aws-test-env-LOAD1
          pachdVersion: $CIRCLE_SHA1
          action: update
          env: LOAD1
          requires:
            - build-docker-images
      - pulumi-aws-test-env:
          name: create-aws-test-env-LOAD2
          pachdVersion: $CIRCLE_SHA1
          action: update
          env: LOAD2
          requires:
            - build-docker-images
      - pulumi-aws-test-env:
          name: create-aws-test-env-LOAD3
          pachdVersion: $CIRCLE_SHA1
          action: update
          env: LOAD3
          requires:
            - build-docker-images
      - pulumi-aws-test-env:
          name: create-aws-test-env-LOAD4
          pachdVersion: $CIRCLE_SHA1
          action: update
          env: LOAD4
          requires:
            - build-docker-images
      - nightly-load:
          name: nightly-load-LOAD1
          requires:
            - create-aws-test-env-LOAD1
          bucket: LOAD1
          env: LOAD1
      - nightly-load:
          name: nightly-load-LOAD2
          requires:
            - create-aws-test-env-LOAD2
          bucket: LOAD2
          env: LOAD2
      - nightly-load:
          name: nightly-load-LOAD3
          requires:
            - create-aws-test-env-LOAD3
          bucket: LOAD3
          env: LOAD3
      - nightly-load:
          name: nightly-load-LOAD4
          requires:
            - create-aws-test-env-LOAD4
          bucket: LOAD4
          env: LOAD4
      - nightly-load:
          name: nightly-load-LOAD5
          requires:
            - nightly-load-LOAD1
          bucket: LOAD5
          env: LOAD1
      - nightly-load:
          name: nightly-load-LOAD6
          requires:
            - nightly-load-LOAD2
          bucket: LOAD6
          env: LOAD2
      - nightly-load:
          name: nightly-load-LOAD7
          requires:
            - nightly-load-LOAD3
          bucket: LOAD7
          env: LOAD3
      - nightly-load:
          name: nightly-load-LOAD8
          requires:
            - nightly-load-LOAD4
          bucket: LOAD8
          env: LOAD4
      - nightly-load:
          name: nightly-load-LOAD9
          requires:
            - nightly-load-LOAD5
          bucket: LOAD9
          env: LOAD1
      - nightly-load:
          name: nightly-load-LOAD10
          requires:
            - nightly-load-LOAD6
          bucket: LOAD10
          env: LOAD2
      - nightly-load:
          name: nightly-load-LOAD11
          requires:
            - nightly-load-LOAD7
          bucket: LOAD11
          env: LOAD3
      - nightly-load:
          name: nightly-load-LOAD12
          requires:
            - nightly-load-LOAD8
          bucket: LOAD12
          env: LOAD4
      - pulumi-aws-test-env:
          name: destroy-aws-testing-env-LOAD1
          action: destroy
          requires:
            - nightly-load-LOAD9
          env: LOAD1
      - pulumi-aws-test-env:
          name: destroy-aws-testing-env-LOAD2
          action: destroy
          requires:
            - nightly-load-LOAD10
          env: LOAD2
      - pulumi-aws-test-env:
          name: destroy-aws-testing-env-LOAD3
          action: destroy
          requires:
            - nightly-load-LOAD11
          env: LOAD3
      - pulumi-aws-test-env:
          name: destroy-aws-testing-env-LOAD4
          action: destroy
          requires:
            - nightly-load-LOAD12
          env: LOAD4
  rootless-tests:
    when:
      or:
        - << pipeline.parameters.run-core-jobs >>
        - not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - rootless
  deploy-tests:
    when:
      or:
        - << pipeline.parameters.run-core-jobs >>
        - not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - deploy-tests:
          name: amd64 deploy tests
          resource_class: xlarge # amd64
          arch: amd64
      - deploy-tests:
          name: arm64 deploy tests
          resource_class: arm.xlarge # arm64
          arch: arm64
  jupyter-extension:
    when: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - build-docker-images
      - jupyter-extension-test:
          matrix:
            parameters:
              python-version: ["3.8", "3.9", "3.10"]
      - jupyter-extension-frontend-test
      - jupyter-extension-integration-test:
          requires:
            - build-docker-images
            - build-pachctl-bin
      - jupyter-extension-e2e-test:
          requires:
            - build-docker-images
            - jupyter-extension-build
            - build-pachctl-bin
      - jupyter-extension-build
      - jupyter-extension-docker-build:
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
      - build-pachctl-bin:
          version: $CIRCLE_SHA1

  release:
    jobs:
      - helm-tests:
          filters: *only-release-tags
      - test-pps:
          filters: *only-release-tags
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                - AUTH
                - ENTERPRISE
                - S3_AUTH
                - EXAMPLES
          filters: *only-release-tags
      - helm-build:
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - build-docker-images:
          appVersion: ${CIRCLE_TAG:1}
          filters: *only-release-tags
      - build-pachctl-bin:
          version: ${CIRCLE_TAG:1}
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - helm-publish:
          name: publish-chart-preview
          preview: true
          filters: *only-release-tags
          requires:
            - helm-build
      - release-github-draft:
          filters: *only-release-tags
          requires:
            - build-pachctl-bin
      - jupyter-extension-test:
          matrix:
            parameters:
              python-version: ["3.8", "3.9", "3.10"]
          filters: *only-release-tags
      - jupyter-extension-frontend-test:
          filters: *only-release-tags
      - jupyter-extension-integration-test:
          requires:
            - build-pachctl-bin
          filters: *only-release-tags
      - jupyter-extension-e2e-test:
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
          filters: *only-release-tags
      - jupyter-extension-build:
          filters: *only-release-tags
      - jupyter-extension-docker-build:
          filters: *only-release-tags
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
      - pulumi-aws-test-env:
          name: aws-prerelease-testing-env-1
          env: qa1
          action: update
          pachdVersion: $CIRCLE_SHA1
          helmChartVersion: ${CIRCLE_TAG:1}-${CIRCLE_SHA1}
          filters: *only-release-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - pulumi-aws-test-env:
          name: aws-prerelease-testing-env-2
          env: qa2
          action: update
          pachdVersion: $CIRCLE_SHA1
          helmChartVersion: ${CIRCLE_TAG:1}-${CIRCLE_SHA1}
          filters: *only-alpha-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - pulumi-aws-test-env:
          name: aws-prerelease-testing-env-3
          env: qa3
          action: update
          pachdVersion: $CIRCLE_SHA1
          helmChartVersion: ${CIRCLE_TAG:1}-${CIRCLE_SHA1}
          filters: *only-alpha-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - aws-prerelease-testing:
          name: aws-testing
          filters: *only-release-tags
          requires:
            - aws-prerelease-testing-env-1
      - cust-prerelease-testing:
          name: wp-testing
          customer: wp
          env: qa2
          filters: *only-alpha-tags
          requires:
            - aws-prerelease-testing-env-2
      - cust-prerelease-testing:
          name: btl-testing
          customer: btl
          env: qa3
          filters: *only-alpha-tags
          requires:
            - aws-prerelease-testing-env-3
      - pulumi-aws-test-env:
          name: destroy-aws-prerelease-testing-env-1
          env: qa1
          action: destroy
          filters: *only-release-tags
          requires:
            - aws-testing
      - pulumi-aws-test-env:
          name: destroy-aws-prerelease-testing-env-2
          env: qa2
          action: destroy
          filters: *only-alpha-tags
          requires:
            - wp-testing
      - pulumi-aws-test-env:
          name: destroy-aws-prerelease-testing-env-3
          env: qa3
          action: destroy
          filters: *only-alpha-tags
          requires:
            - btl-testing
      - console-release-draft:
          filters: *only-release-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - sign-off:
          filters: *only-release-tags
          type: approval
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - release-docker-hub:
          filters: *only-release-tags
          requires:
            - sign-off
      #- push_redhat:
      #    filters: *only-release-tags
      #    requires:
      #      - sign-off
      - release-github:
          name: github-release-pach-core
          filters: *only-release-tags
          requires:
            - sign-off
      - release-github:
          name: github-release-console
          repo: pachyderm/haberdashery
          tag: ${CIRCLE_TAG:1}-1
          filters: *only-release-tags
          requires:
            - sign-off
      - release-hombrew-tap:
          filters: *only-release-tags
          requires:
            - github-release-pach-core #current homebrew tap repo uses gh release, but later can be changed to pipeline artifacts to remove deps
      - helm-publish:
          name: publish-helm-chart
          filters: *only-release-tags
          requires:
            - sign-off
      - jupyter-extension-test-publish:
          requires:
            - jupyter-extension-build
            - jupyter-extension-test
            - jupyter-extension-frontend-test
            - jupyter-extension-integration-test
            - jupyter-extension-e2e-test
          filters: *only-release-tags
      - jupyter-extension-publish:
          requires:
            - jupyter-extension-build
            - sign-off
          filters: *only-release-tags
      - jupyter-extension-docker-push-tag:
          requires:
            - sign-off
            - jupyter-extension-docker-build
          filters: *only-release-tags
  nightly-release:
    jobs:
      - helm-tests:
          filters: *only-nightly-tags
      - test-pps:
          filters: *only-nightly-tags
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                - AUTH
                - ENTERPRISE
                - S3_AUTH
                - EXAMPLES
          filters: *only-nightly-tags
      - helm-build:
          filters: *only-nightly-tags
          requires:
            - helm-tests
            - integration-tests
      - build-docker-images:
          appVersion: ${CIRCLE_TAG:1}
          filters: *only-nightly-tags
      - build-pachctl-bin:
          version: ${CIRCLE_TAG:1}
          filters: *only-nightly-tags
          requires:
            - helm-tests
            - integration-tests
      - helm-publish:
          name: publish-chart-preview
          preview: true
          filters: *only-nightly-tags
          requires:
            - helm-build
      - release-github-draft:
          filters: *only-nightly-tags
          requires:
            - build-pachctl-bin
      - pulumi-aws-test-env:
          name: create-aws-test-env
          env: qa1
          action: update
          pachdVersion: $CIRCLE_SHA1
          helmChartVersion: ${CIRCLE_TAG:1}-${CIRCLE_SHA1}
          filters: *only-nightly-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - aws-prerelease-testing:
          filters: *only-nightly-tags
          requires:
            - create-aws-test-env
      - pulumi-aws-test-env:
          name: destroy-aws-test-env
          env: qa1
          action: destroy
          filters: *only-nightly-tags
          requires:
            - aws-prerelease-testing
      - release-docker-hub:
          filters: *only-nightly-tags
          requires:
            - aws-prerelease-testing
      - release-github:
          filters: *only-nightly-tags
          requires:
            - aws-prerelease-testing
      - release-hombrew-tap:
          filters: *only-nightly-tags
          requires:
            - release-github #current homebrew tap repo uses gh release, but later can be changed to pipeline artifacts to remove deps
      - helm-publish:
          name: publish-helm-chart
          filters: *only-nightly-tags
          requires:
            - aws-prerelease-testing

commands:
  install-jupyter-test-deps:
    steps:
      - attach_workspace:
          at: ./
      - run: sudo apt-get update && sudo apt-get install fuse libgbm-dev
      - run:
          name: Fuse options
          command: echo "user_allow_other" | sudo tee -a /etc/fuse.conf > /dev/null
      - run:
          name: Install kind
          command: |
            curl -fLo ./kind-linux-amd64 "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-amd64" \
            && chmod +x ./kind-linux-amd64 \
            && sudo mv ./kind-linux-amd64 /usr/local/bin/kind
      - run:
          name: Install helm
          command: |
            wget https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz && \
            tar -zxvf helm-v3.7.1-linux-amd64.tar.gz && \
            chmod +x linux-amd64/helm && \
            sudo mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x kubectl && \
            sudo mv kubectl /usr/local/bin/kubectl
      - run:
          name: Install pachctl and mount-server
          command: |
            sudo mv ./dist-pach/pachctl/pachctl_linux_amd64/pachctl /usr/local/bin/pachctl
            sudo mv ./dist-pach/mount-server/mount-server_linux_amd64/mount-server /usr/local/bin/mount-server
      - run:
          name: Start kind
          command: kind create cluster && kubectl config set current-context kind-kind
      - run:
          name: Install pach
          command: helm install pachd ../etc/helm/pachyderm --set deployTarget=LOCAL,pachd.service.type=NodePort,pachd.image.tag=${CIRCLE_SHA1}
      - run:
          name: Wait for pach # need to wait before testing kubectl as pach is not visible to kubectl yet
          command: |
            sleep 20
            kubectl wait --for=condition=ready pod -l app=pachd --timeout=5m
            pachctl version
      - run:
          name: Setup pach # Get Kind node IP and pass that to pachctl
          command: |-
            echo '{"pachd_address": "grpc://'"$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)":30650'"}' | pachctl config set context local --overwrite
            pachctl config set active-context local
  install-pulumi-deps:
    steps:
      - node/install
      - kubernetes/install
      - aws-eks/install-aws-iam-authenticator
      - aws-cli/setup
      - pulumi/login
      - run: |
          pulumi plugin install resource eks v0.40.0
  wait-for-docker:
    steps:
      - run:
          name: Wait for docker
          command: |
            # wait for docker or timeout
            timeout=120
            while ! docker version >/dev/null 2>&1; do
              timeout=$((timeout - 1))
              if [ $timeout -eq 0 ]; then
                echo "Timed out waiting for docker daemon"
                exit 1
              fi
              sleep 1
            done
  start-minikube:
    steps:
      - run:
          name: Start minikube
          command: minikube start --vm-driver=docker --kubernetes-version=v1.19.0 --cpus=7 --memory=12Gi --wait=all
          background: true

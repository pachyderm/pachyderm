# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      # will ignore nightly
      only: /^v\d+\.\d+\.\d+(-(?!nightly)[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/
  - &only-nightly-tags
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+-(nightly)+(\.[0-9A-Za-z-]+)*?$/
  - &only-alpha-tags
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+-alpha+(\.[0-9A-Za-z-]+)*?$/

orbs:
  go: circleci/go@1.7.1
  gcp-cli: circleci/gcp-cli@2.4.1
  gh: circleci/github-cli@2.1
  codecov: codecov/codecov@1.1.0

parameters:
  machine_image:
    type: string
    default: ubuntu-2004:2022.07.1
  go-version:
    type: string
    default: "1.19"
  run_load_tests:
    type: boolean
    default: false
  run-jupyter-jobs:
    type: boolean
    default: false

executors:
  docker-go:
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
  python:
    docker:
      - image: cimg/python:3.10-node

jobs:
  test-go:
    machine:
      image: << pipeline.parameters.machine_image >>
    resource_class: xlarge
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir ${TEST_RESULTS}
      - run: go install gotest.tools/gotestsum@latest
      - run: CGO_ENABLED=0 go install ./src/server/cmd/pachctl
      - run: CGO_ENALBED=0 go install ./src/testing/match
      - restore_cache:
          keys:
            - pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
      - run: etc/testing/circle/install.sh
      - run:
          no_output_timeout: 20m
          command: |-
            GOMAXPROCS=8 KUBECONFIG=/dev/null PACH_CONFIG=/dev/null \
            gotestsum \
            --junitfile ${TEST_RESULTS}/gotestsum-report.xml \
            --rerun-fails \
            --packages="./..." \
            -- \
            -tags=unit_test \
            -count=1 \
            -coverprofile=${TEST_RESULTS}/coverage.txt -covermode=atomic -coverpkg=./...
      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
      - codecov/upload:
          file: /tmp/test-results/coverage.txt
      - save_cache:
          key: pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
  integration-tests:
    parameters:
      bucket:
        type: string
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      PPS_BUCKETS: "8"
      GOPROXY: https://proxy.golang.org
      BUCKET: << parameters.bucket >>
    steps:
      - checkout
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - save_cache:
          key: pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
          paths:
            - cached-deps/
      - go/install:
          version: << pipeline.parameters.go-version >>
      - run:
          name: Start minikube
          command: etc/testing/circle/start-minikube.sh
          background: true
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh
      #Save cache in only one bucket, after build and before running tests,
      #this ensures build cache is saved even when tests fail
      - when:
          condition:
            equal: [MISC, <<parameters.bucket>>]
          steps:
            - save_cache:
                key: pach-go-mod-cache-v2-{{ checksum "go.sum" }}
                paths:
                  - /home/circleci/.go_workspace/pkg/mod
            - save_cache:
                key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
                paths:
                  - /home/circleci/.gocache
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Collect kube events
          command: kubectl get events -o wide --watch --all-namespaces | ts '%Y-%m-%dT%H:%M:%S'
          background: true
      - run:
          name: Install minio
          command: kubectl apply -f etc/testing/minio.yaml
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run:
          no_output_timeout: 20m
          command: etc/testing/circle/run_tests.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  helm-tests:
    executor: docker-go
    working_directory: ~/project/etc/helm
    steps:
      - checkout:
          path: ~/project
      - run: mkdir -p /home/circleci/bin
      - restore_cache:
          keys:
            - go-mod-helm-v4-{{ checksum "go.sum" }}
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      - run:
          name: install kubeval
          command: |
            wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -O - | tar -xzO kubeval > /home/circleci/bin/kubeval && chmod +x /home/circleci/bin/kubeval
      - run: make lint
      - run: make test
      - run: make kubeval-gcp
      - run: make kubeval-aws
      - save_cache:
          key: go-mod-helm-v4-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"
  helm-build:
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - checkout
      - run:
          name: install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/v4.23.1/yq_linux_amd64
            mv yq_linux_amd64 /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      - run:
          name: make cr release dirs
          command: |
            mkdir -p cr-release-packages/official
            mkdir -p cr-release-packages/preview
      - run:
          name: package release helm chart
          command: |
            helm package -d cr-release-packages/official --version ${CIRCLE_TAG:1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - run:
          name: mark extra chart pre-release
          command: |
            yq e -i '.annotations."artifacthub.io/prerelease"="true"' etc/helm/pachyderm/Chart.yaml
      - run:
          name: package pre-release helm chart
          command: |
            helm package -d cr-release-packages/preview --version ${CIRCLE_TAG:1}-${CIRCLE_SHA1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - persist_to_workspace:
          root: .
          paths:
            - cr-release-packages/*
  helm-publish:
    parameters:
      preview:
        type: boolean
        default: false
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: download and install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      # Set CR_Token to GH Personal Access Token (Found in pachydermbuildbot GH Acount)
      # The cr index step below will commit back to the repo (via https + GH Token) need to configure git for the commit
      - run:
          name: set git bot user
          command: |
            git config --global user.email buildbot@pachyderm.io
      - run:
          name: set get bot config
          command: |
            git config --global user.name buildbot
      - run:
          # the helmchart git repo hosts the helm repository (gh-pages) Chart releaser only supports https clone, not ssh
          name: Clone Helmchart Repo
          command: git clone https://github.com/pachyderm/helmchart.git helmchart
      - when:
          condition:
            and:
              - equal: [true, << parameters.preview >>]
          steps:
            - run:
                name: publish preview helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/preview --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/preview --push
      - when:
          condition:
            and:
              - equal: [false, << parameters.preview >>]
          steps:
            - run:
                name: publish official helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/official --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/official --push
  nightly-load:
    parameters:
      bucket:
        type: string
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      BUCKET: << parameters.bucket >>
      GOOGLE_PROJECT_ID: build-release-001
      GOOGLE_COMPUTE_ZONE: us-east1-b
      GOOGLE_COMPUTE_REGION: us-east1
    steps:
      - checkout
      - gcp-cli/initialize
      - go/install:
          version: << pipeline.parameters.go-version >>
      - run: |
          echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          command: etc/testing/circle/run_all_load_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  rootless:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run: etc/testing/circle/rootless_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
  deploy-tests:
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
            echo 'export TEST_IMAGE_SHA=$CIRCLE_SHA1' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run: etc/testing/circle/start-minikube.sh
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}
      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      # Note: This gets saves in the main test runs, no need to save here
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh
      - save_cache:
          key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
          paths:
            - /home/circleci/.gocache
      - run:
          name: Wait for docker images to be built
          command: etc/testing/circle/wait_for_docker_images.sh
      - run:
          name: Run Tests
          command: etc/testing/circle/deploy_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
  # build pachctl and push to GCS bucket, so that it can be bundled into the
  # Jupyter-Pachyderm extension
  build-docker-images:
    parameters:
      appVersion:
        type: string
        default: "0.0.0"
    machine:
      image: << pipeline.parameters.machine_image >>
    resource_class: xlarge
    steps:
      - go/install:
          version: << pipeline.parameters.go-version >>
      - checkout
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.10.3/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            sudo apt update
            sudo apt install qemu binfmt-support qemu-user-static
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker
          command: |
            v=<< parameters.appVersion >>
            additional=${v%%-*}
            index=${#additional}
            make docker-build VERSION=${v} VERSION_ADDITIONAL=${v:index}
      - run:
          name: Push docker
          command: make docker-push VERSION=${CIRCLE_SHA1}
  build-pachctl-bin:
    parameters:
      version:
        type: string
      upload:
        description: Determines if this job should perform an extra step to upload bin to a gcp bucket.
        type: boolean
        default: false
    resource_class: large
    executor: docker-go
    steps:
      - checkout
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            wget https://github.com/chainlink/gcsupload/releases/download/v0.2.0/gcsupload_0.2.0_Linux_x86_64.tar.gz
            tar zxvf gcsupload_0.2.0_Linux_x86_64.tar.gz -C /home/circleci/bin gcsupload
            rm -rf gcsupload_0.2.0_Linux_x86_64.tar.gz
            echo 'export PATH=/home/circle/bin:$PATH' >> $BASH_ENV
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pachctl-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pachctl-build-cache-v1-master-{{ checksum "current_week" }}
      - when:
          condition:
            and:
              - equal: [true, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and uploads pachctl amd64 binary for extensions with a git commit SHA.
                command: |
                  make release-pachctl GORELSNAP=--snapshot VERSION=<< parameters.version >>
                  make release-mount-server GORELSNAP=--snapshot VERSION=<< parameters.version >>
            - run:
                name: upload pachctl binaries
                command: |
                  echo $PACHCTL_GOOGLE_UPLOAD_CREDS > /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/pachctl/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/mount-server/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  rm /home/circleci/gcpcreds.json
      - when:
          condition:
            and:
              - equal: [false, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and prepares all pachctl binaries for release.
                command: |
                  v=<< parameters.version >>
                  additional=${v%%-*}
                  index=${#additional}
                  make release-pachctl GORELSNAP=--snapshot VERSION=${v} VERSION_ADDITIONAL=${v:index}
                  make release-mount-server GORELSNAP=--snapshot VERSION=${v}
            - persist_to_workspace:
                root: ../
                paths:
                  - dist-pach/*
      - save_cache:
          key: pachctl-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
          paths:
            - /home/circleci/.cache # Note, this is different from the cache location for the machine executors
  check-prettier:
    docker:
      - image: cimg/node:16.11.0
    steps:
      - checkout
      - run: sudo npm install -g prettier
      - run: prettier -c etc/helm/pachyderm/values.yaml .circleci/config.yml .circleci/main.yml
  jsonnet-lint:
    resource_class: small
    docker:
      - image: cimg/go:<< pipeline.parameters.go-version >>
    steps:
      - checkout
      - run:
          name: Install go-jsonnet
          command: |
            go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
      - run:
          name: lint all jsonnet files
          command: |
            find . -maxdepth 10 -name \*.jsonnet | xargs jsonnet-lint
  test-envoy:
    docker:
      - image: envoyproxy/envoy:v1.22.0
        entrypoint: /bin/sh
    steps:
      - run: apt update
      - run: apt install -y make wget git ssh
      - checkout
      - run: wget https://github.com/google/jsonnet/releases/download/v0.17.0/jsonnet-bin-v0.17.0-linux.tar.gz
      - run: tar xzvf jsonnet-bin-v0.17.0-linux.tar.gz
      - run: mv jsonnet jsonnetfmt /usr/local/bin
      - run: make -C etc/generate-envoy-config test
  govulncheck:
    executor: docker-go
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install govulncheck
          command: go install golang.org/x/vuln/cmd/govulncheck@latest
      - run:
          name: Check for known security vulnerabilities
          command: govulncheck ./...
  push_redhat:
    executor: docker-go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Install Goreleaser
          command: |
            curl -Lo - https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz | sudo tar -C /usr/local/bin -xvzf - goreleaser
      - run: etc/redhat/push_images.sh
  jupyter-extension-test:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>-node
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      # Install and cache Python dependencies
      - restore_cache:
          key: pip<< parameters.python-version >>-cache-v11-<< pipeline.git.branch >>-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip<< parameters.python-version >>-cache-v11-<< pipeline.git.branch >>-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: "Install npm packages"
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"
      - run:
          name: "Build and test the extension"
          command: |
            set -eux

            . venv/bin/activate
            npm run eslint:check
            python -m pip install -e '.[dev]'

            tail -F /tmp/mount-server.log &

            # Run Python unit tests
            pytest -v --ignore jupyterlab_pachyderm/tests/test_integrations.py jupyterlab_pachyderm

            check-manifest -v

  jupyter-extension-integration-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202107-02
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - install-jupyter-test-deps
      - run:
          name: "Integration tests"
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install -e '.[dev]'

            nohup pachctl port-forward &

            tail -F /tmp/mount-server.log &

            mkdir pfs
            export PFS_MOUNT_DIR=$(pwd)/pfs

            # Revert repo setup back to fixture in test_integrations.py
            # once python-pachyderm has Projects support
            scripts/integration_tests_setup.sh

            # Run integration tests
            pytest -v jupyterlab_pachyderm/tests/test_integrations.py

  jupyter-extension-e2e-test:
    resource_class: xlarge
    machine:
      image: ubuntu-2004:202111-01
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      - install-jupyter-test-deps
      - run:
          name: "e2e tests"
          command: |
            set -eux

            python3 -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip

            pip install jupyterlab==3.2.2
            pip install `find dist/ -name \*.whl`

            # Install just what need to run cypress tests
            npm install cypress@^8.7.0
            npm install start-server-and-test@^1.14.0

            # Enable the examples extension
            mkdir -p /home/circleci/.jupyter/labconfig
            cp ./scripts/page_config.json /home/circleci/.jupyter/labconfig

            echo '{"pachd_address": "grpc://'"$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)":30650'", "source": 2}' | pachctl config set context "mount-server" --overwrite && pachctl config set active-context "mount-server"

            pachctl create repo images
            pachctl put file images@master:liberty.png -f http://imgur.com/46Q8nDz.png
            pachctl put file images@branch:branch.png -f http://imgur.com/46Q8nDz.png
            pachctl list repo

            mkdir pfs
            export PFS_MOUNT_DIR=$(pwd)/pfs
            CI=true CYPRESS_RECORD_KEY=$JUPYTERLAB_PACHYDERM_CYPRESS_RECORD_KEY npm run e2e

  jupyter-extension-frontend-test:
    resource_class: xlarge
    docker:
      - image: cimg/node:16.11.0
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - run: npm ci
      - run: npm run test

  jupyter-extension-build:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project

      - run:
          name: Install JQ
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x jq-linux64
            mv jq-linux64 /home/circleci/bin/jq
      - run:
          name: Set version
          command: |
            if [[ ! -z $CIRCLE_TAG ]];
            then
                contents="$(jq --arg version ${CIRCLE_TAG:1} '.version = $version' package.json)" && echo "${contents}" > package.json
            fi

      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"

      # Install and cache Node dependencies
      - restore_cache:
          keys:
            - node-cache-v3-{{ checksum "package-lock.json" }}
            - node-cache-v3
      - run:
          name: "Install npm packages"
          command: |
            npm ci
      - save_cache:
          key: node-cache-v3-{{ checksum "package-lock.json" }}
          paths:
            - "node_modules"

      - run:
          name: build
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m build

      - persist_to_workspace:
          root: .
          paths:
            - dist

  jupyter-extension-test-publish:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Init .pypirc
          command: |
            echo -e "[testpypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $TEST_PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload --repository testpypi dist/*

  jupyter-extension-publish:
    executor: python
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      # Install and cache Python dependencies
      - restore_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
      - run:
          name: "Install Python dependencies"
          command: |
            python -m venv venv
            . venv/bin/activate
            python -m pip install --upgrade pip
            python -m pip install -r ci-requirements.txt
      - save_cache:
          key: pip3.10-cache-v11-{{ checksum "ci-requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Publish
          command: |
            python -m venv venv
            . venv/bin/activate
            twine upload dist/*

  jupyter-extension-docker-build:
    executor: python
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: docker login
          command: echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker image
          command: docker build -t pachyderm/notebooks-user:$CIRCLE_SHA1 .
      - run:
          name: Docker push
          command: docker push pachyderm/notebooks-user:$CIRCLE_SHA1

  jupyter-extension-docker-push-tag:
    executor: python
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: docker login
          command: echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: docker pull
          command: docker pull pachyderm/notebooks-user:$CIRCLE_SHA1
      - run:
          name: tag docker image
          command: docker tag pachyderm/notebooks-user:$CIRCLE_SHA1 pachyderm/notebooks-user:$CIRCLE_TAG
      - run:
          name: Docker push
          command: docker push pachyderm/notebooks-user:$CIRCLE_TAG

  # Needs the following Env Vars to be setup in the project:
  # $GCLOUD_SERVICE_KEY_JUPYTER - with permissions to the google cloud project where the kubernetes cluster resides
  # $AUTH0_CLIENT_ID - Used to authenticate jupyter with oauth
  # $AUTH0_CLIENT_SECRET
  # $AUTH0_DOMAIN the tenant subdomain without .auth0.com
  # $PULUMI_ACCESS_TOKEN
  # GH_ACCESS_TOKEN - build not personal access token to github with repo permissions (see onecomment)
  jupyter-extension-preview:
    parameters:
      gcp-project:
        type: string
      gcp-compute-zone:
        type: string
      gcloud-sdk-version:
        type: string
      pulumi-version:
        type: string
    docker:
      - image: cimg/go:1.17.5
    working_directory: ~/project/jupyter-extension
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Set up pulumi
          command: |
            wget https://get.pulumi.com/releases/sdk/pulumi-<<parameters.pulumi-version>>-linux-x64.tar.gz
            tar xvf pulumi-<<parameters.pulumi-version>>-linux-x64.tar.gz
            # Add to PATH
            echo 'export PATH=${PWD}/pulumi:$PATH' >> $BASH_ENV
            source $BASH_ENV
            pulumi login --non-interactive
      - run:
          name: Setup gcloud
          command: |
            # NOTE: Needed to enable cloud resource manager in the project
            # https://console.cloud.google.com/apis/api/cloudresourcemanager.googleapis.com/overview?project=pulumi-ci-334619
            cd ~/
            curl -Ss --retry 5 https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-<<parameters.gcloud-sdk-version>>-linux-x86_64.tar.gz | tar xz

            ./google-cloud-sdk/install.sh -q
            echo 'source ~/google-cloud-sdk/path.bash.inc' >> $BASH_ENV
            source $BASH_ENV

            # Initialize gcloud CLI
            gcloud --quiet config set core/disable_usage_reporting true
            gcloud --quiet config set component_manager/disable_update_check true
            echo $GCLOUD_SERVICE_KEY_JUPYTER | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project <<parameters.gcp-project>>
            gcloud --quiet config set compute/zone <<parameters.gcp-compute-zone>>

      - run:
          name: Preview Stack
          command: |
            cd infra
            pulumi stack select -c $CIRCLE_BRANCH --non-interactive
            pulumi config set gcp:zone <<parameters.gcp-compute-zone>>
            pulumi config set gcp:project <<parameters.gcp-project>>
            pulumi config set sha $CIRCLE_SHA1
            pulumi config set branch $CIRCLE_BRANCH
            pulumi config set --secret client_id $AUTH0_CLIENT_ID
            pulumi config set --secret client_secret $AUTH0_CLIENT_SECRET
            pulumi config set --secret auth0_domain $AUTH0_DOMAIN
            # pulumi preview
            pulumi up --yes
            # pulumi destroy --yes
      - run:
          name: Comment on PR
          command: |
            wget https://github.com/chainlink/onecomment/releases/download/v0.2.0/onecomment_0.2.0_Linux_x86_64.tar.gz
            tar xvf onecomment_0.2.0_Linux_x86_64.tar.gz

            # Setup GH token env var in circle project
            ./onecomment -pr-id ${CIRCLE_PULL_REQUEST##*/} \
            -owner ${CIRCLE_PROJECT_USERNAME} -repo ${CIRCLE_PROJECT_REPONAME} \
            -includes '<!-- Created by one-comment -->' \
            -message "PR Preview available at [https://jh-$CIRCLE_BRANCH.clusters-ci.pachyderm.io](https://jh-$CIRCLE_BRANCH.clusters-ci.pachyderm.io)
            Enter any username to login (Each user will be assigned a new workspace)
            You may need to shutdown and relaunch your Jupyterlab instance if new code has been pushed since you last launched it.
            You can connect to pach by entering grpc://pachd-peer:30653 into the extension connection screen."

  gcp-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: echo bins
          command: |
            ls -la dist-pach/*
            ls -la cr-release-packages/*
      - run:
          name: "test gcp examples"
          command: |
            etc/testing/circle/run_release_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  aws-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: echo bins
          command: |
            ls -la dist-pach/*
            ls -la cr-release-packages/*
      - run:
          name: "test aws examples"
          command: |
            etc/testing/circle/run_release_tests.sh "aws"
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  cust-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: echo bins
          command: |
            ls -la dist-pach/*
            ls -la cr-release-packages/*
      - run:
          name: "test customer workload"
          command: |
            etc/testing/circle/run_cust_release_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  release-github-draft:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release draft
          command: |
            if [[ $CIRCLE_TAG == *"-"* ]];
            then
                echo "git tag has - assuming prerelease."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* ./dist-pach/mount-server/mount-server_${CIRCLE_TAG:1}* --generate-notes --prerelease
            else
                echo "regular release."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* ./dist-pach/mount-server/mount-server_${CIRCLE_TAG:1}* --generate-notes
            fi
  release-github:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release
          command: |
            gh release edit ${CIRCLE_TAG} --draft=false
  release-docker-hub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Push release manifests
          command: |
            make UNDERLYING=$CIRCLE_SHA1 VERSION=${CIRCLE_TAG:1} docker-push
  release-hombrew-tap:
    executor: docker-go
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "4c:1c:ff:56:c1:d0:07:03:23:08:08:2e:e6:16:30:1d"
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - run:
          name: update homebrew formula
          description: updates homebrew after determining release type.
          # this checks if it is a custom, pre, or alpha release and passes that additional string so homebrew knows to create new homebrew index.
          # $additional is currently just a flag, that value itself is not used.
          command: |
            v=${CIRCLE_TAG}
            prefix=${v%%-*}
            index=${#prefix}
            additional=${v:index}
            ./etc/build/update_homebrew.sh ${CIRCLE_TAG:1} ${additional}
workflows:
  integration-tests:
    when:
      not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - build-docker-images
      #- build-pachctl-bin:
      #    version: $CIRCLE_SHA1
      #    upload: true
      - check-prettier
      - jsonnet-lint
      - test-go
      - govulncheck
      - test-envoy
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS7
                - PPS8
                - S3_AUTH
                - EXAMPLES
                - CONNECTORS
  helm-tests:
    when:
      not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - helm-tests
  nightly_load_tests:
    when: << pipeline.parameters.run_load_tests >>
    jobs:
      - build-docker-images
      - nightly-load:
          requires:
            - build-docker-images
          matrix:
            parameters:
              bucket:
                - LOAD1
                - LOAD2
                - LOAD3
                - LOAD4
                - LOAD5
                - LOAD6
                - LOAD7
                - LOAD8
                - LOAD9
                - LOAD10
                - LOAD11
                - LOAD12
                  # Disabled for now since they take too long, may consider reenabling later.
                  #- LOAD13
                  #- LOAD14
                  #- LOAD15
  rootless-tests:
    when:
      not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - rootless
  deploy-tests:
    when:
      not: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - deploy-tests
  jupyter-extension:
    when: << pipeline.parameters.run-jupyter-jobs >>
    jobs:
      - build-docker-images
      - jupyter-extension-test:
          matrix:
            parameters:
              python-version: ["3.7", "3.8", "3.9", "3.10"]
      - jupyter-extension-frontend-test
      - jupyter-extension-integration-test:
          requires:
            - build-docker-images
            - build-pachctl-bin
      - jupyter-extension-e2e-test:
          requires:
            - build-docker-images
            - jupyter-extension-build
            - build-pachctl-bin
      - jupyter-extension-build
      - jupyter-extension-docker-build:
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
      - build-pachctl-bin:
          version: $CIRCLE_SHA1
      - jupyter-extension-preview:
          gcp-project: pulumi-ci-334619
          gcp-compute-zone: us-east1-b
          gcloud-sdk-version: "363.0.0"
          pulumi-version: v3.22.1
          requires:
            - jupyter-extension-docker-build
          filters:
            branches:
              ignore: master

  release:
    jobs:
      - helm-tests:
          filters: *only-release-tags
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS7
                - PPS8
                - S3_AUTH
                - EXAMPLES
          filters: *only-release-tags
      - helm-build:
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - build-docker-images:
          appVersion: ${CIRCLE_TAG:1}
          filters: *only-release-tags
      - build-pachctl-bin:
          version: ${CIRCLE_TAG:1}
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - helm-publish:
          name: publish-chart-preview
          preview: true
          filters: *only-release-tags
          requires:
            - helm-build
      - release-github-draft:
          filters: *only-release-tags
          requires:
            - build-pachctl-bin
      - jupyter-extension-test:
          matrix:
            parameters:
              python-version: ["3.7", "3.8", "3.9", "3.10"]
          filters: *only-release-tags
      - jupyter-extension-frontend-test:
          filters: *only-release-tags
      - jupyter-extension-integration-test:
          requires:
            - build-pachctl-bin
          filters: *only-release-tags
      - jupyter-extension-e2e-test:
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
          filters: *only-release-tags
      - jupyter-extension-build:
          filters: *only-release-tags
      - jupyter-extension-docker-build:
          filters: *only-release-tags
          requires:
            - jupyter-extension-build
            - build-pachctl-bin
      - gcp-prerelease-testing:
          filters: *only-release-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - aws-prerelease-testing:
          filters: *only-release-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - cust-prerelease-testing:
          filters: *only-alpha-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - sign-off:
          filters: *only-release-tags
          type: approval
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - release-docker-hub:
          filters: *only-release-tags
          requires:
            - sign-off
      #- push_redhat:
      #    filters: *only-release-tags
      #    requires:
      #      - sign-off
      - release-github:
          filters: *only-release-tags
          requires:
            - sign-off
      - release-hombrew-tap:
          filters: *only-release-tags
          requires:
            - release-github #current homebrew tap repo uses gh release, but later can be changed to pipeline artifacts to remove deps
      - helm-publish:
          name: publish-helm-chart
          filters: *only-release-tags
          requires:
            - sign-off
      - jupyter-extension-test-publish:
          requires:
            - jupyter-extension-build
            - jupyter-extension-test
            - jupyter-extension-frontend-test
            - jupyter-extension-integration-test
            - jupyter-extension-e2e-test
          filters: *only-release-tags
      - jupyter-extension-publish:
          requires:
            - jupyter-extension-build
            - sign-off
          filters: *only-release-tags
      - jupyter-extension-docker-push-tag:
          requires:
            - sign-off
            - jupyter-extension-docker-build
          filters: *only-release-tags
  nightly-release:
    jobs:
      - helm-tests:
          filters: *only-nightly-tags
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS7
                - PPS8
                - S3_AUTH
                - EXAMPLES
          filters: *only-nightly-tags
      - helm-build:
          filters: *only-nightly-tags
          requires:
            - helm-tests
            - integration-tests
      - build-docker-images:
          appVersion: ${CIRCLE_TAG:1}
          filters: *only-nightly-tags
      - build-pachctl-bin:
          version: ${CIRCLE_TAG:1}
          filters: *only-nightly-tags
          requires:
            - helm-tests
            - integration-tests
      - helm-publish:
          name: publish-chart-preview
          preview: true
          filters: *only-nightly-tags
          requires:
            - helm-build
      - release-github-draft:
          filters: *only-nightly-tags
          requires:
            - build-pachctl-bin
      - gcp-prerelease-testing:
          filters: *only-nightly-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - release-docker-hub:
          filters: *only-nightly-tags
          requires:
            - gcp-prerelease-testing
      - release-github:
          filters: *only-nightly-tags
          requires:
            - gcp-prerelease-testing
      - release-hombrew-tap:
          filters: *only-nightly-tags
          requires:
            - release-github #current homebrew tap repo uses gh release, but later can be changed to pipeline artifacts to remove deps
      - helm-publish:
          name: publish-helm-chart
          filters: *only-nightly-tags
          requires:
            - gcp-prerelease-testing

commands:
  install-jupyter-test-deps:
    steps:
      - attach_workspace:
          at: ./
      - run: sudo apt-get update && sudo apt-get install fuse libgbm-dev
      - run:
          name: Fuse options
          command: echo "user_allow_other" | sudo tee -a /etc/fuse.conf > /dev/null
      - run:
          name: Install kind
          command: |
            curl -fLo ./kind-linux-amd64 "https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-amd64" \
            && chmod +x ./kind-linux-amd64 \
            && sudo mv ./kind-linux-amd64 /usr/local/bin/kind
      - run:
          name: Install helm
          command: |
            wget https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz && \
            tar -zxvf helm-v3.7.1-linux-amd64.tar.gz && \
            chmod +x linux-amd64/helm && \
            sudo mv linux-amd64/helm /usr/local/bin/helm
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
            chmod +x kubectl && \
            sudo mv kubectl /usr/local/bin/kubectl
      - run:
          name: Install pachctl and mount-server
          command: |
            sudo mv ./dist-pach/pachctl/pachctl_linux_amd64/pachctl /usr/local/bin/pachctl
            sudo mv ./dist-pach/mount-server/mount-server_linux_amd64/mount-server /usr/local/bin/mount-server
      - run:
          name: Start kind
          command: kind create cluster && kubectl config set current-context kind-kind
      - run:
          name: Install pach
          command: helm install pachd ../etc/helm/pachyderm --set deployTarget=LOCAL,pachd.service.type=NodePort,pachd.image.tag=${CIRCLE_SHA1}
      - run:
          name: Wait for pach # need to wait before testing kubectl as pach is not visible to kubectl yet
          command: |
            sleep 20
            kubectl wait --for=condition=ready pod -l app=pachd --timeout=5m
            pachctl version
      - run:
          name: Setup pach # Get Kind node IP and pass that to pachctl
          command: |-
            echo '{"pachd_address": "grpc://'"$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)":30650'"}' | pachctl config set context local --overwrite
            pachctl config set active-context local

# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1

aliases:
  - &only-release-tags
    branches:
      ignore: /.*/
    tags:
      only: /^v\d+\.\d+\.\d+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$/

orbs:
  go: circleci/go@1.7.1
  gcp-cli: circleci/gcp-cli@2.4.1
  gh: circleci/github-cli@2.1
  codecov: codecov/codecov@1.1.0

parameters:
  machine_image:
    type: string
    default: ubuntu-2004:2022.04.2

executors:
  docker-go:
    docker:
      - image: cimg/go:1.18.4

jobs:
  test-go:
    machine:
      image: << pipeline.parameters.machine_image >>
    resource_class: xlarge
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run: mkdir ${TEST_RESULTS}
      - run: go install gotest.tools/gotestsum@latest
      - run: CGO_ENABLED=0 go install ./src/server/cmd/pachctl
      - run: CGO_ENALBED=0 go install ./src/testing/match
      - restore_cache:
          keys:
            - pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
      - run: etc/testing/circle/install.sh
      - run:
          no_output_timeout: 20m
          command: |-
            GOMAXPROCS=2 KUBECONFIG=/dev/null PACH_CONFIG=/dev/null \
            gotestsum \
            --junitfile ${TEST_RESULTS}/gotestsum-report.xml \
            --rerun-fails \
            --packages="./..." \
            -- \
            -count=1 \
            -coverprofile=${TEST_RESULTS}/coverage.txt -covermode=atomic -coverpkg=./...
      - store_artifacts: # upload test summary for display in Artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results: # upload test results for display in Test Summary
          path: /tmp/test-results
      - codecov/upload:
          file: /tmp/test-results/coverage.txt
      - save_cache:
          key: pach-go-unittest-mod-cache-v1-{{arch}}-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
  integration-tests:
    parameters:
      bucket:
        type: string
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      PPS_BUCKETS: "8"
      GOPROXY: https://proxy.golang.org
      BUCKET: << parameters.bucket >>
    steps:
      - checkout
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - save_cache:
          key: pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
          paths:
            - cached-deps/
      - go/install:
          version: 1.18.4
      - run:
          name: Start minikube
          command: etc/testing/circle/start-minikube.sh
          background: true
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}

      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh
      #Save cache in only one bucket, after build and before running tests,
      #this ensures build cache is saved even when tests fail
      - when:
          condition:
            equal: [MISC, <<parameters.bucket>>]
          steps:
            - save_cache:
                key: pach-go-mod-cache-v2-{{ checksum "go.sum" }}
                paths:
                  - /home/circleci/.go_workspace/pkg/mod
            - save_cache:
                key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
                paths:
                  - /home/circleci/.gocache
      - run: etc/testing/circle/wait-minikube.sh
      - run:
          name: Collect kube events
          command: kubectl get events -o wide --watch --all-namespaces | ts '%Y-%m-%dT%H:%M:%S'
          background: true
      - run:
          name: Install minio
          command: kubectl apply -f etc/testing/minio.yaml
      - run:
          no_output_timeout: 20m
          command: etc/testing/circle/run_tests.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
  helm-tests:
    executor: docker-go
    working_directory: ~/project/etc/helm
    steps:
      - checkout:
          path: ~/project
      - run: mkdir -p /home/circleci/bin
      - restore_cache:
          keys:
            - go-mod-helm-v4-{{ checksum "go.sum" }}
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /home/circleci/bin/helm && chmod +x /home/circleci/bin/helm
      - run:
          name: install kubeval
          command: |
            wget -q https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz -O - | tar -xzO kubeval > /home/circleci/bin/kubeval && chmod +x /home/circleci/bin/kubeval
      - run: make lint
      - run: make test
      - run: make kubeval-gcp
      - run: make kubeval-aws
      - save_cache:
          key: go-mod-helm-v4-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg/mod"
  helm-build:
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - checkout
      - run:
          name: install yq
          command: |
            wget https://github.com/mikefarah/yq/releases/download/v4.23.1/yq_linux_amd64
            mv yq_linux_amd64 /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
      - run:
          name: install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      - run:
          name: make cr release dirs
          command: |
            mkdir -p cr-release-packages/official
            mkdir -p cr-release-packages/preview
      - run:
          name: package release helm chart
          command: |
            helm package -d cr-release-packages/official --version ${CIRCLE_TAG:1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - run:
          name: mark extra chart pre-release
          command: |
            yq e -i '.annotations."artifacthub.io/prerelease"="true"' etc/helm/pachyderm/Chart.yaml
      - run:
          name: package pre-release helm chart
          command: |
            helm package -d cr-release-packages/preview --version ${CIRCLE_TAG:1}-${CIRCLE_SHA1} --app-version ${CIRCLE_TAG:1} etc/helm/pachyderm
      - persist_to_workspace:
          root: .
          paths:
            - cr-release-packages/*
  helm-publish:
    parameters:
      preview:
        type: boolean
        default: false
    docker:
      - image: gcr.io/public-builds/chart-releaser:v1.2.1
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: download and install helm
          command: |
            wget -q https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz -O - | tar -xzO linux-amd64/helm > /usr/local/bin/helm && chmod +x /usr/local/bin/helm
      # Set CR_Token to GH Personal Access Token (Found in pachydermbuildbot GH Acount)
      # The cr index step below will commit back to the repo (via https + GH Token) need to configure git for the commit
      - run:
          name: set git bot user
          command: |
            git config --global user.email buildbot@pachyderm.io
      - run:
          name: set get bot config
          command: |
            git config --global user.name buildbot
      - run:
          # the helmchart git repo hosts the helm repository (gh-pages) Chart releaser only supports https clone, not ssh
          name: Clone Helmchart Repo
          command: git clone https://github.com/pachyderm/helmchart.git helmchart
      - when:
          condition:
            and:
              - equal: [true, << parameters.preview >>]
          steps:
            - run:
                name: publish preview helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/preview --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/preview --push
      - when:
          condition:
            and:
              - equal: [false, << parameters.preview >>]
          steps:
            - run:
                name: publish official helm chart
                command: |
                  cr upload -o pachyderm -r helmchart --package-path cr-release-packages/official --skip-existing
                  cd helmchart && cr index -o pachyderm -r helmchart -c https://helm.pachyderm.com --package-path ../cr-release-packages/official --push
  nightly-load:
    parameters:
      bucket:
        type: string
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    environment:
      BUCKET: << parameters.bucket >>
      GOOGLE_PROJECT_ID: build-release-001
      GOOGLE_COMPUTE_ZONE: us-east1-b
      GOOGLE_COMPUTE_REGION: us-east1
    steps:
      - checkout
      - gcp-cli/initialize
      - run: |
          echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          command: etc/testing/circle/run_all_load_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  rootless:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run: etc/testing/circle/rootless_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
  deploy-tests:
    resource_class: xlarge
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - run:
          name: setup env vars
          command: |
            echo 'export GOCACHE=/home/circleci/.gocache' >> $BASH_ENV
            echo 'export GOPATH=/home/circleci/.go_workspace' >> $BASH_ENV

            echo 'export PATH=/home/circleci/project/cached-deps:$PATH' >> $BASH_ENV
            echo 'export PATH=$GOPATH/bin:$PATH' >> $BASH_ENV
      - restore_cache:
          keys:
            - pach-build-dependencies-v2-{{ checksum "etc/testing/circle/install.sh" }}
      - run: etc/testing/circle/install.sh
      - run:
          name: Collect node stats
          command: sar 10 -BbdHwzS -I SUM -n DEV -q -r ALL -u ALL -h
          background: true
      - run: etc/testing/circle/start-minikube.sh
      # The build cache will grow indefinitely, so we rotate the cache once a week.
      # This ensures the time to restore the cache isn't longer than the speedup in compilation.
      - run: "echo $(($(date +%s)/604800)) > current_week"
      - restore_cache:
          keys:
            - pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
            - pach-go-build-cache-v1-master-{{ checksum "current_week" }}
      # Only restore the module cache based on an exact match for go.sum.
      # This also avoids accumulating old versions of modules over time.
      # Note: This gets saves in the main test runs, no need to save here
      - restore_cache:
          keys:
            - pach-go-mod-cache-v2-{{ checksum "go.sum" }}
      - run: etc/testing/circle/build.sh
      - save_cache:
          key: pach-go-build-cache-v1-{{ .Branch }}-{{ checksum "current_week" }}
          paths:
            - /home/circleci/.gocache
      - run: etc/testing/circle/deploy_test.sh | ts '%Y-%m-%dT%H:%M:%S'
      - run:
          command: etc/testing/circle/upload_stats.sh
          when: always
      - run:
          name: Dump debugging info in case of failure
          when: on_fail
          command: etc/testing/circle/kube_debug.sh
      - store_test_results:
          path: /tmp/test-results
  # build pachctl and push to GCS bucket, so that it can be bundled into the
  # Jupyter-Pachyderm extension
  build-docker-images:
    parameters:
      appVersion:
        type: string
        default: "0.0.0"
    resource_class: large
    executor: docker-go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: Build Docker
          command: |
            v=<< parameters.appVersion >>
            additional=${v%%-*}
            index=${#additional}
            make docker-build VERSION=${v} VERSION_ADDITIONAL=${v:index}
      - run:
          name: Push docker
          command: make docker-push VERSION=${CIRCLE_SHA1}
  build-pachctl-bin:
    parameters:
      version:
        type: string
      upload:
        description: Determines if this job should perform an extra step to upload bin to a gcp bucket.
        type: boolean
        default: false
    resource_class: large
    executor: docker-go
    steps:
      - checkout
      - run:
          name: Download utilities
          command: |
            mkdir -p /home/circleci/bin
            wget https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz
            tar zxvf goreleaser_Linux_x86_64.tar.gz -C /home/circleci/bin goreleaser
            rm -rf goreleaser_Linux_x86_64.tar.gz
            wget https://github.com/chainlink/gcsupload/releases/download/v0.2.0/gcsupload_0.2.0_Linux_x86_64.tar.gz
            tar zxvf gcsupload_0.2.0_Linux_x86_64.tar.gz -C /home/circleci/bin gcsupload
            rm -rf gcsupload_0.2.0_Linux_x86_64.tar.gz
            echo 'export PATH=/home/circle/bin:$PATH' >> $BASH_ENV
      - when:
          condition:
            and:
              - equal: [true, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and uploads pachctl amd64 binary for extensions with a git commit SHA.
                command: |
                  make release-pachctl GORELSNAP=--snapshot VERSION=<< parameters.version >>
                  make release-mount-server GORELSNAP=--snapshot VERSION=<< parameters.version >>
            - run:
                name: upload pachctl binaries
                command: |
                  echo $PACHCTL_GOOGLE_UPLOAD_CREDS > /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/pachctl/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  cd /home/circleci/dist-pach/mount-server/
                  gcsupload -b pachyderm-builds -f `find * -name \*amd64.tar.gz` -k /home/circleci/gcpcreds.json
                  rm /home/circleci/gcpcreds.json
      - when:
          condition:
            and:
              - equal: [false, << parameters.upload >>]
          steps:
            - run:
                name: build pachctl bin
                description: Builds and prepares all pachctl binaries for release.
                command: |
                  v=<< parameters.version >>
                  additional=${v%%-*}
                  index=${#additional}
                  make release-pachctl GORELSNAP=--snapshot VERSION=${v} VERSION_ADDITIONAL=${v:index}
            - persist_to_workspace:
                root: ../
                paths:
                  - dist-pach/*
  check-prettier:
    docker:
      - image: cimg/node:16.11.0
    steps:
      - checkout
      - run: sudo npm install -g prettier
      - run: prettier -c etc/helm/pachyderm/values.yaml .circleci/config.yml .circleci/main.yml
  jsonnet-lint:
    resource_class: small
    docker:
      - image: cimg/go:1.18.4
    steps:
      - checkout
      - run:
          name: Install go-jsonnet
          command: |
            go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest
      - run:
          name: lint all jsonnet files
          command: |
            find . -maxdepth 10 -name \*.jsonnet | xargs jsonnet-lint
  test-envoy:
    docker:
      - image: envoyproxy/envoy:v1.22.0
        entrypoint: /bin/sh
    steps:
      - run: apt update
      - run: apt install -y make wget git ssh
      - checkout
      - run: wget https://github.com/google/jsonnet/releases/download/v0.17.0/jsonnet-bin-v0.17.0-linux.tar.gz
      - run: tar xzvf jsonnet-bin-v0.17.0-linux.tar.gz
      - run: mv jsonnet jsonnetfmt /usr/local/bin
      - run: make -C etc/generate-envoy-config test
  push_redhat:
    executor: docker-go
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: Install Goreleaser
          command: |
            curl -Lo - https://github.com/goreleaser/goreleaser/releases/download/v1.4.1/goreleaser_Linux_x86_64.tar.gz | sudo tar -C /usr/local/bin -xvzf - goreleaser
      - run: etc/redhat/push_images.sh
  pachyderm-prerelease-testing:
    resource_class: large
    machine:
      image: << pipeline.parameters.machine_image >>
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: echo bins
          command: |
            ls -la dist-pach/*
            ls -la cr-release-packages/*
      - run:
          name: "test examples"
          command: |
            etc/testing/circle/run_release_tests.sh
          no_output_timeout: 1h
      - store_artifacts:
          path: /tmp/debug-dump
          destination: debug-dump
  release-github-draft:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release draft
          command: |
            if [[ $CIRCLE_TAG == *"-"* ]];
            then
                echo "git tag has - assuming prerelease."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* --generate-notes --prerelease
            else
                echo "regular release."
                gh release create --draft ${CIRCLE_TAG} --title ${CIRCLE_TAG:1} ./dist-pach/pachctl/pachctl_${CIRCLE_TAG:1}* --generate-notes
            fi
  release-github:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - gh/setup:
          version: 2.13.0
      - run:
          name: create github release
          command: |
            gh release edit ${CIRCLE_TAG} --draft=false
  release-docker-hub:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: "20.10.12"
      - run:
          name: pachydermbuildbot docker login
          command: |
            echo "$DOCKER_PWD" | docker login --username pachydermbuildbot --password-stdin
      - run:
          name: pull docker images
          command: |
            make VERSION=$CIRCLE_SHA1 docker-pull
      - run:
          name: retag docker images
          command: |
            docker tag pachyderm/pachd:$CIRCLE_SHA1 pachyderm/pachd:${CIRCLE_TAG:1}
            docker tag pachyderm/worker:$CIRCLE_SHA1 pachyderm/worker:${CIRCLE_TAG:1}
            docker tag pachyderm/pachctl:$CIRCLE_SHA1 pachyderm/pachctl:${CIRCLE_TAG:1}
            docker tag pachyderm/mount-server:$CIRCLE_SHA1 pachyderm/mount-server:${CIRCLE_TAG:1}
      - run:
          name: push docker images
          command: |
            make VERSION=${CIRCLE_TAG:1} docker-push
  release-hombrew-tap:
    executor: docker-go
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "4c:1c:ff:56:c1:d0:07:03:23:08:08:2e:e6:16:30:1d"
      - run:
          name: setup pachydermbuildbot git
          command: |
            git config --global user.email "buildbot@pachyderm.io"
            git config --global user.name "pachydermbuildbot"
      - run:
          name: update homebrew formula
          description: updates homebrew after determining release type.
          # this checks if it is a custom, pre, or alpha release and passes that additional string so homebrew knows to create new homebrew index.
          # $additional is currently just a flag, that value itself is not used.
          command: |
            v=${CIRCLE_TAG}
            prefix=${v%%-*}
            index=${#prefix}
            additional=${v:index}
            ./etc/build/update_homebrew.sh ${CIRCLE_TAG:1} ${additional}
workflows:
  integration-tests:
    jobs:
      - build-docker-images
      - build-pachctl-bin:
          version: $CIRCLE_SHA1
          upload: true
      - check-prettier
      - jsonnet-lint
      - test-go
      - test-envoy
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS7
                - PPS8
                - S3_AUTH
                - EXAMPLES
  helm-tests:
    jobs:
      - helm-tests
  nightly_load_tests:
    triggers:
      - schedule:
          cron: "0 6 * * *"
          filters:
            branches:
              only:
                - master
                - 2.1.x
                - 2.2.x
    jobs:
      - nightly-load:
          matrix:
            parameters:
              bucket:
                - LOAD1
                - LOAD2
                - LOAD3
                - LOAD4
                - LOAD5
                - LOAD6
                - LOAD7
                - LOAD8
                - LOAD9
                - LOAD10
                - LOAD11
                - LOAD12
                  # Disabled for now since they take too long, may consider reenabling later.
                  #- LOAD13
                  #- LOAD14
                  #- LOAD15
  rootless-tests:
    jobs:
      - rootless
  deploy-tests:
    jobs:
      - deploy-tests
  release:
    jobs:
      - helm-tests:
          filters: *only-release-tags
      - integration-tests:
          matrix:
            parameters:
              bucket:
                - MISC
                # If you want to update the number of PPS buckets, you'll need to
                # update the value of PPS_BUCKETS above
                - AUTH
                - ENTERPRISE
                - PFS
                - PPS1
                - PPS2
                - PPS3
                - PPS4
                - PPS5
                - PPS6
                - PPS7
                - PPS8
                - S3_AUTH
                - EXAMPLES
          filters: *only-release-tags
      - helm-build:
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - build-docker-images:
          appVersion: ${CIRCLE_TAG:1}
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - build-pachctl-bin:
          version: ${CIRCLE_TAG:1}
          filters: *only-release-tags
          requires:
            - helm-tests
            - integration-tests
      - helm-publish:
          name: publish-chart-preview
          preview: true
          filters: *only-release-tags
          requires:
            - helm-build
      - release-github-draft:
          filters: *only-release-tags
          requires:
            - build-pachctl-bin
      - pachyderm-prerelease-testing:
          filters: *only-release-tags
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - sign-off:
          filters: *only-release-tags
          type: approval
          requires:
            - build-docker-images
            - build-pachctl-bin
            - publish-chart-preview
            - release-github-draft
      - release-docker-hub:
          filters: *only-release-tags
          requires:
            - sign-off
      - push_redhat:
          filters: *only-release-tags
          requires:
            - sign-off
      - release-github:
          filters: *only-release-tags
          requires:
            - sign-off
      - release-hombrew-tap:
          filters: *only-release-tags
          requires:
            - release-github #current homebrew tap repo uses gh release, but later can be changed to pipeline artifacts to remove deps
      - helm-publish:
          name: publish-helm-chart
          filters: *only-release-tags
          requires:
            - sign-off

{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/BatchTransactionRequest",
    "definitions": {
        "BatchTransactionRequest": {
            "properties": {
                "requests": {
                    "items": {
                        "$ref": "#/definitions/transaction_v2.TransactionRequest"
                    },
                    "additionalProperties": false,
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Batch Transaction Request"
        },
        "pfs_v2.Branch": {
            "properties": {
                "repo": {
                    "$ref": "#/definitions/pfs_v2.Repo",
                    "additionalProperties": false
                },
                "name": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Branch"
        },
        "pfs_v2.Commit": {
            "properties": {
                "repo": {
                    "$ref": "#/definitions/pfs_v2.Repo",
                    "additionalProperties": false
                },
                "id": {
                    "type": "string"
                },
                "branch": {
                    "$ref": "#/definitions/pfs_v2.Branch",
                    "additionalProperties": false,
                    "description": "only used by the client"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Commit",
            "description": "Commit is a reference to a commit (e.g. the collection of branches and the collection of currently-open commits in etcd are collections of Commit protos)"
        },
        "pfs_v2.CommitSet": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Commit Set"
        },
        "pfs_v2.CreateBranchRequest": {
            "properties": {
                "head": {
                    "$ref": "#/definitions/pfs_v2.Commit",
                    "additionalProperties": false
                },
                "branch": {
                    "$ref": "#/definitions/pfs_v2.Branch",
                    "additionalProperties": false
                },
                "provenance": {
                    "items": {
                        "$ref": "#/definitions/pfs_v2.Branch"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "trigger": {
                    "$ref": "#/definitions/pfs_v2.Trigger",
                    "additionalProperties": false
                },
                "new_commit_set": {
                    "type": "boolean",
                    "description": "overrides the default behavior of using the same CommitSet as 'head'"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Create Branch Request"
        },
        "pfs_v2.CreateRepoRequest": {
            "properties": {
                "repo": {
                    "$ref": "#/definitions/pfs_v2.Repo",
                    "additionalProperties": false
                },
                "description": {
                    "type": "string"
                },
                "update": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "PFS API",
            "description": "PFS API"
        },
        "pfs_v2.DeleteBranchRequest": {
            "properties": {
                "branch": {
                    "$ref": "#/definitions/pfs_v2.Branch",
                    "additionalProperties": false
                },
                "force": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Delete Branch Request"
        },
        "pfs_v2.DeleteRepoRequest": {
            "properties": {
                "repo": {
                    "$ref": "#/definitions/pfs_v2.Repo",
                    "additionalProperties": false
                },
                "force": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Delete Repo Request"
        },
        "pfs_v2.FinishCommitRequest": {
            "properties": {
                "commit": {
                    "$ref": "#/definitions/pfs_v2.Commit",
                    "additionalProperties": false
                },
                "description": {
                    "type": "string",
                    "description": "description is a user-provided string describing this commit. Setting this will overwrite the description set in StartCommit"
                },
                "error": {
                    "type": "string"
                },
                "force": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Finish Commit Request"
        },
        "pfs_v2.ObjectStorageEgress": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Object Storage Egress"
        },
        "pfs_v2.Project": {
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Project"
        },
        "pfs_v2.Repo": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "project": {
                    "$ref": "#/definitions/pfs_v2.Project",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "//  PFS Data structures (stored in etcd)",
            "description": "//  PFS Data structures (stored in etcd)"
        },
        "pfs_v2.SQLDatabaseEgress": {
            "properties": {
                "url": {
                    "type": "string"
                },
                "file_format": {
                    "$ref": "#/definitions/pfs_v2.SQLDatabaseEgress.FileFormat",
                    "additionalProperties": false
                },
                "secret": {
                    "$ref": "#/definitions/pfs_v2.SQLDatabaseEgress.Secret",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "SQL Database Egress"
        },
        "pfs_v2.SQLDatabaseEgress.FileFormat": {
            "properties": {
                "type": {
                    "enum": [
                        "UNKNOWN",
                        "CSV",
                        "JSON",
                        "PARQUET"
                    ],
                    "type": "string",
                    "title": "Type"
                },
                "columns": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "File Format"
        },
        "pfs_v2.SQLDatabaseEgress.Secret": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Secret"
        },
        "pfs_v2.SquashCommitSetRequest": {
            "properties": {
                "commit_set": {
                    "$ref": "#/definitions/pfs_v2.CommitSet",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Squash Commit Set Request"
        },
        "pfs_v2.StartCommitRequest": {
            "properties": {
                "parent": {
                    "$ref": "#/definitions/pfs_v2.Commit",
                    "additionalProperties": false,
                    "description": "parent may be empty in which case the commit that Branch points to will be used as the parent. If the branch does not exist, the commit will have no parent."
                },
                "description": {
                    "type": "string",
                    "description": "description is a user-provided string describing this commit"
                },
                "branch": {
                    "$ref": "#/definitions/pfs_v2.Branch",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Start Commit Request"
        },
        "pfs_v2.Trigger": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "Which branch this trigger refers to"
                },
                "all": {
                    "type": "boolean",
                    "description": "All indicates that all conditions must be satisfied before the trigger happens, otherwise any conditions being satisfied will trigger it."
                },
                "rate_limit_spec": {
                    "type": "string",
                    "description": "Triggers if the rate limit spec (cron expression) has been satisfied since the last trigger."
                },
                "size": {
                    "type": "string",
                    "description": "Triggers if there's been `size` new data added since the last trigger."
                },
                "commits": {
                    "type": "integer",
                    "description": "Triggers if there's been `commits` new commits added since the last trigger."
                },
                "cron_spec": {
                    "type": "string",
                    "description": "Creates a background process which fires the trigger on the schedule provided by the cron spec. This condition is mutually exclusive with respect to the others, so setting this will result with the trigger only firing based on the cron schedule."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Trigger",
            "description": "Trigger defines the conditions under which a head is moved, and to which branch it is moved."
        },
        "pps_v2.CreatePipelineRequest": {
            "properties": {
                "pipeline": {
                    "$ref": "#/definitions/pps_v2.Pipeline",
                    "additionalProperties": false
                },
                "tf_job": {
                    "$ref": "#/definitions/pps_v2.TFJob",
                    "additionalProperties": false,
                    "description": "tf_job encodes a Kubeflow TFJob spec. Pachyderm uses this to create TFJobs when running in a kubernetes cluster on which kubeflow has been installed. Exactly one of 'tf_job' and 'transform' should be set"
                },
                "transform": {
                    "$ref": "#/definitions/pps_v2.Transform",
                    "additionalProperties": false
                },
                "parallelism_spec": {
                    "$ref": "#/definitions/pps_v2.ParallelismSpec",
                    "additionalProperties": false
                },
                "egress": {
                    "$ref": "#/definitions/pps_v2.Egress",
                    "additionalProperties": false
                },
                "output_branch": {
                    "type": "string"
                },
                "s3_out": {
                    "type": "boolean",
                    "description": "s3_out, if set, requires a pipeline's user to write to its output repo via Pachyderm's s3 gateway (if set, workers will serve Pachyderm's s3 gateway API at http://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.out/my/file). In this mode /pfs_v2/out won't be walked or uploaded, and the s3 gateway service in the workers will allow writes to the job's output commit"
                },
                "resource_requests": {
                    "$ref": "#/definitions/pps_v2.ResourceSpec",
                    "additionalProperties": false
                },
                "resource_limits": {
                    "$ref": "#/definitions/pps_v2.ResourceSpec",
                    "additionalProperties": false
                },
                "sidecar_resource_limits": {
                    "$ref": "#/definitions/pps_v2.ResourceSpec",
                    "additionalProperties": false
                },
                "input": {
                    "$ref": "#/definitions/pps_v2.Input",
                    "additionalProperties": false
                },
                "description": {
                    "type": "string"
                },
                "service": {
                    "$ref": "#/definitions/pps_v2.Service",
                    "additionalProperties": false
                },
                "spout": {
                    "$ref": "#/definitions/pps_v2.Spout",
                    "additionalProperties": false
                },
                "datum_set_spec": {
                    "$ref": "#/definitions/pps_v2.DatumSetSpec",
                    "additionalProperties": false
                },
                "datum_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "format": "regex"
                },
                "job_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "format": "regex"
                },
                "salt": {
                    "type": "string"
                },
                "datum_tries": {
                    "type": "integer"
                },
                "scheduling_spec": {
                    "$ref": "#/definitions/pps_v2.SchedulingSpec",
                    "additionalProperties": false
                },
                "pod_spec": {
                    "type": "string",
                    "description": "deprecated, use pod_patch below"
                },
                "pod_patch": {
                    "type": "string",
                    "description": "a json patch will be applied to the pipeline's pod_spec before it's created;"
                },
                "spec_commit": {
                    "$ref": "#/definitions/pfs_v2.Commit",
                    "additionalProperties": false
                },
                "metadata": {
                    "$ref": "#/definitions/pps_v2.Metadata",
                    "additionalProperties": false
                },
                "reprocess_spec": {
                    "type": "string"
                },
                "autoscaling": {
                    "type": "boolean"
                },
                "tolerations": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.Toleration"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "sidecar_resource_requests": {
                    "$ref": "#/definitions/pps_v2.ResourceSpec",
                    "additionalProperties": false
                },
                "dry_run": {
                    "type": "boolean"
                },
                "determined": {
                    "$ref": "#/definitions/pps_v2.Determined",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Create Pipeline Request"
        },
        "pps_v2.CreatePipelineTransaction": {
            "properties": {
                "create_pipeline_request": {
                    "$ref": "#/definitions/pps_v2.CreatePipelineRequest",
                    "additionalProperties": false
                },
                "user_json": {
                    "type": "string",
                    "description": "the JSON the user originally submitted"
                },
                "effective_json": {
                    "type": "string",
                    "description": "the effective spec: the result of merging the user JSON into the cluster defaults"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Create Pipeline Transaction"
        },
        "pps_v2.CronInput": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "project": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "commit": {
                    "type": "string"
                },
                "spec": {
                    "type": "string"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Overwrite, if true, will expose a single datum that gets overwritten each tick. If false, it will create a new datum for each tick."
                },
                "start": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Cron Input"
        },
        "pps_v2.DatumSetSpec": {
            "properties": {
                "number": {
                    "type": "integer",
                    "description": "number, if nonzero, specifies that each datum set should contain `number` datums. Datum sets may contain fewer if the total number of datums don't divide evenly."
                },
                "size_bytes": {
                    "type": "integer",
                    "description": "size_bytes, if nonzero, specifies a target size for each datum set. Datum sets may be larger or smaller than size_bytes, but will usually be pretty close to size_bytes in size."
                },
                "per_worker": {
                    "type": "integer",
                    "description": "per_worker, if nonzero, specifies how many datum sets should be created for each worker. It can't be set with number or size_bytes."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Datum Set Spec",
            "description": "DatumSetSpec specifies how a pipeline should split its datums into datum sets."
        },
        "pps_v2.Determined": {
            "properties": {
                "workspaces": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Determined"
        },
        "pps_v2.Egress": {
            "properties": {
                "URL": {
                    "type": "string"
                },
                "object_storage": {
                    "$ref": "#/definitions/pfs_v2.ObjectStorageEgress",
                    "additionalProperties": false
                },
                "sql_database": {
                    "$ref": "#/definitions/pfs_v2.SQLDatabaseEgress",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "object_storage"
                    ]
                },
                {
                    "required": [
                        "sql_database"
                    ]
                }
            ],
            "title": "Egress"
        },
        "pps_v2.GPUSpec": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of GPU (nvidia.com/gpu or amd.com/gpu for example)."
                },
                "number": {
                    "type": "integer",
                    "description": "The number of GPUs to request."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "GPU Spec"
        },
        "pps_v2.Input": {
            "properties": {
                "pfs": {
                    "$ref": "#/definitions/pps_v2.PFSInput",
                    "additionalProperties": false
                },
                "join": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.Input"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "group": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.Input"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "cross": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.Input"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "union": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.Input"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "cron": {
                    "$ref": "#/definitions/pps_v2.CronInput",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Input"
        },
        "pps_v2.Job": {
            "properties": {
                "pipeline": {
                    "$ref": "#/definitions/pps_v2.Pipeline",
                    "additionalProperties": false
                },
                "id": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Job"
        },
        "pps_v2.Metadata": {
            "properties": {
                "annotations": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Metadata"
        },
        "pps_v2.PFSInput": {
            "properties": {
                "project": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "repo": {
                    "type": "string"
                },
                "repo_type": {
                    "type": "string"
                },
                "branch": {
                    "type": "string"
                },
                "commit": {
                    "type": "string"
                },
                "glob": {
                    "type": "string"
                },
                "join_on": {
                    "type": "string"
                },
                "outer_join": {
                    "type": "boolean"
                },
                "group_by": {
                    "type": "string"
                },
                "lazy": {
                    "type": "boolean"
                },
                "empty_files": {
                    "type": "boolean",
                    "description": "EmptyFiles, if true, will cause files from this PFS input to be presented as empty files. This is useful in shuffle pipelines where you want to read the names of files and reorganize them using symlinks."
                },
                "s3": {
                    "type": "boolean",
                    "description": "S3, if true, will cause the worker to NOT download or link files from this input into the /pfs_v2 directory. Instead, an instance of our S3 gateway service will run on each of the sidecars, and data can be retrieved from this input by querying http://\u003cpipeline\u003e-s3.\u003cnamespace\u003e/\u003cjob id\u003e.\u003cinput\u003e/my/file"
                },
                "trigger": {
                    "$ref": "#/definitions/pfs_v2.Trigger",
                    "additionalProperties": false,
                    "description": "Trigger defines when this input is processed by the pipeline, if it's nil the input is processed anytime something is committed to the input branch."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "PFS Input"
        },
        "pps_v2.ParallelismSpec": {
            "properties": {
                "constant": {
                    "type": "integer",
                    "description": "Starts the pipeline/job with a 'constant' workers, unless 'constant' is zero. If 'constant' is zero (which is the zero value of ParallelismSpec), then Pachyderm will choose the number of workers that is started, (currently it chooses the number of workers in the cluster)"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Parallelism Spec"
        },
        "pps_v2.Pipeline": {
            "properties": {
                "project": {
                    "$ref": "#/definitions/pfs_v2.Project",
                    "additionalProperties": false
                },
                "name": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Pipeline"
        },
        "pps_v2.ProcessStats": {
            "properties": {
                "download_time": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "format": "regex"
                },
                "process_time": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "format": "regex"
                },
                "upload_time": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "format": "regex"
                },
                "download_bytes": {
                    "type": "integer"
                },
                "upload_bytes": {
                    "type": "integer"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Process Stats"
        },
        "pps_v2.ResourceSpec": {
            "properties": {
                "cpu": {
                    "type": "number",
                    "description": "The number of CPUs each worker needs (partial values are allowed, and encouraged)"
                },
                "memory": {
                    "type": "string",
                    "description": "The amount of memory each worker needs (in bytes, with allowed SI suffixes (M, K, G, Mi, Ki, Gi, etc)."
                },
                "gpu": {
                    "$ref": "#/definitions/pps_v2.GPUSpec",
                    "additionalProperties": false,
                    "description": "The spec for GPU resources."
                },
                "disk": {
                    "type": "string",
                    "description": "The amount of ephemeral storage each worker needs (in bytes, with allowed SI suffixes (M, K, G, Mi, Ki, Gi, etc)."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Resource Spec",
            "description": "ResourceSpec describes the amount of resources that pipeline pods should request from kubernetes, for scheduling."
        },
        "pps_v2.SchedulingSpec": {
            "properties": {
                "node_selector": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "priority_class_name": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Scheduling Spec"
        },
        "pps_v2.SecretMount": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name must be the name of the secret in kubernetes."
                },
                "key": {
                    "type": "string",
                    "description": "Key of the secret to load into env_var, this field only has meaning if EnvVar != \"\"."
                },
                "mount_path": {
                    "type": "string"
                },
                "env_var": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Secret Mount"
        },
        "pps_v2.Service": {
            "properties": {
                "internal_port": {
                    "type": "integer"
                },
                "external_port": {
                    "type": "integer"
                },
                "ip": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Service"
        },
        "pps_v2.Spout": {
            "properties": {
                "service": {
                    "$ref": "#/definitions/pps_v2.Service",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Spout"
        },
        "pps_v2.StopJobRequest": {
            "properties": {
                "job": {
                    "$ref": "#/definitions/pps_v2.Job",
                    "additionalProperties": false
                },
                "reason": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Stop Job Request"
        },
        "pps_v2.TFJob": {
            "properties": {
                "tf_job": {
                    "type": "string",
                    "description": "tf_job  is a serialized Kubeflow TFJob spec. Pachyderm sends this directly to a kubernetes cluster on which kubeflow has been installed, instead of creating a pipeline ReplicationController as it normally would."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "TF Job"
        },
        "pps_v2.Toleration": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "key is the taint key that the toleration applies to.  Empty means match all taint keys."
                },
                "operator": {
                    "enum": [
                        "EMPTY",
                        "EXISTS",
                        "EQUAL"
                    ],
                    "type": "string",
                    "title": "Toleration Operator",
                    "description": "TolerationOperator relates a Toleration's key to its value."
                },
                "value": {
                    "type": "string",
                    "description": "value is the taint value the toleration matches to."
                },
                "effect": {
                    "enum": [
                        "ALL_EFFECTS",
                        "NO_SCHEDULE",
                        "PREFER_NO_SCHEDULE",
                        "NO_EXECUTE"
                    ],
                    "type": "string",
                    "title": "Taint Effect",
                    "description": "TaintEffect is an effect that can be matched by a toleration."
                },
                "toleration_seconds": {
                    "additionalProperties": false,
                    "type": "integer",
                    "description": "toleration_seconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint.  If not set, tolerate the taint forever."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Toleration",
            "description": "Toleration is a Kubernetes toleration."
        },
        "pps_v2.Transform": {
            "properties": {
                "image": {
                    "type": "string"
                },
                "cmd": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "err_cmd": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "env": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object"
                },
                "secrets": {
                    "items": {
                        "$ref": "#/definitions/pps_v2.SecretMount"
                    },
                    "additionalProperties": false,
                    "type": "array"
                },
                "image_pull_secrets": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "stdin": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "err_stdin": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "accept_return_code": {
                    "items": {
                        "type": "integer"
                    },
                    "type": "array"
                },
                "debug": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string"
                },
                "working_dir": {
                    "type": "string"
                },
                "dockerfile": {
                    "type": "string"
                },
                "memory_volume": {
                    "type": "boolean"
                },
                "datum_batching": {
                    "type": "boolean"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Transform"
        },
        "pps_v2.UpdateJobStateRequest": {
            "properties": {
                "job": {
                    "$ref": "#/definitions/pps_v2.Job",
                    "additionalProperties": false
                },
                "state": {
                    "enum": [
                        "JOB_STATE_UNKNOWN",
                        "JOB_CREATED",
                        "JOB_STARTING",
                        "JOB_RUNNING",
                        "JOB_FAILURE",
                        "JOB_SUCCESS",
                        "JOB_KILLED",
                        "JOB_EGRESSING",
                        "JOB_FINISHING",
                        "JOB_UNRUNNABLE"
                    ],
                    "type": "string",
                    "title": "Job State"
                },
                "reason": {
                    "type": "string"
                },
                "restart": {
                    "type": "integer"
                },
                "data_processed": {
                    "type": "integer"
                },
                "data_skipped": {
                    "type": "integer"
                },
                "data_failed": {
                    "type": "integer"
                },
                "data_recovered": {
                    "type": "integer"
                },
                "data_total": {
                    "type": "integer"
                },
                "stats": {
                    "$ref": "#/definitions/pps_v2.ProcessStats",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Update Job State Request"
        },
        "transaction_v2.TransactionRequest": {
            "properties": {
                "create_repo": {
                    "$ref": "#/definitions/pfs_v2.CreateRepoRequest",
                    "additionalProperties": false,
                    "description": "Exactly one of these fields should be set"
                },
                "delete_repo": {
                    "$ref": "#/definitions/pfs_v2.DeleteRepoRequest",
                    "additionalProperties": false
                },
                "start_commit": {
                    "$ref": "#/definitions/pfs_v2.StartCommitRequest",
                    "additionalProperties": false
                },
                "finish_commit": {
                    "$ref": "#/definitions/pfs_v2.FinishCommitRequest",
                    "additionalProperties": false
                },
                "squash_commit_set": {
                    "$ref": "#/definitions/pfs_v2.SquashCommitSetRequest",
                    "additionalProperties": false
                },
                "create_branch": {
                    "$ref": "#/definitions/pfs_v2.CreateBranchRequest",
                    "additionalProperties": false
                },
                "delete_branch": {
                    "$ref": "#/definitions/pfs_v2.DeleteBranchRequest",
                    "additionalProperties": false
                },
                "update_job_state": {
                    "$ref": "#/definitions/pps_v2.UpdateJobStateRequest",
                    "additionalProperties": false
                },
                "stop_job": {
                    "$ref": "#/definitions/pps_v2.StopJobRequest",
                    "additionalProperties": false
                },
                "create_pipeline_v2": {
                    "$ref": "#/definitions/pps_v2.CreatePipelineTransaction",
                    "additionalProperties": false
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Transaction Request"
        }
    }
}
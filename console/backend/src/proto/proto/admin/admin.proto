syntax = "proto3";

package admin_v2;
option go_package = "github.com/pachyderm/pachyderm/v2/src/admin";

import "version/versionpb/version.proto";
import "pfs/pfs.proto";

message ClusterInfo {
  string id = 1;
  string deployment_id = 2;
  // True if the server is capable of generating warnings.
  bool warnings_ok = 3;
  // Warnings about the client configuration.
  repeated string warnings = 4;
  // The configured public URL of Pachyderm.
  string proxy_host = 5;
  // True if Pachyderm is served over TLS (HTTPS).
  bool proxy_tls = 6;
  // True if this pachd is in "paused" mode.
  bool paused = 7;
  // Any HTTP links that the client might want to be aware of.
  WebResource web_resources = 8;
  // Cluster-level metadata.
  map<string, string> metadata = 9;
}

message InspectClusterRequest {
  // The version of the client that's connecting; used by the server to warn about too-old (or
  // too-new!) clients.
  versionpb_v2.Version client_version = 1;
  // If CurrentProject is set, then InspectCluster will return an error if the
  // project does not exist.
  pfs_v2.Project current_project = 2;
}

// WebResource contains URL prefixes of common HTTP functions.
message WebResource {
  // The base URL of the archive server; append a filename to this.  Empty if the archive server is
  // not exposed.
  string archive_download_base_url = 1;
  // Where to find the CreatePipelineRequest JSON schema; if this server is not accessible via a
  // URL, then a link to Github is provided based on the baked-in version of the server.
  string create_pipeline_request_json_schema_url = 2;
}

service API {
  rpc InspectCluster(InspectClusterRequest) returns (ClusterInfo) {}
}

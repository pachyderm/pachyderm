load("@jupyter-pip-requirements//:requirements.bzl", "all_data_requirements", "all_requirements")
load("@jupyter-pip-requirements-dev//:requirements.bzl", all_data_requirements_dev = "all_data_requirements", all_requirements_dev = "all_requirements")
load("@rules_python//python:defs.bzl", "py_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_pyvenv//:venv.bzl", "py_venv")

exports_files([
    "requirements.txt",
    "requirements-dev.txt",
])

# To create lock files: bazel run :requirements.update
compile_pip_requirements(
    name = "requirements",
    src = "requirements.txt",
    requirements_txt = "requirements-lock.txt",
)

# To create lock files: bazel run :requirements-dev.update
compile_pip_requirements(
    name = "requirements-dev",
    src = "requirements-dev.txt",
    requirements_darwin = "requirements-dev-lock-darwin.txt",
    requirements_linux = "requirements-dev-lock-linux.txt",
    requirements_txt = "requirements-dev-lock.txt",
)

# Create a virtual environment at ./venv: bazel :venv
py_venv(
    name = "venv",
    data = all_data_requirements + all_data_requirements_dev,
    venv_location = "jupyter-extension/venv",
    deps = all_requirements + all_requirements_dev,
)

py_test(
    name = "check-manifest",
    srcs = ["scripts/run_check_manifest.py"],
    data = glob(
        ["**"],
        exclude = [
            ".git/**",
            ".ipynb_checkpoints/**",
            ".jestcache/**",
            "cypress/**",
            "dist/**",
            "*.egg-info/**",
            "lib/**",
            "node_modules/**",
            "scripts/**",
            "venv/**",
        ],
    ),
    main = "scripts/run_check_manifest.py",
    deps = [
        "@jupyter-pip-requirements-dev//check_manifest:pkg",
        "@jupyter-pip-requirements-dev//setuptools:pkg",
    ],
)

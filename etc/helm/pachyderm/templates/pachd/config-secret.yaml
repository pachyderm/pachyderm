{{- /*
SPDX-FileCopyrightText: Pachyderm, Inc. <info@pachyderm.com>
SPDX-License-Identifier: Apache-2.0
*/ -}}
{{ if .Values.pachd.activateEnterprise }}
{{- $oidcSecret := "" -}}
{{- $enterpriseSecret := "" -}}
{{- $rootToken := "" -}}
{{- if .Release.IsUpgrade -}}
{{- $oidcSecret = required "For an upgrade release, a value is required for pachd.oauthClientSecret" .Values.pachd.oauthClientSecret -}}
{{- $enterpriseSecret = required "For an upgrade release, a value is required for pachd.enterpriseSecret" .Values.pachd.enterpriseSecret -}}
{{- $rootToken = required "For an upgrade release, a value is required for pachd.rootToken" .Values.pachd.rootToken -}}
{{- else -}}
{{- $enterpriseSecret = default (randAlphaNum 32) .Values.pachd.enterpriseSecret -}}
{{- $oidcSecret = default (randAlphaNum 32) .Values.pachd.oauthClientSecret -}}
{{- $rootToken = default (randAlphaNum 32) .Values.pachd.rootToken -}}
{{- end -}}
apiVersion: v1
kind: Secret
metadata:
  name: pachyderm-bootstrap-config
  namespace: {{ .Release.Namespace }}
stringData:
  # authConfig is the configuration for pachd as an OIDC client
  # ** note: `authConfig.client_secret` must equal `oidcClients.secret`
  authConfig: |
    client_id: {{ required "For Authentication, an OIDC Client ID for this pachd must be set." .Values.pachd.oauthClientID }}
    client_secret: {{ $oidcSecret }}
    issuer: {{ include "pachyderm.issuerURI" . }}
    localhost_issuer: {{ include "pachyderm.localhostIssuer" . }}
    require_email_verified: {{ .Values.oidc.requireVerifiedEmail }}
    {{- if include "pachyderm.userAccessibleOauthIssuerHost" . }}
    user_accessible_issuer_host: {{ include "pachyderm.userAccessibleOauthIssuerHost" . }}
    {{- end }}
    redirect_uri: {{ include "pachyderm.pachdRedirectURI" . }}
    scopes:
    - email
    - profile
    - groups
    - openid 

  ## clusterRoleBindings is a set of user -> role mappings to apply
  ## the below block serves as an example for configuring Pachyderm Cluster Role Bindings as part of install
  # clusterRoleBindings: |
  #   robot:test:
  #   - repoReader

  # TODO: Add config option for non embedded / multiple pachs?
  # enterpriseClusters is the set of pachds covered by license service 
  enterpriseClusters: |
    - address: grpc://localhost:1653
      id: localhost
      secret: {{ $enterpriseSecret }}
      user_address: grpc://localhost:30650
      cluster_deployment_id: $CLUSTER_DEPLOYMENT_ID

  # TODO: Multiple Pachd Configuration
  # enterpiseConfig points the pachd to a license service (in this case itself)
  enterpriseConfig: |
    id: localhost
    license_server: grpc://localhost:1653
    secret: {{ $enterpriseSecret }}

  # identityServiceConfig configures the OIDC provider
  # id_token_expiry value is parsed into golang's time.Duration: https://pkg.go.dev/time#example-ParseDuration
  identityServiceConfig: |  
    issuer: {{ include "pachyderm.issuerURI" . }}
    id_token_expiry: {{ .Values.oidc.IDTokenExpiry }}

  # idps is the set of Identity Providers to support for logging in (dex "connectors")
  idps: |
    {{ include "pachyderm.idps" . }}

  license: {{ required "Enterprise license key required" .Values.pachd.enterpriseLicenseKey | quote }}

  enterpriseSecret: {{ $enterpriseSecret | quote }}

  # oidcClients is the set of OIDC clients registered with the OIDC provider
  # the config-pod (job that sets up pachyderm using this data) resolves oidcClient 
  # values that are environment variables.
  oidcClients: |
    - id: {{ .Values.pachd.oauthClientID }}
      name: {{ .Values.pachd.oauthClientID }}
      secret: {{ $oidcSecret }}
      redirect_uris:
      - {{ include "pachyderm.pachdRedirectURI" . }}
      {{- if .Values.console.enabled}}
      trusted_peers:
      - {{ .Values.console.config.oauthClientID | quote }}
      {{- end }}
    {{- if .Values.console.enabled }}
    - id: {{ .Values.console.config.oauthClientID }}
      name: {{ .Values.console.config.oauthClientID  }}
      secret: $CONSOLE_OAUTH_CLIENT_SECRET
      redirect_uris:
      - {{ include "pachyderm.consoleRedirectURI" . | quote }}
    {{- end }}

  # rootToken is the auth token used to communicate with the cluster as the root user
  rootToken: {{ $rootToken }}
{{- end }}

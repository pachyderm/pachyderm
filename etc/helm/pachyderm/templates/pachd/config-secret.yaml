{{- /*
SPDX-FileCopyrightText: Pachyderm, Inc. <info@pachyderm.com>
SPDX-License-Identifier: Apache-2.0
*/ -}}

{{- /* 
if pachd.activateEnterprise is set, always run the bootstrap config. 
On Installs, setting the pachd.enterpriseLicenseKey or pachd.activateEnterpriseMember 
will also start bootstrapping.
*/ -}}
{{ if or .Values.pachd.activateEnterprise (and .Release.IsInstall (or .Values.pachd.enterpriseLicenseKeySecretName .Values.pachd.enterpriseLicenseKey .Values.pachd.activateEnterpriseMember) ) }}

{{- $oidcSecret := "" -}}
{{- if .Values.pachd.oauthClientSecretSecretName -}}
{{- $oidcSecret = "$PACHD_OAUTH_CLIENT_SECRET" -}}
{{- else if .Release.IsUpgrade -}}
{{- $oidcSecret = required "For an upgrade release, a value is required for pachd.oauthClientSecret" .Values.pachd.oauthClientSecret -}}
{{- else -}}
{{- $oidcSecret = default (randAlphaNum 32) .Values.pachd.oauthClientSecret -}}
{{- end -}}

{{- $enterpriseSecret := "" -}}
{{- if .Values.pachd.enterpriseSecretSecretName -}}
{{- $enterpriseSecret = "$ENTERPRISE_SECRET" -}}
{{- else if .Release.IsUpgrade -}}
{{- $enterpriseSecret = required "For an upgrade release, a value is required for pachd.enterpriseSecret" .Values.pachd.enterpriseSecret -}}
{{- else -}}
{{- $enterpriseSecret = default (randAlphaNum 32) .Values.pachd.enterpriseSecret -}}
{{- end -}}

{{- $rootToken := "" -}}
{{- if .Values.pachd.rootTokenSecretName -}}
{{- $rootToken = "$ROOT_TOKEN" -}}
{{- else if .Release.IsUpgrade -}}
{{- $rootToken = required "For an upgrade release, a value is required for pachd.rootToken" .Values.pachd.rootToken -}}
{{- else -}}
{{- $rootToken = default (randAlphaNum 32) .Values.pachd.rootToken -}}
{{- end -}}

apiVersion: v1
kind: Secret
metadata:
  name: pachyderm-bootstrap-config
  namespace: {{ .Release.Namespace }}
stringData:
# when registering a cluster with a separate enterprise server
{{ if .Values.pachd.activateEnterpriseMember }}

  enterpriseServerAddress: {{ required "To register a pachd instance with an enterprise server, the enterprise server's address must be provided." .Values.pachd.enterpriseServerAddress }}

  {{- if .Values.pachd.enterpriseRootTokenSecretName }}
  # this environment variable is wired in config-job.yaml
  enterpriseRootToken: "$ENTERPRISE_ROOT_TOKEN"
  {{- else }}
  enterpriseRootToken: {{ required "To register this pachd as an enterprise member, the enterprise root token must be provided." .Values.pachd.enterpriseRootToken }}
  {{- end }}

  # TODO: Add config option for non embedded / multiple pachs?
  # enterpriseClusters is the set of pachds covered by license service 
  enterpriseClusters: |
    - address: {{ .Values.pachd.enterpriseCallbackAddress }}
      id: {{ required "To register a pachd instance with an enterprise server, a unique ID must be set for this instance" .Values.pachd.oauthClientID }}
      secret: {{ $enterpriseSecret }}
      user_address: grpc://localhost:30650
      cluster_deployment_id: $CLUSTER_DEPLOYMENT_ID

  # enterpriseConfig represents the license'd pachyderm enterprise server that the newly deployed pachd will register with
  enterpriseConfig: |
    id: {{ required "To register a pachd instance with an enterprise server, a unique ID must be set for this instance" .Values.pachd.oauthClientID }}
    license_server: {{ .Values.pachd.enterpriseServerAddress }}
    secret: {{ $enterpriseSecret }}
{{ end }}

{{ if .Values.pachd.activateAuth }}
  # authConfig is the configuration for pachd as an OIDC client
  # ** note: `authConfig.client_secret` must equal `oidcClients.secret`
  authConfig: |
    client_id: {{ required "For Authentication, an OIDC Client ID for this pachd must be set." .Values.pachd.oauthClientID }}
    client_secret: {{ $oidcSecret }}
    issuer: {{ include "pachyderm.issuerURI" . }}
    localhost_issuer: {{ include "pachyderm.localhostIssuer" . }}
    require_email_verified: {{ .Values.oidc.requireVerifiedEmail }}
    {{- if include "pachyderm.userAccessibleOauthIssuerHost" . }}
    user_accessible_issuer_host: {{ include "pachyderm.userAccessibleOauthIssuerHost" . }}
    {{- end }}
    redirect_uri: {{ include "pachyderm.pachdRedirectURI" . }}
    scopes:
    - email
    - profile
    - groups
    - openid 


  # oidcClients is the set of OIDC clients registered with the OIDC provider
  # the config-pod (job that sets up pachyderm using this data) resolves oidcClient 
  # values that are environment variables.
  oidcClients: |
    - id: {{ .Values.pachd.oauthClientID }}
      name: {{ .Values.pachd.oauthClientID }}
      secret: {{ $oidcSecret }}
      redirect_uris:
      - {{ include "pachyderm.pachdRedirectURI" . }}
      {{- if .Values.console.enabled}}
      trusted_peers:
      - {{ .Values.console.config.oauthClientID | quote }}
      {{- end }}
    {{- if .Values.console.enabled }}
    - id: {{ .Values.console.config.oauthClientID }}
      name: {{ .Values.console.config.oauthClientID  }}
      secret: $CONSOLE_OAUTH_CLIENT_SECRET
      redirect_uris:
      - {{ include "pachyderm.consoleRedirectURI" . | quote }}
    {{- end }}

  # rootToken is the auth token used to communicate with the cluster as the root user
  rootToken: {{ $rootToken }}


{{ if or .Values.pachd.pachAuthClusterRoleBindings ( and (.Values.oidc.mockIDP) (not .Values.oidc.upstreamIDPsSecretName) (not .Values.oidc.upstreamIDPs)) }}
  ## clusterRoleBindings is a set of user -> role mappings to apply
  ## the below block serves as an example for configuring Pachyderm Cluster Role Bindings as part of install
  clusterRoleBindings: |
    {{- if and (.Values.oidc.mockIDP) (not .Values.oidc.upstreamIDPsSecretName) (not .Values.oidc.upstreamIDPs)}}
    user:kilgore@kilgore.trout:
    - clusterAdmin
    {{- else  }}
{{ toYaml .Values.pachd.pachAuthClusterRoleBindings | indent 4 }}
    {{- end }}
{{ end }}
{{ end }}
{{- end }}

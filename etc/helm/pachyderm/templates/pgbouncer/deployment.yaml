{{- /*
SPDX-FileCopyrightText: Pachyderm, Inc. <info@pachyderm.com>
SPDX-License-Identifier: Apache-2.0
*/ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pg-bouncer
    suite: pachyderm
  name: pg-bouncer
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pg-bouncer
      suite: pachyderm
  strategy: {}
  template:
    metadata:
      labels:
        app: pg-bouncer
        suite: pachyderm
      name: pg-bouncer
      namespace: {{ .Release.Namespace }}
      {{- if .Values.pgbouncer.annotations }}
      annotations: {{ toYaml .Values.pgbouncer.annotations | nindent 4 }}
      {{- end }}
    spec:
      {{- if .Values.pgbouncer.priorityClassName }}
      priorityClassName: {{ .Values.pgbouncer.priorityClassName }}
      {{- end }}
{{- include "pachyderm.imagePullSecrets" . | indent 6 }}
      containers:
      - env:
        - name: POSTGRESQL_USERNAME
          value: {{ .Values.global.postgresql.postgresqlUsername }}
        - name: POSTGRESQL_DATABASE
          value: {{ .Values.global.postgresql.postgresqlDatabase }}
        - name: PGBOUNCER_SET_USER
          value: "True"
        - name: POSTGRESQL_HOST
         {{- if .Values.postgresql.enabled }}
          value: {{ .Values.global.postgresql.postgresqlHost }}.{{ .Release.Namespace }}.svc.cluster.local
         {{- else }}
          value: {{ .Values.global.postgresql.postgresqlHost }}
         {{- end }}
        - name: PGBOUNCER_PORT
          value: "5432"
        - name: POSTGRESQL_PORT
          value: "{{ .Values.global.postgresql.postgresqlPort }}"
        - name: PGBOUNCER_DATABASE
          value: "*"
        - name: PGBOUNCER_AUTH_TYPE
          value: {{ .Values.global.postgresql.postgresqlAuthType }}
        - name: PGBOUNCER_MAX_CLIENT_CONN
          value: "{{ .Values.pgbouncer.maxConnections }}"
        - name: PGBOUNCER_DEFAULT_POOL_SIZE
          value: "{{ .Values.pgbouncer.defaultPoolSize }}"
        - name: PGBOUNCER_POOL_MODE
          value: "transaction"
        - name: PGBOUNCER_IDLE_TRANSACTION_TIMEOUT
          value: "300"
        - name: PGBOUNCER_IGNORE_STARTUP_PARAMETERS
          value: "extra_float_digits"
        - name: PGBOUNCER_SERVER_TLS_SSLMODE
          value: "{{ .Values.global.postgresql.postgresqlSSL }}"
         {{- if .Values.global.postgresql.postgresqlSSLSecret  }}
        - name: PGBOUNCER_SERVER_TLS_CERT_FILE
          value: /pg-tls-cert/tls.crt
        - name: PGBOUNCER_SERVER_TLS_KEY_FILE
          value: /pg-tls-cert/tls.key
         {{- end }}
         {{- if .Values.global.postgresql.postgresqlSSLCACert  }}
        - name: PGBOUNCER_SERVER_TLS_CA_FILE
          value: /pg-ca-cert/ca.crt
         {{- end }}
        - name: PGBOUNCER_UNIX_SOCKET_DIR
          value: " "
          {{- if .Values.cloudsqlAuthProxy.iamLogin }}
        - name: POSTGRESQL_PASSWORD
          value: "password"
          {{- else }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.global.postgresql.postgresqlExistingSecretName | default "postgres" }}
              key: {{ .Values.global.postgresql.postgresqlExistingSecretKey | default "postgresql-password" }}
          {{- end }}
        image: "{{ .Values.pgbouncer.image.repository }}:{{ .Values.pgbouncer.image.tag }}"
        imagePullPolicy: IfNotPresent
        name: pg-bouncer
        livenessProbe:
          failureThreshold: 5
          exec:
            command:
              - "/bin/sh"
              - "-c"
              - PGPASSWORD=$POSTGRESQL_PASSWORD pg_isready -U $POSTGRESQL_USERNAME -h 127.0.0.1 -p $PGBOUNCER_PORT -d $POSTGRESQL_DATABASE
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          tcpSocket:
            port: 5432
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 5432
          name: client-port
        {{- if .Values.pgbouncer.resources }}
        resources: {{ toYaml .Values.pgbouncer.resources | nindent 10 }}
        {{- end }}
        volumeMounts:
        - mountPath: /opt/bitnami/pgbouncer/conf/
          name: config
        - mountPath: /opt/bitnami/pgbouncer/tmp/
          name: pgtmp
        - mountPath: /opt/bitnami/pgbouncer/logs/
          name: logs
        - mountPath: /tmp
          name: tmp
        {{- if .Values.global.postgresql.postgresqlSSLSecret }}
        - mountPath: /pg-tls-cert
          name: pg-tls-cert
        {{- end }}
        {{- if .Values.global.postgresql.postgresqlSSLCACert }}
        - mountPath: /pg-ca-cert
          name: pg-ca-cert
        {{- end }}
      {{- if .Values.global.securityContexts.enabled }}
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
              drop:
              - all
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {{- end }}
      {{- if .Values.pgbouncer.nodeSelector }}
      nodeSelector: {{ toYaml .Values.pgbouncer.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.pgbouncer.tolerations }}
      tolerations: {{ toYaml .Values.pgbouncer.tolerations | nindent 8 }}
      {{- end }}
      volumes:
      - emptyDir: {}
        name: pgtmp
      - emptyDir: {}
        name: tmp
      - emptyDir: {}
        name: config
      - emptyDir: {}
        name: logs
      {{- if .Values.global.postgresql.postgresqlSSLSecret }}
      - name: pg-tls-cert
        secret:
          secretName: "{{ .Values.global.postgresql.postgresqlSSLSecret }}"
      {{- end }}
      {{- if .Values.global.postgresql.postgresqlSSLCACert }}
      - name: pg-ca-cert
        secret:
          secretName: "pg-ca-cert"
      {{- end }}

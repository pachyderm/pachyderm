syntax = "proto3";

package pfs;
option go_package = "github.com/pachyderm/pachyderm/v2/src/pfs";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "gogoproto/gogo.proto";

import "auth/auth.proto";

////  PFS Data structures (stored in etcd)

message Repo {
  string name = 1;
}

message Branch {
  Repo repo = 1;
  string name = 2;
}

message File {
  Commit commit = 1;
  string path = 2;
}

// RepoInfo is the main data structure representing a Repo in etcd
message RepoInfo {
  reserved 4;
  Repo repo = 1;
  google.protobuf.Timestamp created = 2;
  uint64 size_bytes = 3;
  string description = 5;
  repeated Branch branches = 7;

  // Set by ListRepo and InspectRepo if Pachyderm's auth system is active, but
  // not stored in etcd. To set a user's auth scope for a repo, use the
  // Pachyderm Auth API (in src/client/auth/auth.proto)
  RepoAuthInfo auth_info = 6;
}

// RepoAuthInfo includes the caller's access scope for a repo, and is returned
// by ListRepo and InspectRepo but not persisted in etcd. It's used by the
// Pachyderm dashboard to render repo access appropriately. To set a user's auth
// scope for a repo, use the Pachyderm Auth API (in src/client/auth/auth.proto)
message RepoAuthInfo {
  // The callers access level to the relevant repo (e.g. may be OWNER even if
  // the user isn't an OWNER of the repo, if they're an admin for the cluster)
  auth.Scope access_level = 1;
}

message BranchInfo {
  Branch branch = 4;
  Commit head = 2;
  repeated Branch provenance = 3;
  repeated Branch subvenance = 5;
  repeated Branch direct_provenance = 6;
  Trigger trigger = 7;

  // Deprecated field left for backward compatibility.
  string name = 1;
}

message BranchInfos {
  repeated BranchInfo branch_info = 1;
}

// Trigger defines the conditions under which a head is moved, and to which
// branch it is moved.
message Trigger {
  // Which branch this trigger refers to
  string branch = 1;
  // All indicates that all conditions must be satisfied before the trigger
  // happens, otherwise any conditions being satisfied will trigger it.
  bool all = 2;
  // Triggers if the cron spec has been satisfied since the last trigger and
  // there's been a new commit.
  string cron_spec = 3;
  // Triggers if there's been `size` new data added since the last trigger.
  string size = 4;
  // Triggers if there's been `commits` new commits added since the last trigger.
  int64 commits = 5;
}

// These are the different places where a commit may be originated from
enum OriginKind {
  USER = 0;
  AUTO = 1;
  FSCK = 2;
}

message CommitOrigin {
  OriginKind kind = 1;
}
// Commit is a reference to a commit (e.g. the collection of branches and the
// collection of currently-open commits in etcd are collections of Commit
// protos)
message Commit {
  Repo repo = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
}

// CommitRange represents chain of commits with Lower being an ancestor of
// Upper or, in the case of a range of size 1, the same commit.
message CommitRange {
  Commit lower = 1;
  Commit upper = 2;
}

// CommitProvenance keeps track of where (i.e. which branch) a certain commit
// originated from. A commit's provenance consists of the commits of
// the commits which are in its causal history.
message CommitProvenance {
  Commit commit = 1;
  Branch branch = 2;
}

// CommitInfo is the main data structure representing a commit in etcd
message CommitInfo {
  reserved 6, 10;
  Commit commit = 1;
  Branch branch = 15;
  CommitOrigin origin = 17;
  // description is a user-provided script describing this commit
  string description = 8;
  Commit parent_commit = 2;
  repeated Commit child_commits = 11;
  google.protobuf.Timestamp started = 3;
  google.protobuf.Timestamp finished = 4;
  uint64 size_bytes = 5;

  // the commits and their original branches on which this commit is provenant
  repeated CommitProvenance provenance = 16;

  // ReadyProvenance is the number of provenant commits which have been
  // finished, if ReadyProvenance == len(Provenance) then the commit is ready
  // to be processed by pps.
  int64 ready_provenance = 12;

  repeated CommitRange subvenance = 9;

  int64 subvenant_commits_success = 18;
  int64 subvenant_commits_failure = 19;
  int64 subvenant_commits_total = 20;
}

enum FileType {
  RESERVED = 0;
  FILE = 1;
  DIR = 2;
}

message FileInfo {
  File file = 1;
  FileType file_type = 2;
  uint64 size_bytes = 3;
  google.protobuf.Timestamp committed = 10;
  bytes hash = 7;
}

// PFS API

message CreateRepoRequest {
  reserved 2;
  Repo repo = 1;
  string description = 3;
  bool update = 4;
}

message InspectRepoRequest {
  Repo repo = 1;
}

message ListRepoRequest {
  reserved 1;
}

message ListRepoResponse {
  repeated RepoInfo repo_info = 1;
}

message DeleteRepoRequest {
  Repo repo = 1;
  bool force = 2;
  bool all = 3;
}

// CommitState describes the states a commit can be in.
// The states are increasingly specific, i.e. a commit that is FINISHED also counts as STARTED.
enum CommitState {
  STARTED = 0; // The commit has been started, all commits satisfy this state.
  READY = 1; // The commit has been started, and all of its provenant commits have been finished.
  FINISHED = 2; // The commit has been finished.
}

message StartCommitRequest {
  reserved 2;
  // Parent.ID may be empty in which case the commit that Branch points to will be used as the parent.
  // If branch is empty, or if branch does not exist, the commit will have no parent.
  Commit parent = 1;
  // description is a user-provided string describing this commit
  string description = 4;
  string branch = 3;
  repeated CommitProvenance provenance = 5;
}

message FinishCommitRequest {
  Commit commit = 1;
  // description is a user-provided string describing this commit. Setting this
  // will overwrite the description set in StartCommit
  string description = 2;
  uint64 size_bytes = 6;
  // If set, 'commit' will be closed (its 'finished' field will be set to the
  // current time) but its 'tree' will be left nil.
  bool empty = 4;
}

message InspectCommitRequest {
  Commit commit = 1;
  // BlockState causes inspect commit to block until the commit is in the desired state.
  CommitState block_state = 2;
}

message ListCommitRequest {
  Repo repo = 1;
  Commit from = 2;
  Commit to = 3;
  uint64 number = 4;
  bool reverse = 5;  // Return commits oldest to newest
}

message CommitInfos {
  repeated CommitInfo commit_info = 1;
}

message SquashCommitRequest {
  Commit commit = 1;
}

message FlushCommitRequest {
  repeated Commit commits = 1;
  repeated Repo to_repos = 2;
}

message SubscribeCommitRequest {
  Repo repo = 1;
  string branch = 2;
  CommitProvenance prov = 5;
  // only commits created since this commit are returned
  Commit from = 3;
  // Don't return commits until they're in (at least) the desired state.
  CommitState state = 4;
}

message ClearCommitRequest {
  Commit commit = 1;
}

message CreateBranchRequest {
  Commit head = 1;
  // s_branch matches the field number and type of SetBranchRequest.Branch in
  // Pachyderm 1.6--so that operations (generated by pachyderm 1.6's
  // Admin.Export) can be deserialized by pachyderm 1.7 correctly
  string s_branch = 2;
  Branch branch = 3;
  repeated Branch provenance = 4;
  Trigger trigger = 5;
}

message InspectBranchRequest {
  Branch branch = 1;
}

message ListBranchRequest {
  Repo repo = 1;
  bool reverse = 2; // Returns branches oldest to newest
}

message DeleteBranchRequest {
  Branch branch = 1;
  bool force = 2;
}

enum Delimiter {
  NONE = 0;
  JSON = 1;
  LINE = 2;
  SQL = 3;
  CSV = 4;
}

message AppendFile {
  bool overwrite = 1;
  string tag = 2;
  oneof source {
    RawFileSource raw_file_source = 3;
    TarFileSource tar_file_source = 4;
    URLFileSource url_file_source = 5;
  }
// TODO:
//  Delimiter delimiter = 7;
//  // TargetFileDatums specifies the target number of datums in each written
//  // file it may be lower if data does not split evenly, but will never be
//  // higher, unless the value is 0.
//  int64 target_file_datums = 8;
//  // TargetFileBytes specifies the target number of bytes in each written
//  // file, files may have more or fewer bytes than the target.
//  int64 target_file_bytes = 9;
//  // header_records is an option for splitting data when 'delimiter' is not NONE
//  // (or SQL). It specifies the number of records that are converted to a
//  // header and applied to all file shards.
//  //
//  // This is particularly useful for CSV files, where the first row often
//  // contains column titles; if 'header_records' is set to one in that case,
//  // the first row will be associated with the directory that contains the rest
//  // of the split-up csv rows as files, and if any data is retrieved from that
//  // directory by GetFile, it will appear to begin with that first row of
//  // column labels (including in pipeline workers).
//  //
//  // Note that SQL files have their own logic for determining headers (their
//  // header is not a number of records, but a collection of SQL commands that
//  // create the relevant tables and such). This way, SQL files retrieved by
//  // GetFile can be passed to psql, and they will set up the appropriate tables
//  // before inserting the records in the files that were retrieved.
//  int64 header_records = 11;
//  // overwrite_index is the object index where the write starts from.  All
//  // existing objects starting from the index are deleted.
//  OverwriteIndex overwrite_index = 10;
//  // delete indicates that the file should be deleted, this is redundant with
//  // DeleteFile, but is necessary because it allows you to send file deletes
//  // atomically with other PutFile operations.
//  bool delete = 12;
}

message RawFileSource {
  string path = 1;
  bytes data = 2;
  bool EOF = 3;
}

message TarFileSource {
  bytes data = 1;
}

message URLFileSource {
  string path = 1;
  string URL = 2;
  bool recursive = 3;
}

message DeleteFile {
  string file = 1; 
  string tag = 2;
}

message ModifyFileRequest {
  Commit commit = 1;
  oneof modification {
    AppendFile append_file = 2;
    DeleteFile delete_file = 3;
  }
}

message CopyFileRequest {
  File src = 1;
  File dst = 2;
  bool overwrite = 3;
  string tag = 4;
}

message GetFileRequest {
  File file = 1;
  string URL = 2;
// TODO:
//  int64 offset_bytes = 2;
//  int64 size_bytes = 3;
}

message InspectFileRequest {
  File file = 1;
}

message ListFileRequest {
  // File is the parent directory of the files we want to list. This sets the
  // repo, the commit/branch, and path prefix of files we're interested in
  // If the "path" field is omitted, a list of files at the top level of the repo
  // is returned
  File file = 1;
  bool full = 2;
// TODO:
//  // History indicates how many historical versions you want returned. Its
//  // semantics are:
//  // 0: Return the files as they are at the commit in `file`. FileInfo.File
//  //    will equal File in this request.
//  // 1: Return the files as they are in the last commit they were modified in.
//  //    (This will have the same hash as if you'd passed 0, but
//  //    FileInfo.File.Commit will be different.
//  // 2: Return the above and the files as they are in the next-last commit they
//  //    were modified in.
//  // 3: etc.
//  //-1: Return all historical versions.
//  int64 history = 3;
}

message WalkFileRequest {
    File file = 1;
}

message GlobFileRequest {
  Commit commit = 1;
  string pattern = 2;
}

message DiffFileRequest {
  File new_file = 1;
  // OldFile may be left nil in which case the same path in the parent of
  // NewFile's commit will be used.
  File old_file = 2;
  bool shallow = 3;
}

message DiffFileResponse {
  FileInfo new_file = 1;
  FileInfo old_file = 2;
}

message FsckRequest {
  bool fix = 1;
}

message FsckResponse {
  string fix = 1;
  string error = 2;
}

message CreateFilesetResponse {
  string fileset_id = 1;
}

message RenewFilesetRequest {
  string fileset_id = 1;
  int64 ttl_seconds = 2;
}

message AddFilesetRequest {
  Commit commit = 1;
  string fileset_id = 2;
}

message GetFilesetRequest {
  Commit commit = 1;
}

service API {
  // CreateRepo creates a new repo.
  rpc CreateRepo(CreateRepoRequest) returns (google.protobuf.Empty) {}
  // InspectRepo returns info about a repo.
  rpc InspectRepo(InspectRepoRequest) returns (RepoInfo) {}
  // ListRepo returns info about all repos.
  rpc ListRepo(ListRepoRequest) returns (ListRepoResponse) {}
  // DeleteRepo deletes a repo.
  rpc DeleteRepo(DeleteRepoRequest) returns (google.protobuf.Empty) {}

  // StartCommit creates a new write commit from a parent commit.
  rpc StartCommit(StartCommitRequest) returns (Commit) {}
  // FinishCommit turns a write commit into a read commit.
  rpc FinishCommit(FinishCommitRequest) returns (google.protobuf.Empty) {}
  // InspectCommit returns the info about a commit.
  rpc InspectCommit(InspectCommitRequest) returns (CommitInfo) {}
  // ListCommit returns info about all commits.
  rpc ListCommit(ListCommitRequest) returns (stream CommitInfo) {}
  // SquashCommit squashes a commit into it's parent.
  rpc SquashCommit(SquashCommitRequest) returns (google.protobuf.Empty) {}
  // FlushCommit waits for downstream commits to finish.
  rpc FlushCommit(FlushCommitRequest) returns (stream CommitInfo) {}
  // SubscribeCommit subscribes for new commits on a given branch.
  rpc SubscribeCommit(SubscribeCommitRequest) returns (stream CommitInfo) {}
  // ClearCommit removes all data from the commit.
  rpc ClearCommit(ClearCommitRequest) returns (google.protobuf.Empty) {}
  // TODO: BuildCommit?
  //rpc BuildCommit(BuildCommitRequest) returns (Commit) {}

  // CreateBranch creates a new branch.
  rpc CreateBranch(CreateBranchRequest) returns (google.protobuf.Empty) {}
  // InspectBranch returns info about a branch.
  rpc InspectBranch(InspectBranchRequest) returns (BranchInfo) {}
  // ListBranch returns info about the heads of branches.
  rpc ListBranch(ListBranchRequest) returns (BranchInfos) {}
  // DeleteBranch deletes a branch; note that the commits still exist.
  rpc DeleteBranch(DeleteBranchRequest) returns (google.protobuf.Empty) {}

  // ModifyFile performs modifications on a set of files.
  rpc ModifyFile(stream ModifyFileRequest) returns (google.protobuf.Empty) {}
  // CopyFile copies the contents of one file to another.
  // TODO: Make this a part of ModifyFile.
  rpc CopyFile(CopyFileRequest) returns (google.protobuf.Empty) {}
  // GetFile returns a byte stream of the contents of the file.
  rpc GetFile(GetFileRequest) returns (stream google.protobuf.BytesValue) {}
  // InspectFile returns info about a file.
  rpc InspectFile(InspectFileRequest) returns (FileInfo) {}
  // ListFile returns info about all files.
  rpc ListFile(ListFileRequest) returns (stream FileInfo) {}
  // WalkFile walks over all the files under a directory, including children of children.
  rpc WalkFile(WalkFileRequest) returns (stream FileInfo) {}
  // GlobFile returns info about all files.
  rpc GlobFile(GlobFileRequest) returns (stream FileInfo) {}
  // DiffFile returns the differences between 2 paths at 2 commits.
  rpc DiffFile(DiffFileRequest) returns (stream DiffFileResponse) {}

  // DeleteAll deletes everything.
  rpc DeleteAll(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  // Fsck does a file system consistency check for pfs.
  rpc Fsck(FsckRequest) returns (stream FsckResponse) {}

  // Fileset API
  // AddFileset associates a fileset with a commit
  rpc AddFileset(AddFilesetRequest) returns (google.protobuf.Empty) {}
  // GetFileset returns a fileset with the data from a commit
  rpc GetFileset(GetFilesetRequest) returns (CreateFilesetResponse) {}
  // CreateFileset creates a new fileset.
  rpc CreateFileset(stream ModifyFileRequest) returns (CreateFilesetResponse) {}
  // RenewFileset prevents a fileset from being deleted for a set amount of time.
  rpc RenewFileset(RenewFilesetRequest) returns (google.protobuf.Empty) {}
}

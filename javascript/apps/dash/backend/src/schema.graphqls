## TODO: What is the "ID" field for inputs?
type PFSInput {
  name: String!
  repo: Repo!
}

type CronInput {
  name: String!
  repo: Repo!
}

type GitInput {
  name: String!
  url: String!
}

enum InputType {
  PFS
  CRON
  GIT
}

type Input {
  id: ID! # This will need to be assigned on the API side
  type: InputType!
  joinedWith: [String!]! # A flat representation of the input tree (list of PipelineInput ids)
  groupedWith: [String!]!
  crossedWith: [String!]!
  unionedWith: [String!]!
  pfsInput: PFSInput
  cronInput: CronInput
  gitInput: GitInput
}

# This enum is replaced with the one from pps on type generation
enum PipelineState {
  PIPELINE_STARTING
  PIPELINE_RUNNING
  PIPELINE_RESTARTING
  PIPELINE_FAILURE
  PIPELINE_PAUSED
  PIPELINE_STANDBY
  PIPELINE_CRASHING
}

# This enum is replaced with the one from pps on type generation
enum JobState {
  JOB_STARTING
  JOB_RUNNING
  JOB_FAILURE
  JOB_SUCCESS
  JOB_KILLED
  JOB_MERGING
  JOB_EGRESSING
}

# This enum is replaced with the one from projects on type generation
enum ProjectStatus {
  HEALTHY
  UNHEALTHY
}

type Pipeline {
  id: ID!
  name: String!
  version: Int!
  createdAt: Int!
  state: PipelineState!
  stopped: Boolean!
  recentError: String
  numOfJobsStarting: Int!
  numOfJobsRunning: Int!
  numOfJobsFailing: Int!
  numOfJobsSucceeding: Int!
  numOfJobsKilled: Int!
  numOfJobsMerging: Int!
  numOfJobsEgressing: Int!
  lastJobState: JobState
  inputs: [Input!]!
  description: String
}

type InputPipeline {
  id: ID!
}

type Repo {
  name: ID!
  createdAt: Int!
  sizeInBytes: Int!
  description: String!

  # The Dash API will have to derive this field, unless core pach can expose it for us...
  isPipelineOutput: Boolean!
}

type Pach {
  id: ID!
}

type Job {
  id: ID!
  createdAt: Int!
  state: JobState!
}

enum NodeType {
  PIPELINE
  REPO
}

type Node {
  name: String!
  type: NodeType!

  # TODO: Fledge these two fields out
  state: PipelineState
  access: Boolean!
}

type Link {
  source: Int!
  target: Int!
  state: JobState
}

type Dag {
  nodes: [Node!]!
  links: [Link!]!
}

input DagQueryArgs {
  projectId: ID!
}

input JobQueryArgs {
  projectId: ID!
}

type Project {
  id: ID!
  name: String!
  status: ProjectStatus!
  description: String!
  createdAt: Int!
}

enum FileType {
  RESERVED
  DIR
  FILE
}

type Timestamp {
  seconds: Int!
  nanos: Int!
}

type File {
  committed: Timestamp
  commitId: String!
  download: String
  hash: String!
  path: String!
  repoName: String!
  sizeBytes: Float!
  type: FileType!
}

input FileQueryArgs {
  commitId: String
  path: String
  repoName: String!
}

type Query {
  projects: [Project!]!
  pipelines: [Pipeline!]!
  repos: [Repo!]!
  jobs(args: JobQueryArgs!): [Job!]!
  dag(args: DagQueryArgs!): Dag!
  dags(args: DagQueryArgs!): [Dag!]!
  files(args: FileQueryArgs!): [File!]!
}

type Mutation {
  exchangeCode(code: String!): String!
}

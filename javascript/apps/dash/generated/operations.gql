mutation exchangeCode($code: String!) {
  exchangeCode(code: $code) {
    pachToken
    idToken
  }
}
query getAccount {
  account {
    id
    email
    name
  }
}
query authConfig {
  authConfig {
    authUrl
    clientId
    pachdClientId
  }
}
query getDag($args: DagQueryArgs!) {
  dag(args: $args) {
    nodes {
      id
      name
      type
      access
      state
      x
      y
    }
    links {
      id
      source
      target
      sourceState
      targetState
      state
      bendPoints {
        x
        y
      }
      startPoint {
        x
        y
      }
      endPoint {
        x
        y
      }
    }
    id
    priorityPipelineState
  }
}
subscription getDags($args: DagQueryArgs!) {
  dags(args: $args) {
    nodes {
      id
      name
      type
      access
      state
      x
      y
    }
    links {
      id
      source
      target
      sourceState
      targetState
      state
      bendPoints {
        x
        y
      }
      startPoint {
        x
        y
      }
      endPoint {
        x
        y
      }
    }
    id
    priorityPipelineState
  }
}
query getFiles($args: FileQueryArgs!) {
  files(args: $args) {
    committed {
      nanos
      seconds
    }
    commitId
    download
    hash
    path
    repoName
    sizeBytes
    type
  }
}
query getJobs($args: JobQueryArgs!) {
  jobs(args: $args) {
    id
    state
    createdAt
  }
}
query pipeline($args: PipelineQueryArgs!) {
  pipeline(args: $args) {
    id
    name
    state
    type
    description
    transform {
      cmdList
      image
    }
    inputString
    cacheSize
    datumTimeoutS
    datumTries
    jobTimeoutS
    enableStats
    outputBranch
    s3OutputRepo
    egress
    schedulingSpec {
      nodeSelectorMap {
        key
        value
      }
      priorityClassName
    }
  }
}
query projectDetails($args: ProjectDetailsQueryArgs!) {
  projectDetails(args: $args) {
    sizeDisplay
    repoCount
    pipelineCount
    jobs {
      id
      state
      createdAt
    }
  }
}
query project($id: ID!) {
  project(id: $id) {
    id
    name
    description
    createdAt
    status
  }
}
query projects {
  projects {
    id
    name
    description
    createdAt
    status
  }
}
query repo($args: RepoQueryArgs!) {
  repo(args: $args) {
    branches {
      id
      name
    }
    commits {
      branch {
        id
        name
      }
      description
      id
      started
      finished
      sizeDisplay
    }
    createdAt
    description
    id
    linkedPipeline {
      id
      name
    }
    name
    sizeDisplay
  }
}

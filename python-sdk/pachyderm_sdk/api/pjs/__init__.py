# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/pjs/pjs.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Iterator,
    List,
    Optional,
    Union,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc


if TYPE_CHECKING:
    import grpc


class JobState(betterproto.Enum):
    JOB_STATE_UNSPECIFIED = 0
    """UNSPECIFIED means the job state is unspecified."""

    QUEUED = 1
    """
    QUEUED means the job is currently in a queue. A QUEUED job will not have
    any descendants.
    """

    PROCESSING = 2
    """PROCESSING means the job is currently being processed by a worker."""

    DONE = 3
    """DONE means the job, and all of its descendants, are done."""


class JobErrorCode(betterproto.Enum):
    JOB_ERROR_CODE_UNSPECIFIED = 0
    """UNSPECIFIED means the job error code is unspecified."""

    FAILED = 1
    """
    FAILED means that the worker processing the job indicated that it failed.
    """

    DISCONNECTED = 2
    """DISCONNECTED means the worker processing the job disconnected."""

    CANCELED = 3
    """CANCELED means the job was canceled."""


@dataclass(eq=False, repr=False)
class Job(betterproto.Message):
    id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class JobInfo(betterproto.Message):
    job: "Job" = betterproto.message_field(1)
    parent_job: "Job" = betterproto.message_field(2)
    state: "JobState" = betterproto.enum_field(3)
    spec: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(4)
    input: "QueueElement" = betterproto.message_field(5)
    output: "QueueElement" = betterproto.message_field(6, group="result")
    error: "JobErrorCode" = betterproto.enum_field(7, group="result")


@dataclass(eq=False, repr=False)
class JobInfoDetails(betterproto.Message):
    job_info: "JobInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Queue(betterproto.Message):
    id: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class QueueInfo(betterproto.Message):
    queue: "Queue" = betterproto.message_field(1)
    spec: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueueInfoDetails(betterproto.Message):
    queue_info: "QueueInfo" = betterproto.message_field(1)
    size: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueueElement(betterproto.Message):
    data: bytes = betterproto.bytes_field(1)
    filesets: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CreateJobRequest(betterproto.Message):
    context: str = betterproto.string_field(1)
    spec: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(2)
    input: "QueueElement" = betterproto.message_field(3)
    cache_read: bool = betterproto.bool_field(4)
    cache_write: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class CreateJobResponse(betterproto.Message):
    id: "Job" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CancelJobRequest(betterproto.Message):
    context: str = betterproto.string_field(1)
    job: "Job" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CancelJobResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DeleteJobRequest(betterproto.Message):
    context: str = betterproto.string_field(1)
    job: "Job" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeleteJobResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ListJobRequest(betterproto.Message):
    """TODO: - Filter - Paginate"""

    context: str = betterproto.string_field(1)
    job: "Job" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WalkJobRequest(betterproto.Message):
    context: str = betterproto.string_field(1)
    job: "Job" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InspectJobRequest(betterproto.Message):
    context: str = betterproto.string_field(1)
    job: "Job" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ProcessQueueRequest(betterproto.Message):
    queue: "Queue" = betterproto.message_field(1)
    output: "QueueElement" = betterproto.message_field(2, group="result")
    failed: bool = betterproto.bool_field(3, group="result")


@dataclass(eq=False, repr=False)
class ProcessQueueResponse(betterproto.Message):
    context: str = betterproto.string_field(1)
    input: "QueueElement" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ListQueueRequest(betterproto.Message):
    """TODO: - Filter - Paginate"""

    pass


@dataclass(eq=False, repr=False)
class InspectQueueRequest(betterproto.Message):
    queue: "Queue" = betterproto.message_field(1)


class ApiStub:
    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_create_job = channel.unary_unary(
            "/pjs.API/CreateJob",
            request_serializer=CreateJobRequest.SerializeToString,
            response_deserializer=CreateJobResponse.FromString,
        )
        self.__rpc_cancel_job = channel.unary_unary(
            "/pjs.API/CancelJob",
            request_serializer=CancelJobRequest.SerializeToString,
            response_deserializer=CancelJobResponse.FromString,
        )
        self.__rpc_delete_job = channel.unary_unary(
            "/pjs.API/DeleteJob",
            request_serializer=DeleteJobRequest.SerializeToString,
            response_deserializer=DeleteJobResponse.FromString,
        )
        self.__rpc_list_job = channel.unary_stream(
            "/pjs.API/ListJob",
            request_serializer=ListJobRequest.SerializeToString,
            response_deserializer=JobInfo.FromString,
        )
        self.__rpc_walk_job = channel.unary_stream(
            "/pjs.API/WalkJob",
            request_serializer=WalkJobRequest.SerializeToString,
            response_deserializer=JobInfo.FromString,
        )
        self.__rpc_inspect_job = channel.unary_unary(
            "/pjs.API/InspectJob",
            request_serializer=InspectJobRequest.SerializeToString,
            response_deserializer=JobInfoDetails.FromString,
        )
        self.__rpc_process_queue = channel.stream_stream(
            "/pjs.API/ProcessQueue",
            request_serializer=ProcessQueueRequest.SerializeToString,
            response_deserializer=ProcessQueueResponse.FromString,
        )
        self.__rpc_list_queue = channel.unary_stream(
            "/pjs.API/ListQueue",
            request_serializer=ListQueueRequest.SerializeToString,
            response_deserializer=QueueInfo.FromString,
        )
        self.__rpc_inspect_queue = channel.unary_unary(
            "/pjs.API/InspectQueue",
            request_serializer=InspectQueueRequest.SerializeToString,
            response_deserializer=QueueInfoDetails.FromString,
        )

    def create_job(
        self,
        *,
        context: str = "",
        spec: "betterproto_lib_google_protobuf.Any" = None,
        input: "QueueElement" = None,
        cache_read: bool = False,
        cache_write: bool = False
    ) -> "CreateJobResponse":
        request = CreateJobRequest()
        request.context = context
        if spec is not None:
            request.spec = spec
        if input is not None:
            request.input = input
        request.cache_read = cache_read
        request.cache_write = cache_write

        return self.__rpc_create_job(request)

    def cancel_job(
        self, *, context: str = "", job: "Job" = None
    ) -> "CancelJobResponse":
        request = CancelJobRequest()
        request.context = context
        if job is not None:
            request.job = job

        return self.__rpc_cancel_job(request)

    def delete_job(
        self, *, context: str = "", job: "Job" = None
    ) -> "DeleteJobResponse":
        request = DeleteJobRequest()
        request.context = context
        if job is not None:
            request.job = job

        return self.__rpc_delete_job(request)

    def list_job(self, *, context: str = "", job: "Job" = None) -> Iterator["JobInfo"]:
        request = ListJobRequest()
        request.context = context
        if job is not None:
            request.job = job

        for response in self.__rpc_list_job(request):
            yield response

    def walk_job(self, *, context: str = "", job: "Job" = None) -> Iterator["JobInfo"]:
        request = WalkJobRequest()
        request.context = context
        if job is not None:
            request.job = job

        for response in self.__rpc_walk_job(request):
            yield response

    def inspect_job(self, *, context: str = "", job: "Job" = None) -> "JobInfoDetails":
        request = InspectJobRequest()
        request.context = context
        if job is not None:
            request.job = job

        return self.__rpc_inspect_job(request)

    def process_queue(
        self,
        request_iterator: Union[
            AsyncIterable["ProcessQueueRequest"], Iterable["ProcessQueueRequest"]
        ],
    ) -> Iterator["ProcessQueueResponse"]:
        for response in self.__rpc_process_queue(request_iterator):
            yield response

    def list_queue(self) -> Iterator["QueueInfo"]:
        request = ListQueueRequest()

        for response in self.__rpc_list_queue(request):
            yield response

    def inspect_queue(self, *, queue: "Queue" = None) -> "QueueInfoDetails":
        request = InspectQueueRequest()
        if queue is not None:
            request.queue = queue

        return self.__rpc_inspect_queue(request)


class ApiBase:
    def create_job(
        self,
        context: str,
        spec: "betterproto_lib_google_protobuf.Any",
        input: "QueueElement",
        cache_read: bool,
        cache_write: bool,
        context: "grpc.ServicerContext",
    ) -> "CreateJobResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def cancel_job(
        self, context: str, job: "Job", context: "grpc.ServicerContext"
    ) -> "CancelJobResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_job(
        self, context: str, job: "Job", context: "grpc.ServicerContext"
    ) -> "DeleteJobResponse":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_job(
        self, context: str, job: "Job", context: "grpc.ServicerContext"
    ) -> Iterator["JobInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def walk_job(
        self, context: str, job: "Job", context: "grpc.ServicerContext"
    ) -> Iterator["JobInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_job(
        self, context: str, job: "Job", context: "grpc.ServicerContext"
    ) -> "JobInfoDetails":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def process_queue(
        self,
        request_iterator: Iterator["ProcessQueueRequest"],
        context: "grpc.ServicerContext",
    ) -> Iterator["ProcessQueueResponse"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_queue(self, context: "grpc.ServicerContext") -> Iterator["QueueInfo"]:
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def inspect_queue(
        self, queue: "Queue", context: "grpc.ServicerContext"
    ) -> "QueueInfoDetails":
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    __proto_path__ = "pjs.API"

    @property
    def __rpc_methods__(self):
        return {
            "CreateJob": grpc.unary_unary_rpc_method_handler(
                self.create_job,
                request_deserializer=CreateJobRequest.FromString,
                response_serializer=CreateJobRequest.SerializeToString,
            ),
            "CancelJob": grpc.unary_unary_rpc_method_handler(
                self.cancel_job,
                request_deserializer=CancelJobRequest.FromString,
                response_serializer=CancelJobRequest.SerializeToString,
            ),
            "DeleteJob": grpc.unary_unary_rpc_method_handler(
                self.delete_job,
                request_deserializer=DeleteJobRequest.FromString,
                response_serializer=DeleteJobRequest.SerializeToString,
            ),
            "ListJob": grpc.unary_stream_rpc_method_handler(
                self.list_job,
                request_deserializer=ListJobRequest.FromString,
                response_serializer=ListJobRequest.SerializeToString,
            ),
            "WalkJob": grpc.unary_stream_rpc_method_handler(
                self.walk_job,
                request_deserializer=WalkJobRequest.FromString,
                response_serializer=WalkJobRequest.SerializeToString,
            ),
            "InspectJob": grpc.unary_unary_rpc_method_handler(
                self.inspect_job,
                request_deserializer=InspectJobRequest.FromString,
                response_serializer=InspectJobRequest.SerializeToString,
            ),
            "ProcessQueue": grpc.stream_stream_rpc_method_handler(
                self.process_queue,
                request_deserializer=ProcessQueueRequest.FromString,
                response_serializer=ProcessQueueRequest.SerializeToString,
            ),
            "ListQueue": grpc.unary_stream_rpc_method_handler(
                self.list_queue,
                request_deserializer=ListQueueRequest.FromString,
                response_serializer=ListQueueRequest.SerializeToString,
            ),
            "InspectQueue": grpc.unary_unary_rpc_method_handler(
                self.inspect_queue,
                request_deserializer=InspectQueueRequest.FromString,
                response_serializer=InspectQueueRequest.SerializeToString,
            ),
        }

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api/storage/fileset.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    Iterator,
    List,
    Optional,
    Union,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpc


if TYPE_CHECKING:
    import grpc


@dataclass(eq=False, repr=False)
class AppendFile(betterproto.Message):
    """
    AppendFile will append the provided data to the file with the specified
    path. If a file with the specified path doesn't exist, it will be created.
    """

    path: str = betterproto.string_field(1)
    data: Optional[bytes] = betterproto.message_field(2, wraps=betterproto.TYPE_BYTES)


@dataclass(eq=False, repr=False)
class DeleteFile(betterproto.Message):
    """
    DeleteFile will delete the file with the specified path. If a file with the
    specified path doesn't exist, the delete will be a no-op.
    """

    path: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CreateFilesetRequest(betterproto.Message):
    """
    A CreateFilesetRequest corresponds to a single file modification. Supported
    file modifications are append and delete. A put / overwrite file
    modification can be performed by a delete followed by an append.  TODO:
    Decide how to handle datums.
    """

    append_file: "AppendFile" = betterproto.message_field(1, group="modification")
    delete_file: "DeleteFile" = betterproto.message_field(2, group="modification")


@dataclass(eq=False, repr=False)
class CreateFilesetResponse(betterproto.Message):
    fileset_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RenewFilesetRequest(betterproto.Message):
    fileset_id: str = betterproto.string_field(1)
    ttl_seconds: int = betterproto.int64_field(2)
    """The TTL, in seconds, for the fileset after renewal."""


@dataclass(eq=False, repr=False)
class ComposeFilesetRequest(betterproto.Message):
    fileset_ids: List[str] = betterproto.string_field(1)
    ttl_seconds: int = betterproto.int64_field(2)
    """The TTL, in seconds, for the composite fileset that is created."""


@dataclass(eq=False, repr=False)
class ComposeFilesetResponse(betterproto.Message):
    fileset_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShardFilesetRequest(betterproto.Message):
    """
    If both num_files and size_bytes are set, shards are created based on
    whichever threshold is surpassed first. If a shard configuration field
    (num_files, size_bytes) is unset, the storage's default value is used.
    """

    fileset_id: str = betterproto.string_field(1)
    num_files: int = betterproto.int64_field(2)
    """Number of files targeted in each shard."""

    size_bytes: int = betterproto.int64_field(3)
    """Size (in bytes) targeted for each shard."""


@dataclass(eq=False, repr=False)
class PathRange(betterproto.Message):
    """
    PathRange is a range of paths. The range is inclusive, exclusive: [Lower,
    Upper).
    """

    lower: str = betterproto.string_field(1)
    upper: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ShardFilesetResponse(betterproto.Message):
    shards: List["PathRange"] = betterproto.message_field(1)


class FilesetStub:

    def __init__(self, channel: "grpc.Channel"):
        self.__rpc_create_fileset = channel.stream_unary(
            "/storage.Fileset/CreateFileset",
            request_serializer=CreateFilesetRequest.SerializeToString,
            response_deserializer=CreateFilesetResponse.FromString,
        )
        self.__rpc_renew_fileset = channel.unary_unary(
            "/storage.Fileset/RenewFileset",
            request_serializer=RenewFilesetRequest.SerializeToString,
            response_deserializer=betterproto_lib_google_protobuf.Empty.FromString,
        )
        self.__rpc_compose_fileset = channel.unary_unary(
            "/storage.Fileset/ComposeFileset",
            request_serializer=ComposeFilesetRequest.SerializeToString,
            response_deserializer=ComposeFilesetResponse.FromString,
        )
        self.__rpc_shard_fileset = channel.unary_unary(
            "/storage.Fileset/ShardFileset",
            request_serializer=ShardFilesetRequest.SerializeToString,
            response_deserializer=ShardFilesetResponse.FromString,
        )

    def create_fileset(
        self,
        request_iterator: Union[
            AsyncIterable["CreateFilesetRequest"], Iterable["CreateFilesetRequest"]
        ],
    ) -> "CreateFilesetResponse":

        return self.__rpc_create_fileset(request_iterator)

    def renew_fileset(
        self, *, fileset_id: str = "", ttl_seconds: int = 0
    ) -> "betterproto_lib_google_protobuf.Empty":

        request = RenewFilesetRequest()
        request.fileset_id = fileset_id
        request.ttl_seconds = ttl_seconds

        return self.__rpc_renew_fileset(request)

    def compose_fileset(
        self, *, fileset_ids: Optional[List[str]] = None, ttl_seconds: int = 0
    ) -> "ComposeFilesetResponse":
        fileset_ids = fileset_ids or []

        request = ComposeFilesetRequest()
        request.fileset_ids = fileset_ids
        request.ttl_seconds = ttl_seconds

        return self.__rpc_compose_fileset(request)

    def shard_fileset(
        self, *, fileset_id: str = "", num_files: int = 0, size_bytes: int = 0
    ) -> "ShardFilesetResponse":

        request = ShardFilesetRequest()
        request.fileset_id = fileset_id
        request.num_files = num_files
        request.size_bytes = size_bytes

        return self.__rpc_shard_fileset(request)
